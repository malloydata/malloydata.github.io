>>>markdown
# Bar Charts

There are two types of bar charts. _Two measure bar charts_ (gradient bar charts) and _Two Dimension Bar_ Charts (stacked bar charts).

The examples below all use the following semantic model.
>>>malloy
source: flights is duckdb.table('../data/flights.parquet') extend {
  join_one: carriers is duckdb.table('../data/carriers.parquet') 
    on carrier = carriers.code
  measure: 
    flight_count is count()
    to_sfo_flight_count is flight_count { where: destination = 'SFO' }
    to_oak_flight_count is flight_count { where: destination = 'OAK' }
    from_sfo_flight_count is flight_count { where: origin = 'SFO' }
    from_oak_flight_count is flight_count { where: origin = 'OAK' }

    aircraft_count is count(tail_num)
}
>>>markdown

## Simple Bar Chart
Basic bar charts use the first dimension as the X-axis, and the first aggregate as the Y-axis:
>>>malloy
#(docs) size=large limit=5000
# bar_chart
run: flights -> {
  group_by: carriers.nickname
  aggregate: flight_count
}
>>>markdown
## Bar Chart with Breakdown
Adding a second dimension to the query in the `group_by:` clause creates a bar chart with a breakdown along that second dimension:
>>>malloy
#(docs) size=large limit=5000
# bar_chart
run: flights -> {
  where: destination ? 'SFO' | 'OAK' | 'SJC'
  group_by: carriers.nickname, destination
  aggregate: flight_count
}
>>>malloy
#(docs) size=large limit=5000
# bar_chart
run: flights -> {
  where: destination ? 'SFO' | 'OAK' | 'SJC'
  group_by: destination, carriers.nickname
  aggregate: flight_count
}
>>>markdown
To stack bars instead of grouping them, add the `stack` tag:
>>>malloy
#(docs) size=large limit=5000
# bar_chart.stack
run: flights -> {
  where: destination ? 'SFO' | 'OAK' | 'SJC'
  group_by: carriers.nickname, destination
  aggregate: flight_count
}
>>>markdown

## Controlling Behavior with Tag Parameters

You can explicitly set any of the parameters in the `bar_chart` tag. The following parameters are supported:
- x
- y
- series
>>>malloy
#(docs) size=large limit=5000
# bar_chart { x=nickname series=destination y=flight_count }
run: flights -> {
  where: destination ? 'SFO' | 'OAK' | 'SJC'
  group_by: destination, carriers.nickname
  aggregate: flight_count
}
>>>markdown

## Breakdown Chart with Multiple Measures
To create a breakdown chart with multiple measures as the series, provide y as an array of field names.
>>>malloy
#(docs) size=large limit=5000
# bar_chart { x=nickname y=['to_sfo_flight_count', 'to_oak_flight_count'] }
run: flights -> {
  group_by: carriers.nickname
  aggregate: 
    to_sfo_flight_count
    to_oak_flight_count
}
>>>markdown
## Embedded Parameters
Parameters can also be embedded directly in a query by tagging fields:
>>>malloy
#(docs) size=large limit=5000
# bar_chart
run: flights -> {
  where: destination ? 'SFO' | 'OAK' | 'SJC'
  group_by: 
    # series
    destination
    # x
    carriers.nickname
  aggregate:
    # y
    flight_count
    aircraft_count
}
>>>markdown
For measure series, tag multiple aggregates as `y` by placing the tag above the `aggregate:` keyword:
>>>malloy
#(docs) size=large limit=5000
# bar_chart
run: flights -> {
  group_by: carriers.nickname
  # y
  aggregate: 
    to_sfo_flight_count
    to_oak_flight_count
}
>>>markdown

## Nested Bar Charts
Barcharts can be used inside of nested queries:
>>>malloy
#(docs) size=large limit=5000
run: flights -> {
  group_by: carriers.nickname
  aggregate: flight_count 
  # bar_chart.stack
  nest: top_destinations is  {
    group_by: destination
    # y
    aggregate:
      from_sfo_flight_count
      from_oak_flight_count
    limit: 10
  }
  # bar_chart { x=hour_of_day y=['from_sfo_flight_count', 'from_oak_flight_count'] }
  nest: by_hour_of_day is  {
    group_by: hour_of_day is hour(dep_time)
    aggregate:
      from_sfo_flight_count
      from_oak_flight_count
  }
}
>>>markdown
