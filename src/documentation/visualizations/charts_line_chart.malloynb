>>>markdown
# Line Charts

The examples below all use the following semantic model.
>>>malloy
source: flights is duckdb.table('../data/flights.parquet') extend {
  join_one: carriers is duckdb.table('../data/carriers.parquet') 
    on carrier = carriers.code
  measure: 
    flight_count is count()
    aircraft_count is count(tail_num)
}
>>>markdown

Line charts take two or three parameters.

* First parameter -  X-axis is time field or numeric expression
* Second parameter - Y-axis is a numeric expression
* Third (optional) Pivot is dimensional field (numeric or string)

## Single line line_chart
>>>malloy
#(docs) size=large limit=5000
# line_chart
run: flights -> {
  group_by: departure_month is dep_time.month
  aggregate: flight_count
}
>>>markdown

## Multi line line_chart

There are two modes to generate mulitple lines in a chart.  You can group by an additional parameter (that shows the results as lines) or you can explicitly tag the y-axis parameters.

The third parameter in a line chart adds a line for each dimension found.  
>>>malloy
#(docs) size=large limit=50000
# line_chart
run: flights -> {
  group_by: departure_month is dep_time.month
  aggregate: flight_count
  group_by: carriers.nickname
}
>>>markdown
Explicitly tagging the x and y axis.
>>>malloy
#(docs) size=large limit=50000
# line_chart
run: flights -> {
  group_by: 
    # x
    departure_month is dep_time.month
  aggregate: 
    # y
    south_west is flight_count {where: carriers.nickname = 'Southwest'}
    # y
    american is flight_count {where: carriers.nickname = 'American'}
}
>>>markdown

## Line Charts nested in tables

When line charts are nested in tables the size is reduced.  Nested line charts increase the density of information provided by the result.
>>>malloy
#(docs) size=large limit=5000
run: flights -> {
  group_by: destination
  aggregate: flight_count
  # line_chart
  nest: by_month is  {
    group_by: departure_month is dep_time.month
    aggregate: flight_count
    group_by: carriers.nickname
  }
  limit: 5
}
>>>markdown
