>>>markdown
# Joins

Joins in Malloy differ from SQL joins.  When two sources are joined,
Malloy retains the graph nature and hierarchy of the the data relationships. This is unlike
SQL, which flattens everything into a single table space.

[Aggregate calculations](aggregates.malloynb) navigate this graph to deduce
the locality of computation, so they are always computed correctly regardless of join pattern, avoiding the fan and chasm traps.

In Malloy, syntaxes for join are:
>>>markdown
```malloy
join_one: <<source name>> [is <<source>>] on <<boolean expression>>
join_one: <<source name>> [is <<source>>] with <<foreign key expression>>
join_many: <<source name>> [is <<source>>] on <<boolean expression>>
join_cross: <<source name>> [is <<source>>] [on <<boolean expression>>]
```
>>>markdown

Examples of the above, with `orders` as the implied source:
>>>markdown
```malloy
join_one: users is duckdb.table('data/users.parquet') on user_id = users.id
join_one: users on user_id = users.id
join_one: users with user_id
join_many: order_items on order_items.id = id
join_cross: order_items2 is duckdb.table('data/order_items.parquet') on user_id = order_items2.user_id
```
>>>markdown

`join_one:` - the table we are joining has one row for each row in the source table.

`join_many:` - the table we are joining has many rows for each row in the source table

`join_cross:` - the join is a cross product and there will be many rows in each side of the join.


Malloy's joins are left outer joins by default.
Since Malloy deals in graphs, some SQL Join types don't make sense (<code>RIGHT JOIN</code>, for example).


## Join Types

### Foreign Key to Primary Key

The easiest, most error-proof way to perform a join is using the following syntax:

`join_one: <<source>> with <<foreign key>>`

To join based on a foreign key through the `primary_key` of a joined source, use `with` to specify an expression, which could be as simple as a field name in the source. This expression is matched against the declared `primary_key` of the joined source. Sources without a `primary_key` cannot use `with` joins.
>>>malloy
source: users is duckdb.table('../data/users.parquet') extend {
  primary_key: id
}

source: order_items is duckdb.table('../data/order_items.parquet') extend {
  join_one: users with user_id
}
>>>markdown

This is simply a shortcut, when joining based on the primary key of a joined source. It is exactly equivalent to the `on` join written like this.
>>>markdown
```malloy
source: order_items is duckdb.table('../data/order_items.parquet') extend {
  join_one: users on order_items.user_id = users.id
}
```
>>>markdown


## Naming Joined Sources

If no alias is specified using `is`, the name of the join will be the name of the source being joined.
>>>malloy
source: carriers is duckdb.table('../data/carriers.parquet') extend {
  primary_key: code
  measure: carrier_count is count()
}

source: flights is duckdb.table('../data/flights.parquet') extend {
  join_one: carriers with carrier
}
>>>markdown

To give the joined source a different name within the context source, use `is` to alias it.
>>>malloy
source: airports is duckdb.table('../data/airports.parquet') extend {
  primary_key: code
}

source: flights2 is duckdb.table('../data/flights.parquet') extend {
  join_one: origin_airport is airports with origin
}
>>>markdown

## In-line Joins

Sources do not need to be modeled before they are used in a join, though the join must be named using `is`.
>>>malloy
source: flights3 is duckdb.table('../data/flights.parquet') extend {
  join_one: carriers is 
    duckdb.table('../data/carriers.parquet') extend { primary_key: code } with carrier
}
>>>markdown

## Using Fields from Joined Sources

When a source is joined in, its fields become nested within the parent source. Fields from joined sources can be referenced using `.`:
>>>malloy
run: flights3 -> {
  group_by: carriers.nickname
  aggregate: flight_count is count()
}
>>>markdown

Measures defined in joined sources may be used in addition to dimensions.
>>>malloy
run: flights -> {
  group_by: destination
  aggregate: carriers.carrier_count
}
>>>markdown

## Join Example

This example demonstrates the definition of several different joins in a model and their use in a query.
Entire subtrees of data can be joined.  In the example below, `aircraft` joins `aircraft_models`, and `flights`
joins `aircraft` and `airports`. The tree nature of the join relationship
retained.
>>>markdown
```malloy
group_by: aircraft.aircraft_models.manufacturer
```
>>>malloy
source: aircraft_models is duckdb.table('../data/aircraft_models.parquet') extend {
  primary_key: aircraft_model_code
  measure: aircraft_model_count is count()
}

/* Individual airplanes */
source: aircraft is duckdb.table('../data/aircraft.parquet') extend {
  primary_key: tail_num
  measure: aircraft_count is count()
  join_one: aircraft_models with aircraft_model_code
}

/* The airports that the aircraft fly to and from */
source: airports2 is duckdb.table('../data/airports.parquet') extend {
  primary_key: code
  measure: airport_count is count()
}

source: flights4 is duckdb.table('../data/flights.parquet') extend {
  join_one: origin_airport is airports2 with origin
  join_one: destination_airport is airports2 with destination
  join_one: aircraft with tail_num
}

run: flights4 -> {
  group_by: aircraft.aircraft_models.manufacturer
  aggregate:
    flight_count is count()
    aircraft_count is aircraft.count()
    aircraft_model_count is aircraft.aircraft_models.count()
}
>>>markdown

For more examples and how to reason about aggregation across joins, review the [Aggregates](aggregates.malloynb) section.

## Inner Joins

Inner join are essentially left joins with an additional condition that the parent table has matches in the joined table. The example below functions logically as an <code>INNER JOIN</code>, returning only users that have at least one row in the orders table, and only orders that have an associated user.
>>>malloy
source: users4 is duckdb.table('../data/users.parquet') extend {
  join_many: orders is duckdb.table('../data/order_items.parquet') on id = orders.user_id
  where: orders.user_id != null
}
>>>markdown
## Joins from Queries

Queries may be used as a source for joins, either as-is or extended:
>>>malloy
query: aircraft_facts is duckdb.table('../data/flights.parquet') -> {
  group_by: tail_num
  aggregate:
    lifetime_flights is count()
    lifetime_distance is distance.sum()
}

source: flights5 is duckdb.table('../data/flights.parquet') extend {
  join_one: aircraft_facts on tail_num = aircraft_facts.tail_num
}

run: flights5 -> {
  group_by: carrier
  nest: top_aircraft is {
    group_by: tail_num, aircraft_facts.lifetime_flights
    limit: 5
    order_by: lifetime_flights desc
  }
}