>>>markdown
# Aggregates

Malloy supports the standard aggregate functions `count`, `sum`, `avg`, `min`, and `max`. When these are used in a field's definition, they make that field a [measure](fields.malloynb#measures).

## Basic Syntax

### count

```malloy
count()
source.count()
join_name.count()
```

The `count` aggregate function may be used to count the number of records appearing in a source.
>>>malloy
##(docs) hidden
import "flights.malloy"
import "ecommerce.malloy"
import "airports.malloy"
>>>malloy
run: flights -> {
  aggregate: flight_count is count()
}
>>>markdown

### count(expr)

```malloy
count(<<expression>>)
source.count(<<expression>>)
join_name.field.count()
```

Distinct counts may be used to count the number of distinct values of a particular expression within a source.
>>>malloy
run: order_items -> {
  aggregate: order_count is count(order_id)
}
>>>markdown

### sum
>>>markdown
```malloy
sum(<<expression>>)
source.sum(<<expression>>)
join_name.sum(<<expression>>)
join_name.field.sum()
```
>>>markdown

The `sum` function may be used to compute the sum of all records of a particular field.
>>>malloy
run: flights -> {
  aggregate: total_distance is sum(distance)
}
>>>markdown

### avg

```malloy
avg(<<expression>>)
source.avg(<<expression>>)
join_name.avg(<<expression>>)
join_name.field.avg()
```

The `avg` function may be used to compute the average of all records of a particular field.
>>>malloy
run: aircraft -> {
  aggregate: average_seats is avg(aircraft_models.seats)
}
>>>markdown

### min

```malloy
min(<<expression>>)
source.min(<<expression>>)
join_name.field.min()
```
>>>markdown

The `min` function may be used to compute the minimum of all records of a particular field.
>>>malloy
run: order_items -> {
  aggregate: cheapest_price is min(sale_price)
}
>>>markdown

### max
>>>markdown
```malloy
max(<<expression>>)
source.max(<<expression>>)
join_name.field.max()
```
>>>markdown

The `max` function may be used to compute the maximum of all records of a particular field.
>>>malloy
run: flights -> {
  aggregate: longest_distance is max(distance)
}
>>>markdown

## Aggregate Locality

In SQL, some kinds of aggregations are difficult to express because locality of aggregation is restricted to the top level of a query. Malloy
offers more control over this behavior, allowing these types of analysis to be
expressed much more easily.

### The Problem

Suppose you were interested in learning more about the number of seats on
commercial aircraft. First you might look at the average number of seats
on all registered aircraft.

To do this, you would start with the `aircraft` table and join in `aircraft_models` to get access to the number of seats, then take
the average of `aircraft_models.seats`.

```sql
SELECT
  AVG(aircraft_models.seats)
FROM aircraft
LEFT JOIN aircraft_models
  ON aircraft.aircraft_model_code = aircraft_models.aircraft_model_code
```
>>>malloy
run: aircraft -> {
  aggregate: average_seats is avg(aircraft_models.seats)
}
>>>markdown

You're also interested in knowing the average number of seats on the kinds of aircraft that are in use, or in other words, the average number of seats of the aircraft models of registered aircraft.

To do this, you might decide to start with the `aircraft_models` table instead.

```sql
SELECT AVG(seats)
FROM aircraft_models
```
>>>malloy
run: aircraft_models -> {
  aggregate: average_seats is avg(seats)
}
>>>markdown

However, this isn't actually the number you were interested in, because this measures the average number of seats across _all_ aircraft models, not just the ones with actively-registered aircraft.

Unfortunately, SQL doesn't have any native constructs to compute this value, and in practice analysts often resort to complicated [fact tables](https://www.zentut.com/data-warehouse/fact-table/) to perform this kind of query.

### The Solution

Malloy introduces the concept of _aggregate locality_, meaning that aggregates can be computed with respect to different points in the data graph. In the following query, `average_seats` is computed with respect to `aircraft_models`,
yielding the the average number of seats on aircraft models of aircraft listed in the `aircraft` table.
>>>malloy
run: aircraft -> {
  aggregate: average_seats is aircraft_models.avg(aircraft_models.seats)
}
>>>markdown

Using a bare aggregate function, e.g. `avg(<<expression>>)`, will aggregate with respect to the current source (in the above example, that would be `aircraft`). The syntax `source.avg(expr)` makes that aggregate locality explicit. When an aggregate computation crosses a join relationship, explicit aggregate locality is required. See [below](#required-explicit-aggregate-locality) for more details.

For convenience, `aircraft_models.avg(aircraft_models.seats)` can be written as `aircraft_models.seats.avg()`.

### Aggregates that Support Locality

The aggregate functions that support locality are `count` (non-distinct), `sum`, and `avg`.

The `min` and `max` aggregates do not support aggregate locality because the minimum and maximum values are the same regardless of where they are computed. Local aggregation removes duplicate values (those corresponding to the same row in the aggregate source location), and minimum and maximum values do not change if values are repeated more than once.

### Required Explicit Aggregate Locality

Specifying aggregate locality is required when the aggregate computation crosses a join relationship accesses nested data. For symmetric aggregate functions `min`, `max`, and `count`, this never occurs, and so it is always allowed to use the regular `min(<<expression>>)` syntax.
For asymmetric aggregates `avg` and `sum`, any time the aggregate expression (or dimension) uses a join or nested field, using the syntax `sum(<<expression>>)` will result in a warning suggesting the use of `source.sum(<<expression>>)` instead.

>>>malloy
run: aircraft -> {
  aggregate:
    // Symmetric aggregate functions can use implicit locality
    okay_1 is min(aircraft_models.seats) 
    // Asymmetric aggregate functions must use explicit locality
    warning is avg(aircraft_models.seats)
    // Using `source` for explicity locality to produce a weighted average
    okay_2 is source.avg(aircraft_models.seats)
    // Using `aircraft_models` for explicit locality
    okay_3 is aircraft_models.avg(aircraft_models.seats)
}
>>>markdown

### Examples

The following queries show six ways of calculating the average number of seats.
>>>malloy
run: flights -> {
  aggregate:
    aircraft_models_avg_seats is aircraft.aircraft_models.seats.avg()
    aircraft_avg_models_seats is aircraft.avg(aircraft.aircraft_models.seats)
    avg_aircraft_models_seats is source.avg(aircraft.aircraft_models.seats)
}
>>>markdown

>>>malloy
run: aircraft -> {
  aggregate:
    models_avg_seats is aircraft_models.seats.avg()
    avg_models_seats is source.avg(aircraft_models.seats)
}
>>>markdown

>>>malloy
run: aircraft_models -> {
  aggregate: avg_seats is avg(seats)
}
>>>markdown

This table summarizes the meaning of each of these calculations.

| Field Definition and Source | Is the average number of seats... |
|-------------|---------|
| `avg(seats)` in `aircraft_models`  | ...of all aircraft models. |
| `source.avg(aircraft_models.seats)` in `aircraft` | ...on aircraft. |
| `aircraft_models.seats.avg()` in `aircraft` | ...of the aircraft models of aircraft. |
| `source.avg(aircraft.aircraft_models.seats)` in `flights` | ...on flights. |
| `aircraft.avg(aircraft.aircraft_models.seats)` in `flights` | ...on aircraft that fly. |
| `aircraft.aircraft_models.seats.avg()` in `flights` | ...of the aircraft models of aircraft that fly.|

### Illegal Asymmetric Aggregate Computations

There are a few circumstances when an asymmetric aggregate computation is illegal, based on the join usage of that computation:
* When the aggregate crosses a `join_many` relationship forward
* When the aggregate crosses a `join_cross` relationship forward or backward
* When the aggregate crosses a repeated nested relationship forward

"Forward" verses "backward" refers to the difference between `<<join name>>.sum(<<field in source>>)` (forward) and `source.sum(<<join name>>.<<field in join>>)` (backward).

These cases don't carry meaning and are impossible to compute. Malloy will yield an error like "Cannot compute `sum` across `join_many` relationship `join_name`; use `join_name.field.sum()`".

### Aggregates on Fields

Aggregating "on a field," e.g. `aircraft_models.seats.avg()` is exactly equivalent to aggregating that field with respect to its direct parent source, e.g. `aircraft_models.avg(aircraft_models.seats)`. This syntax is supported for the aggregate functions which benefit from aggregate locality and require a field, `avg` and `sum`.

One case to make note of is when the field is a dimension which uses exactly one join pattern, in which case it is equivalent to aggregating with respect to that join pattern:

>>>malloy
run: aircraft extend {
  dimension: aircraft_model_seats is aircraft_models.seats
} -> {
  aggregate:
    avg_on_source is aircraft_models.avg(aircraft_models.seats)
    avg_on_field is aircraft_models.seats.avg()
    avg_on_dimension is aircraft_model_seats.avg()
}
>>>markdown

## Ungrouped Aggregates

In a query which is grouped by multiple dimensions, it is often useful to be able to perform an aggregate calculation on sub-groups to determine subtotals. The `all()` and `exclude()` functions in Malloy allow control over grouping and ungrouping, making this simple:
>>>malloy
run: airports -> {
  group_by: state, faa_region
  aggregate:
    count_airports is count()
    overall_airports is all(count())
    # percent
    percent_of_total is count() / all(count())
    airports_in_region is all(count(), faa_region)
    # percent
    percent_in_region is count() / all(count(), faa_region)
}
>>>markdown

Read more about Ungrouped Aggregates [here](ungrouped-aggregates.malloynb).
