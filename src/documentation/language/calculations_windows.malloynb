>>>markdown
# Calculations and Window Functions

Window functions in Malloy are expressed in _calculation_ fields, using the `calculate: ` keyword. Calculation fields operate on the results of a aggregation or selection, while still operating within the same query stage. Logically these calculation operations occur "after" the other operations, so their exact semantics can be challenging to understand. For a full list of the window functions that Malloy supports, visit our [function reference documentation](./functions.malloynb#window-functions).

Here is a simple example:
>>>malloy
##(docs) hidden
import "flights.malloy"
>>>malloy
#(docs) size=large
run: flights -> {
  where: carrier = 'WN'
  group_by: dep_year is dep_time.year
  aggregate: flight_count
  order_by: dep_year asc
  calculate: year_change is flight_count - lag(flight_count)
}
>>>markdown
In this query, we compute `flight_count` as an aggregate, and then compute the year-over-year change, `year_change` in the `calculate:` clause, using the [lag](./functions.malloynb#lag) window function.

## Ordering

Some window functions in SQL, such as [lag](https://cloud.google.com/bigquery/docs/reference/standard-sql/functions-and-operators#lag), require an <code>ORDER BY</code> clause to determine behavior. In Malloy, such analytic functions use the ordering of the query itself. For example:
>>>malloy
#(docs) html size=large
run: flights -> {
  where: carrier = 'WN'
  group_by: dep_year is dep_time.year
  aggregate: flight_count
  order_by: dep_year asc
  calculate: year_change is flight_count - lag(flight_count)
}
>>>markdown

`lag(flight_count)` for each row is calculated with respect to `dep_year asc`. The value of `lag(flight_count)` for the year 2001 is the value of `flight_count` for the year 2000.

Note that Malloy queries use a [default ordering](order_by.malloynb#ordering-and-limiting) if none is explicitly specified:
1. If a time dimension is specified in the query, default ordering is by "descending time", showing newest rows first
2. If no time is specified, but there is a numeric measure, default ordering is by "measure values descending", showing largest values first

Ordering can also be changed by adding an `order_by` property on the calculation. This allows you to control the ordering of the input to the window function independently from the ordering of the final results.

>>>malloy
##! experimental
#(docs) html size=large
run: flights -> {
  where: carrier = 'WN'
  group_by: dep_year is dep_time.year
  aggregate: flight_count
  calculate: year_change is flight_count - lag(flight_count) {
    order_by: dep_year asc
  }
  order_by: dep_year desc
}
>>>markdown

In this example, the window function is calculated in ascending order with respect to `dep_year`, but the results are output in descending order (most recent year first).

## Partitioning
Some window function operations require the specification of <code>partition_by</code> clauses in SQL. For example, calculating year-over-year changes for a specific time span, such as "number of flights in March of this year versus March of last year". In Malloy, these can be specified by adding a `partition_by` property to the calculation.

>>>malloy
##! experimental
#(docs) html size=large
run: flights -> {
  where: carrier = 'WN'
  group_by:
    dep_year is dep_time.year
    dep_month is month(dep_time)
  aggregate: flight_count

  calculate: year_change is flight_count - lag(flight_count) {
    partition_by: dep_month
    order_by: dep_year
  }

  order_by: dep_year, dep_month
}
>>>markdown

This query modifies the window by adding a `partition_by` clause on the month number, and an `order_by` on the year. This means each window contains only data for a given month number, and the `lag` function grabs the value for `flight_count` of the prior year within that window.

## Field References in Calculations

Because calculations operate logically on the output of the grouping/projecting/aggregating operations, field references behave differently inside a `calculate:` block. In particular, field references refer by default to output names from those operations.
>>>malloy
run: flights -> {
  group_by: lower_carrier is lower(carrier)
  calculate: prev_carrier is lag(lower_carrier)
}
>>>markdown

In a `group_by` or `aggregate`, you cannot reference `lower_carrier` because it is not a field defined inside of `flights`, but in `calculate`, you can.

For a detailed explanation of the exact semantics, see the [evaluation space documentation](./eval_space.malloynb).
