>>>markdown
# Expressions Involving NULL

Malloy and SQL use a "NULL tainting" approoach to null values in computation. Any computation which includes a `null` always results in a `null`.

## Malloy and NULL

For most operations, missing or null-valued data can still be used in a computation
and the "NULL tainting", along with treating `null` as a "false-ish" value, mostly works. For example `x = y` results in `null` if either value is null, and the "false-ish"
treatment of NULL means that comparison is meaningful, even if some of the values are `null`.

<TABLE style='width: auto'>
<TR><TH COLSPAN=4 style="font-size: 1.1em;">SQL = with NULLs</TH></TR>
<TR>
  <TH><CODE>x</CODE></TH>
  <TH><CODE>y</CODE></TH>
  <TH>SQL <CODE>x = y</CODE></TH>
  <TH>Acts Like</TH>
</TR>
<TR> <TD><CODE>1</CODE></TD>    <TD><CODE>1</CODE></TD>    <TD>true</TD>  <TD>true</TD> </TR>
<TR> <TD><CODE>1</CODE></TD>    <TD><CODE>2</CODE></TD>    <TD>false</TD> <TD>false</TD> </TR>
<TR> <TD><CODE>1</CODE></TD>    <TD><EM>null</EM></TD> <TD><EM>null</EM></TD>  <TD><EM>false</EM></TD> </TR>
<TR> <TD><EM>null</EM></TD> <TD><EM>null</EM></TD> <TD><EM>null</EM></TD>  <TD><EM>false</EM></TD> </TR>
</TABLE>

However, the boolean output of a negated boolean operation, when null tainted,
is not useful, and SQL programmers have to protect any use of `NOT` or `!=`
in order for the result to be correct.

<TABLE style='width: auto'>
<TR><TH COLSPAN=4 style="font-size: 1.1em;">SQL NOT with NULLs</TH></TR>
<TR>
  <TH><CODE>x</CODE></TH>
  <TH>SQL <CODE>NOT x</CODE></TH>
  <TH>Acts Like</TH>
</TR>
<TR> <TD><CODE>true</CODE></TD>   <TD>false</TD>          <TD>false</TD> </TR>
<TR> <TD><CODE>false</CODE></TD>  <TD>true</TD>           <TD>true</TD> </TR>
<TR> <TD><EM>null</EM></TD>       <TD><EM>null</EM></TD>  <TD><EM>false</EM></TD> </TR>
</TABLE>

Malloy avoids this by coalescing the output of `NOT` to produce the much more useful truth table ...

<TABLE style='width: auto'>
<TR><TH COLSPAN=4 style="font-size: 1.1em;">Malloy NOT with NULLs</TH></TR>
<TR>
  <TH><CODE>x</CODE></TH>
  <TH>Malloy <CODE>NOT x</CODE></TH>
</TR>
<TR> <TD><CODE>true</CODE></TD>   <TD>false</TD>          </TR>
<TR> <TD><CODE>false</CODE></TD>  <TD>true</TD>           </TR>
<TR> <TD><EM>null</EM></TD>       <TD><STRONG>true</STRONG></TD>  </TR>
</TABLE>

### Inequality

Similarly `!=` equality produces a nonsensical result when some of the values are null.

<TABLE style='width: auto'>
<TR><TH COLSPAN=4 style="font-size: 1.1em;">SQL != with NULLs</TH></TR>
<TR>
  <TH><CODE>x</CODE></TH>
  <TH><CODE>y</CODE></TH>
  <TH>SQL <CODE>x != y</CODE></TH>
  <TH>Acts Like</TH>
</TR>
<TR> <TD><CODE>1</CODE></TD>    <TD><CODE>1</CODE></TD>    <TD>false</TD>  <TD>false</TD> </TR>
<TR> <TD><CODE>1</CODE></TD>    <TD><CODE>2</CODE></TD>    <TD>true</TD> <TD>true</TD> </TR>
<TR> <TD><CODE>1</CODE></TD>    <TD><EM>null</EM></TD> <TD>true</TD>  <TD><EM>false</EM></TD> </TR>
<TR> <TD><EM>null</EM></TD> <TD><EM>null</EM></TD> <TD>true</TD>  <TD><EM>false</EM></TD> </TR>
</TABLE>

Malloy also protects the inequality comparison with a coalesce, to give the much more useful truth table ...

<TABLE style='width: auto'>
<TR><TH COLSPAN="3" style="font-size: 1.1em;">Malloy != with NULLs</TH></TR>
<TR>
  <TH><CODE>x</CODE></TH>
  <TH><CODE>y</CODE></TH>
  <TH>Malloy <CODE>x != y</CODE></TH>
</TR>
<TR> <TD><CODE>1</CODE></TD>    <TD><CODE>1</CODE></TD>    <TD>false</TD>  </TR>
<TR> <TD><CODE>1</CODE></TD>    <TD><CODE>2</CODE></TD>    <TD>true</TD> </TR>
<TR> <TD><CODE>1</CODE></TD>    <TD><EM>null</EM></TD> <TD><STRONG>true</STRONG></TD>  </TR>
<TR> <TD><EM>null</EM></TD> <TD><EM>null</EM></TD> <TD><STRONG>true</STRONG></TD>  </TR>
</TABLE>