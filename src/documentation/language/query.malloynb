>>>markdown
# Queries

The basic syntax for a query in Malloy consists of a source and a "pipeline" of one or more _stages_ separated by `->`. The shape of the data defined in the original source is transformed by each stage.
>>>malloy
##(docs) hidden
import "flights.malloy"
>>>malloy
run: flights -> { 
  group_by: carrier 
  aggregate: flight_count
}
>>>markdown

## Query Sources

Every query begins with a source, which can be thought of as a table with an associated collection of calculations and join relationships. The most common kind of source is a table source, e.g. `duckdb.table('flights.csv')`; see the [Sources](./source.malloynb) section for more information on creating and extending sources.

Generally, ad-hoc queries will use one of these kinds of sources directly:
>>>malloy
run: duckdb.table('../data/flights.parquet') -> { 
  aggregate: total_flight_count is count() 
}
>>>markdown

However, as analysis becomes more involved, it is often useful to define reusable computations in a named source, then use that named source as the basis for queries.
>>>malloy
source: flights2 is duckdb.table('../data/flights.parquet') extend { 
  measure: 
    flight_count is count() 
    total_distance is sum(distance)
}

run: flights2 -> {
  group_by: carrier
  aggregate: flight_count, total_distance
}
>>>markdown

It is also sometimes useful to define a query and then later use that query as the source for another query:
>>>malloy
query: flights_by_carrier is duckdb.table('../data/flights.parquet') -> {
  group_by: carrier
  aggregate: flight_count is count()
}

run: flights_by_carrier -> { 
  select: carrier
  limit: 2 
}
>>>markdown

### Implicit Sources

There are two cases where a query's source is implicit: when it is defined within a source and when it is nested inside another query stage.

Here, `by_carrier` is defined within `flights`, so its source is implicit:  
>>>malloy
source: flights3 is duckdb.table('../data/flights.parquet') extend {
  query: by_carrier is  {
    group_by: carrier
    aggregate: flight_count is count()
  }
}
run: flights3 -> by_carrier
>>>markdown

Here, `by_carrier` is a query defined nested inside another query stage, and its source is also implicit:
>>>malloy
run: duckdb.table('../data/flights.parquet') -> {
  group_by: dep_year is dep_time.year
  nest: by_carrier is -> {
    group_by: carrier
    aggregate: flight_count is count()
    limit: 2
  }
  limit: 3
}
>>>markdown

## Pipelines

Each stage of a pipeline performs a transformation on the source or a previous stage. A stage can be one of two kinds:
* **reduction**: reduce the grain of the data being transformed using `group_by:` and/or `aggregate:`
* **projection**: select fields without reducing using `select:`

### Reduction 
The following is an example of a **reduction**:
>>>malloy
run: flights -> {
  // Filtering
  where: distance > 1000       
  // Limiting 
  limit: 10     
  // Reducing 
  group_by: carrier        
  aggregate: flight_count is count()              
  // Ordering      
  order_by: flight_count desc  
  // Calculating (window functions)
  calculate: prev_flight_count is lag(flight_count)
  // Post-aggregation filtering
  having: flight_count > 10000
}
>>>markdown

### Projection

The following is an example of a **projection**:
>>>malloy
run: flights -> {
  select: *
  limit: 20
}
>>>markdown

Note that the operations in a stage are for the most part not order-sensitive like SQL; they can be arranged in any order.

A reference to a [source-level query](./fields.malloynb#source-level-queries) (which defines its own pipeline) can be the first stage in a pipeline.
>>>malloy
run: flights -> by_carrier
>>>markdown
### Multi-Stage Pipelines

This example shows a pipeline with 3 stages, the multiple stages chained using `->`. Each stage generates a CTE in the SQL (click "SQL" on the right to see what this looks like.)
>>>malloy
run: duckdb.table('../data/flights.parquet') -> {
  select: *
  where: dep_time > @2003
} -> {    
  -- extend: allows you to define fields for use within the query
  extend: { measure: flight_count is count() }   
  aggregate: flight_count
  nest: main_query is {
    group_by: carrier
    aggregate: flight_count
  }
} -> {
  select:
    main_query.carrier
    main_query.flight_count
    # percent
    flight_count_as_a_percent_of_total is main_query.flight_count / flight_count
}
>>>markdown

## Fields

In a query stage, fields (dimensions, measures, or
queries) may be specified either by referencing an existing
name or defining them inline.
>>>malloy
query: flights -> {
  group_by: carrier
  aggregate: flight_count is count()
}
>>>markdown

When referencing existing fields in a `select:` clause, wildcard expressions like `*`, or `some_join.*` may be used.

See the [Fields](fields.malloynb) section for more information
about the different kinds of fields and how they can be
defined.

## Filters

Filters specified at the top level of query stage apply to the whole stage.

At the source level
>>>malloy
query: flights extend { where: distance > 1000 } -> {
  group_by: distance
  aggregate: flight_count
}
>>>markdown

or in the query stage.
>>>malloy
query: flights -> {
  where: distance > 1000
  group_by: distance
  aggregate: flight_count
}
>>>markdown

Filters may be applied to a [query's source](filters.malloynb#filtering-in-a-query-stage), an [entire source](source.malloynb#filtering-sources), or to a [measure](expressions.malloynb#filtered-expressions).

<!-- TODO: improve link for filtering a measure. -->

See the [Filters](filters.malloynb) section for more information.

## Refinement

A query can be "refined", which means adding clauses such as `select:`, `group_by:`, `aggregate:`, or `where:`. For example, let's define a query:
>>>malloy
source: flights4 is duckdb.table('../data/flights.parquet') extend {
  query: top_destinations is {
    group_by: destination
    aggregate: flight_count is count()
  }
}
>>>markdown

Running the query gives us flight count by destination:
>>>malloy
run: flights4 -> top_destinations
>>>markdown

Now let's refine it by adding `+ { group_by: origin }`. This adds a `group_by` clause to the original query
>>>malloy
run: flights4 -> top_destinations + {
  group_by: origin
}
>>>markdown

The query is now calculating `flight_count` grouped by both `destination` and `origin`.

Query refinement can be thought of as similar to extending a class in object-oriented programming. The new query inherits the properties of the original query, and adds new properties to it. (That said, it should not be confused with the similar concept of [source extension](./source.malloynb#source-extensions).) This makes query logic much more reusable, since query fragments can be easily saved and modified. 

## Ordering and Limiting

Query stages may also include ordering and limiting
specifications.
>>>malloy
run: flights -> {
  limit: 4
  group_by: carrier
  aggregate: flight_count
}
>>>markdown

For detailed information on ordering and limiting, see the [Ordering and Limiting](order_by.malloynb) section.

## Post-Aggregation Filtering

Query stages may filter groupings based on aggregate values using the `having:` clause, which corresponds to SQL's <code>HAVING</code> clause.
>>>malloy
run: flights -> {
  group_by: carrier
  aggregate: flight_count
  having: flight_count > 35000
}
>>>markdown

## Calculations (Window Functions)

Calculations based on other groupings may be performed with the `calculate:` clause and analytic functions. See the [Calculations](./calculations.malloynb) section for details.
>>>malloy
run: flights -> {
  group_by: carrier
  aggregate: flight_count
  calculate: flight_count_rank is rank()
}
>>>markdown
