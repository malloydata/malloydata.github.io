>>>markdown
# Queries

The basic syntax for a query in Malloy consists of a [source](./source.malloynb) and a [view](./views.malloynb) consisting of one or more _stages_ separated by `->`. The shape of the data defined in the original source is transformed by each stage.
>>>malloy
##(docs) hidden
import "flights.malloy"
>>>malloy
run: flights -> { 
  group_by: carrier 
  aggregate: flight_count
}
>>>markdown

## Sources

Every query begins with a source, which can be thought of as a table with an associated collection of calculations and join relationships. The most common kind of source is a table source, e.g. `duckdb.table('flights.csv')`; see the [Sources](./source.malloynb) section for more information on creating and extending sources.

Generally, ad-hoc queries will use one of these kinds of sources directly:
>>>malloy
run: duckdb.table('../data/flights.parquet') -> { 
  aggregate: total_flight_count is count() 
}
>>>markdown

However, as analysis becomes more involved, it is often useful to define reusable computations in a named source, then use that named source as the basis for queries.
>>>malloy
source: flights2 is duckdb.table('../data/flights.parquet') extend { 
  measure: 
    flight_count is count() 
    total_distance is sum(distance)
}

run: flights2 -> {
  group_by: carrier
  aggregate: flight_count, total_distance
}
>>>markdown

It is also sometimes useful to define a query and then later use that query as the source for another query:
>>>malloy
query: flights_by_carrier is duckdb.table('../data/flights.parquet') -> {
  group_by: carrier
  aggregate: flight_count is count()
}

run: flights_by_carrier -> { 
  select: carrier
  limit: 2 
}
>>>markdown
## Views

A view defines a transformation (or series of transformations) to perform on a source. In a query, everything after the first `->` is a view.

```malloy
//   source  -> view
run: flights -> { select: * }
```

Views can be defined in a [source extension](./source.malloynb#source-extensions) to enable reusability and nesting. You can always copy and paste the view of a query into the definition of the source of that query (or an extension of that source).
>>>malloy
source: flights3 is flights extend {
  view: by_carrier2 is { 
    group_by: carrier 
    aggregate: flight_count
  }
}

run: flights3 -> by_carrier2
>>>markdown
Queries that reference a view by name can add additional stages after those defined in the view.
>>>malloy
run: flights3 -> by_carrier2 -> {
  select: carrier
  limit: 1
}
>>>markdown
## Refinements, Query partials and Shorthand
Query blocks write be written in parts, those parts can be either views in the source and combined with the refinement operator `+`

The query below

```malloy
run: flights -> {
  group_by: carrier
  aggregate: flight_count
  limit: 10
}
```
can be written as below.  Each of the parts of a query can be separated into a 'partial query'.

```malloy
run: flights -> 
  {group_by: carrier}
  + {aggregate: flight_count}
  + {limit: 10}
```

The query can also be written as: 

```malloy
run: flights -> 
  carrier
  + flight_count
  + {limit: 10}
```

In the query above, the refinement operator `+` combines the parameters of a query so the query can be built from parts.  Measure, dimension and views declared in the source can also be used.  Referencing dimension `carrier` expands to a partial of `{group_by: x}`. Referencing measure `flight_count` expands to a partial query of `{aggregate: flight_count}`
>>>markdown
For more information about defining, reusing, nesting, and refining views, see the [Views](views.malloynb) section.