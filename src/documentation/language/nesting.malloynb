>>>markdown
# Nested Views

Nested views are views included in other views. When a nested view is used in a query, it generates an _aggregating subquery_, which produces a subtable per row in the view in which it is embedded. The term _nested query_ is often used to refer to a query which uses a nested view.
>>>malloy
##(docs) hidden
import "airports.malloy"
>>>malloy
run: airports -> {  
  group_by: state
  aggregate: airport_count
  nest: by_facility is {
    group_by: fac_type
    aggregate: airport_count
  }
}
>>>markdown

## Nesting Nested Views

Aggregating subqueries can be nested infinitely, meaning that a nested view can contain another nested view.
>>>malloy
run: airports -> {
  group_by: state
  aggregate: airport_count
  nest: top_5_counties is {
    limit: 5
    group_by: county
    aggregate: airport_count
    nest: by_facility is {
      group_by: fac_type
      aggregate: airport_count
    }
  }
}
>>>markdown

## Filtering Nested Views

Filters can be applied at any level within nested views.
>>>malloy
run: airports -> {
  where: state ? 'CA' | 'NY' | 'MN'
  group_by: state
  aggregate: airport_count
  nest: top_5_counties is {
    limit: 5
    group_by: county
    aggregate: airport_count
    nest: major_facilities is  {
      where: major = 'Y'
      group_by: name is concat(code, ' - ', full_name)
    }
    nest: by_facility is  {
      group_by: fac_type
      aggregate: airport_count
    }
  }
}
>>>markdown
## Nesting Named Views

Any views defined in a source can be used by name in a `nest:` clause or a query.
>>>malloy
source: airports_with_views is airports extend {
  view: by_facility is {
    group_by: fac_type
    aggregate: airport_count
  }

  view: major_facilities is {
    where: major = 'Y'
    group_by: name is concat(code, ' - ', full_name)
  }

  view: top_5_counties is {
    limit: 5
    group_by: county
    nest: 
      major_facilities
      by_facility
  }
}

run: airports_with_views -> top_5_counties