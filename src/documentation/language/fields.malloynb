>>>markdown
# Fields

Fields constitute all kinds of data in Malloy. They
can represent dimensional attributes sourced directly from
tables in a database, constant values to be used in later analysis, computed metrics derived from other fields, or even nested structures created from aggregating subqueries.

## Defining Fields

Fields defined in sources are reusable. A field is a *dimension*, *measure* or *view*, or *calculation*.  When these are used in a query, these fields are invoked with `select:`, `group_by:`, `aggregate:`, `nest:`, or `calculate:`.  Their definitions are syntactically identical whether defined in a source or a view (with the exception of calculations, which can only be defined in a view, and not in a source). In either case, they are defined using the `is` keyword.

**In a source**
>>>malloy
source: users is duckdb.table('../data/users.parquet') extend {
  dimension: age_in_dog_years is age * 7
}
>>>markdown

**In a query**
>>>malloy
run: users -> {
  group_by: age_in_dog_years is age * 7
}
>>>markdown

The right hand side of this kind of definition can be any
field expression. See the [Expressions](expressions.malloynb)
section for more information.

Like dimensions and measures, views can also be defined as
part of a source or in a query's view. When a view is used or defined in another view, it is known as a "nested view" and produces an "aggregating
subquery." See the [Nesting](nesting.malloynb) section for a
detailed discussion of nested views.
>>>malloy
##(docs) hidden
import "flights.malloy"
>>>malloy
run: flights -> {
  group_by: carrier
  nest: by_month is {
    group_by: departure_month is dep_time.month
    aggregate: flight_count is count()
    limit: 3
  }
}
>>>markdown

## Field Names

Field names generally must start with a letter or underscore, and can only contain letters, numbers, and underscores. Field names which don't follow these rules, or which conflict with a Malloy keyword, must be enclosed in back ticks, e.g. `` `year` is dep_time.year``.

## Kinds of Fields

Malloy has four different kinds of fields: _dimensions_, _measures_, _views_, and _calculations_.

### Dimensions

Dimensions are fields representing scalar values. All fields
inherited directly from a table are dimensions.

Dimensions are defined using expressions that contain no
aggregate functions.
>>>malloy
source: users2 is duckdb.table('../data/users.parquet') extend {
  dimension: full_name is concat(first_name, ' ', last_name)
}
>>>markdown

Dimensions may be used in both reductions and projections.
>>>malloy
// Show the top 10 full names by number of occurrences
run: users2 -> {
  limit: 10
  group_by: full_name
  aggregate: occurrences is count()
}

// Show 10 users' full names
run: users2 -> {
  select: full_name
  limit: 10
}
>>>markdown

### Measures

Measures are fields representing aggregated data over multiple records. Measures may not be used in projections (i.e., `select:` queries), they can only be used in "group by" or "aggregating" queries.
>>>malloy
source: flights2 is duckdb.table('../data/flights.parquet') extend {
  measure:
    -- define the measure in the source:
    total_flight_time is sum(flight_time)
}

run: flights2 -> {
  group_by: carrier
  -- use the previously defined measure in a query:
  aggregate: total_flight_time
}
>>>markdown

### Views

A view is a query that has been saved to the semantic model. By adding a view to a Source, you are indicating that this is an important query for the dataset.
>>>markdown
```malloy
source: flights is duckdb.table('../data/flights.parquet') extend {
  view: by_carrier is {
    group_by: carrier
    aggregate: flight_count is count()
  }
}
```
>>>markdown
A view can always begin with another view from the same source. In the following example, `top_carriers` is a view that starts with the `by_carrier` view, selects only the `carrier` column, and sets a limit of 5 rows.
>>>markdown
```malloy
source: flights is duckdb.table('../data/flights.parquet') extend {
  ...
  view: top_carriers is by_carrier -> {
    select: carrier
    limit: 5
  }
}
```
>>>markdown

<!-- TODO this does not seem to work in a query stage, but it does work in an source or model -->

Views are composable building blocks, which you can use for complex analysis. The following query nests two different views: the `by_carrier` view computes `flight_count` and `destination_count` for each airline in the dataset. Nesting the `by_manufacturer` view shows the aircraft count, broken out by manufacturer within each of the airlines.
>>>malloy
run: flights -> by_carrier + {
  limit: 5
  
  nest: by_manufacturer
}
>>>markdown
See the [Nesting](nesting.malloynb) section for more details about nested views.

### Calculations (Window Functions)

*Calculations* are fields based off of groupings and aggregate values in a view, and therefore can only be created in a view with `calculate:` and can not be predefined in a source. See the [Calculations and Window Functions](./calculations_windows.malloynb) section for details.
>>>malloy
run: flights -> {
  group_by: carrier
  aggregate: flight_count
  calculate: flight_count_rank is rank()
}