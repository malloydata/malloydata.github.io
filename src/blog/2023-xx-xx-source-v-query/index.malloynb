>>>markdown
# Malloy: Source vs Query

New conceptual models can be hard for people.  We generally don't like new ways of thinking about things.  We generally only engage in learning something new after believe it is worth the effort.  Malloy makes the promise, "**if you learn Malloy, you will be 10x more efficient in asking questions of data.**"

## Learning is hard, analogies help.  

As a programmer, you are probably aware of 'function libraries'.  Function libraries are reusable code for imperitive programming.  In imperitive programming, functions are operations that do something and return. *getFile(f)* might return a file. *upcase(s)* might upper case a string.  Functions are collected into libraries.  We don't have to concern ourselves with how the functions work just what they take as input and what they return.

Instead of having to write a program from scratch everytime, we can use these function libraries to make building code faster, much faster.

Think of Malloy as a language that let's you build function libraries for data. Data programs are quite different than imperitive programs so they way you reuse things is different, but the concept is analogus.  In data, we often write a computation over and over again in different queries.  We'd like that to be reusable.  We join the same tables over and over, we'd like that to be reusable.  It is this reusability that makes Malloy special.

## Malloy's two main concepts, `source:` and `query:`

*Queries* are easy to understand. In writing this, I am presuming you know some SQL and that you are probably pretty good at it.  The Malloy concept of a `query:` is exactly analoguous to the SQL concept of a query.  The query is a specficitation that tells the database to do something and return results.  The specification tells the database how the data is related and what calculations to make.  When the data bases runs a query, it returns data. The data is a table.  The output of one query, can be the input of the next query.

**Queries in Malloy are pretty much the sames as they are in SQL.** 

The Malloy concepted of a *source* is the new thing.  In Malloy, a `source:` is analogus to a function library in other languages. 

**Think of a source as a function library for data.**

The goal is to make it as easy as possible to query this library with a little information as possible.  A source exposes 3 kinds of things, views, measures and dimensions.

*view* - A view is a pre-built query.  A view is much like a SQL view. When you query it, it returns a result set. 

*measure* - A measure is an aggregate calculation over the dataset.  An aggregate calculation might be something like *revenue* or *user_count*.  It is something that might be asked of the dataset.

*dimension* - A dimension is usually a column in a table somewhere but can also be a calculation.  The act of exploring data is always, grouping by some dimension and making some aggregate calculation.  Dimensions are ways you look at data.  Examples dimensions might be *product_id*, *order_date*, *product_brand*.

Let's play with an example.
>>>malloy
