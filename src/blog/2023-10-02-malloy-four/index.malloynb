>>>markdown
# Malloy 4.0 (PREVIEW UNPUBLISHED POST)

We WILL BE IN THE FUTURE BUT ARE NOT NOW very excited to announce version 4.0 of the Malloy language.

There was never an official "3.0", we are calling this release 4.0 because this is the fourth major
renovation of the language. It could also be thought of as "1.0" because this is when we stop using
"experimental" to describe the language. At this point we have experimented enough.  We believe
Malloy is now the best language for working with data stored in an SQL server.

## The 4.0 Release Timeline

Before 4.0, when Malloy was in the experimental phase, it was considered acceptable to make breaking
changes to the language as we discovered better ways to express data computations.  Beginning with
4.0, it is our intention to keep code compatibility for existing code, even as we continue to add
capabilities to the language.

The rollout of 4.0 will happen in stages, so that users will have time to upgrade their code before it stops working.

| Date | Malloy Langauge Status |
| ----------: | :-------------------- |
| **2003-10-02** | Both 4.0 and pre-4.0 Malloy code are usable in the Pre-Release Malloy VS Code Extension<br/><ul><li>If you are using a language construct which will not work in 4.0, the IDE will show you a warning.</li><li>The [Documentation](../../documentation/index.malloynb) describes the 4.0 syntax.</li></ul>
| **2023-10-09** | The Release version of the extension will begin to warn on pre-4.0 compatibility problems.
| **2023-10-23** | The Pre-Release version of the extension will give errors, not warnings, on pre-4.0 code.
| **2023-10-30** | The Release version of the extension will give errors, not warnings, on pre-4.0 code.

## 4.0 Differences

### Incompatible Changes

These changes will require users to edit existing code. The IDE will issue warnings to flag code which
needs to change, once the rollout begins. For examples showing both the old and new syntaxes, refer to
the [4.0 Warnings FAQ](../../documentation/language/m4warnings.malloynb) document.

* [New sources are only created with `extend {}`](../../documentation/language/source.malloynb#source-extensions)
* [Existing queries are only refined with `+ {}`](../../documentation/language/query.malloynb#refinement) 
* [`view:` inside a source replaces `query:` inside of a source](../../documentation/language/source.malloynb#connecting-views) 
* [Extensions of a source inside of a query operation must be contained in an `extend: { }`.](../../documentation/language/query.malloynb#source-extensions)
  * The `declare:` statement has been removed, use `dimension:` or `measure:`
  * `join_:` statements in a query must be in the `extend: {}` block
* `run:` replaces `query:` with no name
* [The `sql:` statement is replaced by SQL sources](../../documentation/language/sql_sources.malloynb)
* [The source `table('connectionName:tablePath')` is now `connectionName.table('tablePath')`](../../documentation/language/source.malloynb#sources-from-tables-or-views) 
* [The `project:` statement is now called `select:`](../../documentation/language/query.malloynb#projection)
* `from()` to create a source from a query is no longer needed
* [When nesting Malloy code inside a multi-line literal, the syntax 
  is  `%{ malloyCode }` and not `%{ malloyCode }%`](../../documentation/language/sql_sources.malloynb#embedding-malloy-queries-in-an-sql-block-a-k-a-turducken-) 
* [Explicit `source.`` required to clarify aggregate locality for sum() and avg()`](../../documentation/language/aggregates.malloynb#required-explicit-aggregate-locality)
* The filter shortcut `{? }` has been removed
* The expression to run an existing query is now `queryName` instead of `-> queryName`
* The `->` after the `is` in a [`view:`](../../documentation/language/source.malloynb#connecting-views) or [`nest:`](../../documentation/language/nesting.malloynb) statement is not longer needed.
* [ `COUNT(DISTINCT `_expression_`)` is now just `count(`_expression_`)`](../../documentation/language/aggregates.malloynb#count-expr-)
* [`COUNT(*)` is now just `count()`](../../documentation/language/aggregates.malloynb#count) 
* [Malloy has a function library](../../documentation/language/functions.malloynb) for doing common data manipulation operations
  * Access to the database's internal functions directly must be through the [raw sql function syntax](../../documentation/language/functions.malloynb#raw-sql-functions)


### New features

These features are all active now.  Most are not "new" in that they have already appeared in the
Release version of the extension, even though they were part of the 4.0 project.  Code which uses
these will continue to work. They are listed here to provide a complete list of "What Is Malloy
4.0"

* [There are three kinds of string literals, `'`, `"`, and `"""`.](../../documentation/language/datatypes.malloynb#string)
  These can be used interchangeably anywhere a literal is legal.
calculations
* [Casting to a specific database type is now legal using a quoted type name](../../documentation/language/expressions.malloynb#casting-to-specific-database-types)
* [Safe cast operator `:::`](../../documentation/language/expressions.malloynb#safe-type-cast) 
* [Annotations and Tags](../../documentation/language/tags.malloynb)
* [`??` (the nullish coalescing operation)](../../documentation/language/expressions.malloynb#null-operations)
* [Selective `import` of objects from other files](../../documentation/language/imports.malloynb#selective-imports)
* [`calculate:` added to provide additional aggregation control](../../documentation/language/calculations.malloynb) (often done with window functions in SQL)