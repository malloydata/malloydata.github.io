window.SEARCH_SEGMENTS = [
  {
    "titles": [
      "Exploring Data With Only a Webserver"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy Composer lets you build a web based data exploration experience by adding just 3 files to your data model."
      },
      {
        "type": "p",
        "text": "<em>November 24, 2022 by lloyd tabb</em>\n<br/><br/><br/>"
      }
    ],
    "path": "/blog/2022-11-24-webserver-data/index.malloynb"
  },
  {
    "titles": [
      "Exploring Data With Only a Webserver",
      "<a href=\"https://lloydtabb.github.io/babynames/#/default\">Try it First.</a>"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Believe it or not, the page <a href=\"https://lloydtabb.github.io/babynames/#/default?page=about\">below runs</a> entirely in your web browser. The SQL database engine (DuckDB) is running in your browser. The Malloy compiler is running in your browser too. The <a href=\"https://github.com/lloydtabb/babynames\">whole</a> application is built with <a href=\"https://github.com/lloydtabb/babynames/blob/main/names.malloy\">200 lines of Malloy code</a>, a <a href=\"https://github.com/lloydtabb/babynames/blob/main/composer.json\">config file</a>, a <a href=\"https://raw.githubusercontent.com/lloydtabb/babynames/main/names.md\">markdown document</a> and a <a href=\"https://github.com/lloydtabb/babynames/blob/main/index.html\">single html file</a>. Just look at the <a href=\"https://github.com/lloydtabb/babynames\">repository on Github</a>."
      },
      {
        "type": "p",
        "text": "<a href=\"https://lloydtabb.github.io/babynames/#/default\">Try it!</a>"
      }
    ],
    "path": "/blog/2022-11-24-webserver-data/index.malloynb"
  },
  {
    "titles": [
      "Want to do this with your own data set?"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "It’s easy, just follow the three steps below."
      }
    ],
    "path": "/blog/2022-11-24-webserver-data/index.malloynb"
  },
  {
    "titles": [
      "Want to do this with your own data set?",
      "Step 1: Build a Malloy Data Model"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Install VSCode and add the <a href=\"https://marketplace.visualstudio.com/items?itemName=malloydata.malloy-vscode\">Malloy Extension</a>. Build and test your data model."
      }
    ],
    "path": "/blog/2022-11-24-webserver-data/index.malloynb"
  },
  {
    "titles": [
      "Want to do this with your own data set?",
      "Step 2: Add the index.html, composer.json and names.md"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The file <code>index.html</code> shouldn’t need any modification. Edit the <code>composer.json</code> to point at your malloy file and the tables that it uses. Rename and edit the names file to have queries that are interesting to you."
      }
    ],
    "path": "/blog/2022-11-24-webserver-data/index.malloynb"
  },
  {
    "titles": [
      "Want to do this with your own data set?",
      "Step 3: Serve from any webserver"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "We use <a href=\"https://pages.github.com/\">Github Pages</a> to serve the above example. Check in all your source code, turn on Github Pages and your whole repository is available from the web. Point a browser at the root and composer should be running."
      }
    ],
    "path": "/blog/2022-11-24-webserver-data/index.malloynb"
  },
  {
    "titles": [
      "Composing with Queries"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy's semantic modeling and querying enables an exciting new way to explore data."
      },
      {
        "type": "p",
        "text": "<em>November 25, 2022 by lloyd tabb and Michael Toy</em>\n<br/><br/><br/>"
      },
      {
        "type": "p",
        "text": "Experienced data explorers know how to move through complex datasets. They operate vehicles which are well designed to move efficiently through data landscapes. <a href=\"http://www.malloydata.dev/\">Malloy</a> allows people who know how to drive, to suddenly find themselves flying."
      },
      {
        "type": "p",
        "text": "While data is recorded or streamed in a two dimensional universe of columns and rows, it is comprehended in a hyper-dimensional network of contexts and vistas which <a href=\"http://www.malloydata.dev/\">Malloy</a> is designed to discover and explore."
      },
      {
        "type": "p",
        "text": "As someone who already understands how to gain insight from data, you need to map your knowledge about navigating through data to the vocabulary of <a href=\"http://www.malloydata.dev/\">Malloy</a>. Like a plane moving down a runway before it takes off, that movement is a precursor to the <a href=\"http://www.malloydata.dev/\">Malloy</a> moment when you escape the limitations of two dimensions and begin seeing data in an entirely new way."
      },
      {
        "type": "p",
        "text": "Welcome to flight school, let’s get familiar with the controls. Please click the \"Try it\" links as we go along."
      }
    ],
    "path": "/blog/2022-11-25-composing-queries/index.malloynb"
  },
  {
    "titles": [
      "Composing with Queries",
      "Motion begins with a query"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Data tools build queries. You start with a table, pick a column to group the data, then compute a measure/metric about that grouping of the data, possibly sorting the result or limiting the number of rows returned."
      },
      {
        "type": "p",
        "text": "A query is a useful entity. Adding or changing a filter on a query lets you move through data in different directions. The results of a query can be visualized to better understand what you are seeing at any point."
      },
      {
        "type": "p",
        "text": "A collection of these query results on a surface makes a dashboard, and by connecting all the queries on a dashboard to a common filter you can move move through data and see how the landscape changes as you steer."
      }
    ],
    "path": "/blog/2022-11-25-composing-queries/index.malloynb"
  },
  {
    "titles": [
      "Composing with Queries",
      "Semantic Data Models"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "A <em>Semantic Data Model</em> makes this process easier. With a semantic data model, you define data relationships (like joins of tables), dimensions and measures. In your data tool, these elements become available without having to redefine them. For example, if you create a measure for <em>revenue</em>. You can use revenue as a measure in any query you build."
      },
      {
        "type": "p",
        "text": "Malloy extends the semantic model by adding a modeled query as an entity in the model, opening up new dimensions where knowledge is gained and shared."
      }
    ],
    "path": "/blog/2022-11-25-composing-queries/index.malloynb"
  },
  {
    "titles": [
      "Composing with Queries",
      "Get in the cockpit, exploring the IMDb"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "We are going to use the IMDb (Internet Movie Database) as an example. The entities are <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">movies</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">principals</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">people</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">crew</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">ratings</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">genres</span></span></code>. Malloy lets us create a semantic data model in just a few lines of code. The important thing here is the dimensions and measures we declare will be the building blocks for our queries. The dimensions we most care about are <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">title</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">character</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">person</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">job</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">votes</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">genre</span></span></code>. The things we want to measure are <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">title_count</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">person_count</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">total_votes</span></span></code>."
      },
      {
        "type": "p",
        "text": "It turns out <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">total_votes</span></span></code> is our best proxy for an interesting movie. It shows the public’s interest in a particular film but not necessarily the quality."
      },
      {
        "type": "p",
        "text": "You can run any of the examples below by using our WASM based data explorer just click \"<a href=\"https://lloydtabb.github.io/imdb_fiddle/composer.html#/default?page=query&source=movies&model=movies-simple&query=query%3A+new_query+is+movies+-%3E+%7B%0A++group_by%3A+genre%0A++aggregate%3A+title_count%0A++nest%3A+%0A++++top_titles%0A++++by_year%0A++++top_people%0A%7D&styles=%7B%22by_year%22%3A%7B%22renderer%22%3A%22line_chart%22%7D%7D&run=true\">Try It!</a>\""
      }
    ],
    "path": "/blog/2022-11-25-composing-queries/index.malloynb"
  },
  {
    "titles": [
      "Composing with Queries",
      "The Semantic Model"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The extract below shows our definitions for the measure and dimensions we are going to use in this example. The complete, <a href=\"https://github.com/lloydtabb/imdb_fiddle/blob/release/imdb-simple.malloy\">75 line model can be found on github</a>."
      }
    ],
    "path": "/blog/2022-11-25-composing-queries/index.malloynb"
  },
  {
    "titles": [
      "Composing with Queries",
      "Building Queries"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Building queries in Malloy Composer will feel familiar. The components are all there: dimensions, measures, filters and sorts. Queries can be built into the semantic model or built as you explore. You can also load a pre-built query from the model, the example below shows how to do both."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">query</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">top_people</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">person</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">person_id</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">total_votes</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">title_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">10</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "<a href=\"https://lloydtabb.github.io/imdb_fiddle/composer.html#/default?page=query&source=movies&model=movies-simple&query=query%3A+new_query+is+movies+-%3E+%7B%0A++group_by%3A+%0A++++person%0A++++person_id%0A++aggregate%3A+%0A++++total_votes%0A++++title_count%0A%7D&run=true\">Try it!</a>"
      }
    ],
    "path": "/blog/2022-11-25-composing-queries/index.malloynb"
  },
  {
    "titles": [
      "Composing with Queries",
      "Filtering Data"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy Composer can index all the dimensional values in the data set so you don’t have to think about how to create filters. Who played <a href=\"https://lloydtabb.github.io/imdb_fiddle/composer.html#/default?page=query&source=movies&model=movies-simple&query=query%3A+top_people+is+movies+-%3E+%7B%0A++where%3A+character+%3D+%27Batman%27%0A++group_by%3A+%0A++++person%0A++++person_id%0A++aggregate%3A+%0A++++total_votes%0A++++title_count%0A++limit%3A+10%0A%7D&run=true\">Batman</a>, <a href=\"https://lloydtabb.github.io/imdb_fiddle/composer.html#/default?page=query&source=movies&model=movies-simple&query=query%3A+top_people+is+movies+-%3E+%7B%0A++where%3A+character+%3D+%27Dracula%27%0A++group_by%3A+%0A++++person%0A++++person_id%0A++aggregate%3A+%0A++++total_votes%0A++++title_count%0A++limit%3A+10%0A%7D&run=true\">Dracula</a>, or <a href=\"https://lloydtabb.github.io/imdb_fiddle/composer.html#/default?page=query&source=movies&model=movies-simple&query=query%3A+top_people+is+movies+-%3E+%7B%0A++where%3A+character+%3D+%27Lois+Lane%27%0A++group_by%3A+%0A++++person%0A++++person_id%0A++aggregate%3A+%0A++++total_votes%0A++++title_count%0A++limit%3A+10%0A%7D&run=true\">Lois Lane</a>? Who are the <a href=\"https://lloydtabb.github.io/imdb_fiddle/composer.html#/default?page=query&source=movies&model=movies-simple&query=query%3A+top_people+is+movies+-%3E+%7B%0A++where%3A%0A++++job+%3D+%27director%27%2C%0A++++genre+%3D+%27Comedy%27%0A++group_by%3A+%0A++++person%0A++++person_id%0A++aggregate%3A+%0A++++total_votes%0A++++title_count%0A++limit%3A+10%0A%7D&run=true\">top directors in comedy</a>? Who was involved in <a href=\"https://lloydtabb.github.io/imdb_fiddle/composer.html#/default?page=query&source=movies&model=movies-simple&query=query%3A+top_people+is+movies+-%3E+%7B%0A++where%3A%0A++++job+%3D+%27director%27%2C%0A++++genre+%3D+%27Comedy%27%0A++group_by%3A+%0A++++person%0A++++person_id%0A++aggregate%3A+%0A++++total_votes%0A++++title_count%0A++limit%3A+10%0A%7D&run=true\">The Shining</a>? (just click any of those links). To add a filter, just start typing in the search box, and select the dimension with the most interesting value. Adding filters can teach you a bunch about a dataset."
      },
      {
        "type": "p",
        "text": "<a href=\"https://lloydtabb.github.io/imdb_fiddle/composer.html#/default?page=query&source=movies&model=movies-simple&query=query%3A+top_people+is+movies+-%3E+%7B%0A++group_by%3A+%0A++++person%0A++++person_id%0A++aggregate%3A+%0A++++total_votes%0A++++title_count%0A++limit%3A+10%0A%7D&run=true\">Try it!</a>"
      }
    ],
    "path": "/blog/2022-11-25-composing-queries/index.malloynb"
  },
  {
    "titles": [
      "Composing with Queries",
      "Take Off - Composing with Queries"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Here is where things get really interesting. We’ve seen building queries and naming them. Malloy allows you to use queries as building blocks in other queries, not just dimensions and measures. The magic here is nest. A query that is nested essentially uses the row that it is on as filters. Let’s start with our people query and then look at the genre and jobs for each person."
      },
      {
        "type": "p",
        "text": "<a href=\"https://lloydtabb.github.io/imdb_fiddle/composer.html#/default?page=query&source=movies&model=movies-simple&query=query%3A+top_people+is+movies+-%3E+%7B%0A++group_by%3A+%0A++++person%0A++++person_id%0A++aggregate%3A+%0A++++total_votes%0A++++title_count%0A++nest%3A+%0A++++by_job%0A++++by_genre%0A++limit%3A+10%0A%7D&run=true\">Try it!</a>"
      }
    ],
    "path": "/blog/2022-11-25-composing-queries/index.malloynb"
  },
  {
    "titles": [
      "Composing with Queries",
      "Drilling into detail"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Once you see data this way, you will begin to notice interesting things, as you might as you fly over a city, and wonder what that is down below you. It turns out that finding these points of interest, isolating them with filters and then looking at the isolated data by some other query is one of the main tools in working with data."
      },
      {
        "type": "p",
        "text": "Malloy Composer makes this very easy. Next to each row of data is a button with a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">...</span></span></code>. Clicking the button sets are the relevant filters for the row, allowing you to load another query."
      },
      {
        "type": "p",
        "text": "It sounds more complex than it is. In the example below we notice that Leonardo DiCaprio has done 6 Biographies. Clicking the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">...</span></span></code> sets the filters for every dimension on the row. We can then load the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">top_titles</span></span></code> query and hit run."
      },
      {
        "type": "p",
        "text": "<a href=\"https://lloydtabb.github.io/imdb_fiddle/composer.html#/default?page=query&source=movies&model=movies-simple&query=query%3A+top_people+is+movies+-%3E+%7B%0A++group_by%3A+%0A++++person%0A++++person_id%0A++aggregate%3A+%0A++++total_votes%0A++++title_count%0A++nest%3A+%0A++++by_job%0A++++by_genre%0A++limit%3A+10%0A%7D&run=true\">Try it!</a>"
      }
    ],
    "path": "/blog/2022-11-25-composing-queries/index.malloynb"
  },
  {
    "titles": [
      "Composing with Queries",
      "Getting Deep with Nesting"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Nest can be as deep as you would like. Let’s look at the IMdB again, the directors top 3 genres and the top 4 movies in each genre."
      },
      {
        "type": "p",
        "text": "<a href=\"https://lloydtabb.github.io/imdb_fiddle/composer.html#/default?page=query&source=movies&model=movies-simple&query=query%3A+top_people+is+movies+-%3E+%7B%0A++where%3A+job+%3D+%27director%27%0A++group_by%3A+%0A++++person%0A++++person_id%0A++aggregate%3A+%0A++++total_votes%0A++++title_count%0A++nest%3A+by_genre+is+%7B%0A++++group_by%3A+genre%0A++++aggregate%3A+%0A++++++title_count%0A++++++total_votes%0A++++++percent_of_titles%0A++++nest%3A+top_titles+is+%7B%0A++++++group_by%3A+%0A++++++++title%0A++++++++startYear%0A++++++++votes%0A++++++limit%3A+4%0A++++++order_by%3A+3+desc%0A++++%7D%0A++++limit%3A+3%0A++%7D%0A++limit%3A+10%0A%7D&run=true\">Try it!</a>"
      }
    ],
    "path": "/blog/2022-11-25-composing-queries/index.malloynb"
  },
  {
    "titles": [
      "Composing with Queries",
      "Nesting 'flat' is a dashboard"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Nesting a more than one of query in the top query creates a dashboard. Any filter applied to this query will apply to all the queries. This operates like a traditional dashboard. Malloy’s single query approach to dashboarding is actually more efficient. Malloy reads the data from storage only once. We can look at an overall dashboard, movies with a <code>Batman</code> character and movies with <code>Lois Lane</code> character."
      },
      {
        "type": "p",
        "text": "While a Malloy nested query is like a dashboard, giving a view of a slice of information, with control over the slicing, it is also more than that. It leverages the queries you write to create a whole new custom vehicle for exploring the data in any dimension you can imagine."
      },
      {
        "type": "p",
        "text": "<a href=\"https://lloydtabb.github.io/imdb_fiddle/composer.html#/default?page=query&source=movies&model=movies-simple&query=query%3A+new_query+is+movies+-%3E+%7B%0A++nest%3A+%0A++++top_titles%0A++++top_people%0A++++by_job%0A++++by_genre%0A++limit%3A+10%0A%7D&run=true\">Try it!</a>"
      }
    ],
    "path": "/blog/2022-11-25-composing-queries/index.malloynb"
  },
  {
    "titles": [
      "Composing with Queries",
      "Style: Simplified Chart Rendering"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "In Composer, you can set the rendering style for a particular result and it will change how it is displayed. Complex results can be rendered as a <em>table</em> or <em>dashboard</em>, simple query results can be rendered as various chart types."
      },
      {
        "type": "p",
        "text": "<a href=\"https://lloydtabb.github.io/imdb_fiddle/composer.html#/default?page=query&source=movies&model=movies-simple&query=query%3A+new_query+is+movies+-%3E+%7B%0A++group_by%3A+%0A++++person%0A++++person_id%0A++aggregate%3A+%0A++++total_votes%0A++++title_count%0A++nest%3A+%0A++++by_genre+is+%7B%0A++++++group_by%3A+genre%0A++++++aggregate%3A+%0A++++++++title_count%0A++++++++total_votes%0A++++++limit%3A+4%0A++++%7D%0A++++by_year%0A%7D&styles=%7B%22by_job%22%3A%7B%22renderer%22%3A%22bar_chart%22%7D%2C%22top_titles%22%3A%7B%22renderer%22%3A%22list%22%7D%2C%22by_year%22%3A%7B%22renderer%22%3A%22line_chart%22%7D%2C%22by_genre%22%3A%7B%22renderer%22%3A%22bar_chart%22%7D%7D\">Try it!</a>"
      }
    ],
    "path": "/blog/2022-11-25-composing-queries/index.malloynb"
  },
  {
    "titles": [
      "Composing with Queries",
      "Curation: Show what is important"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The data model above is a simplified version. We’ve created a more complete model. Malloy Composer allows you to curate a landing page for a dataset that has the most interesting and useful queries."
      },
      {
        "type": "p",
        "text": "Create a landing page for a dataset things that are interesting or commonly sought after can be found easily."
      },
      {
        "type": "p",
        "text": "<a href=\"https://lloydtabb.github.io/imdb_fiddle/composer.html#/default?page=about&model=movies2&source=movies2\">Try it!</a>"
      }
    ],
    "path": "/blog/2022-11-25-composing-queries/index.malloynb"
  },
  {
    "titles": [
      "Composing with Queries",
      "More datasets, more features!"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "This is just a taste of what Malloy and Malloy Composer can do. Explore more datasets to learn more."
      },
      {
        "type": "p",
        "text": "<a href=\"https://malloydata.github.io/malloy-samples/wasm/\">Try it!</a>"
      }
    ],
    "path": "/blog/2022-11-25-composing-queries/index.malloynb"
  },
  {
    "titles": [
      "Dimensional Flexibility, one of the things that makes Malloy Special"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Grouping by some attribute is the core operation of most data analysis"
      },
      {
        "type": "p",
        "text": "<em>December 1, 2022 by lloyd tabb</em>\n<br/><br/><br/>"
      },
      {
        "type": "p",
        "text": "<em><a href=\"http://www.malloydata.dev/\">Malloy</a> is an new experimental data language. <a href=\"https://github.com/malloydata/malloy-composer/blob/main/README.md\">Malloy's Composer</a>, shown here, offers allows you to easily explore complex data.</em>"
      },
      {
        "type": "p",
        "text": "In data analysis, one operation, dimensionalization, stands above the rest. In SQL, <strong>grouping by</strong> a column and computing <strong>aggregate</strong> statistics (measures/metrics) about the elements that fall into that group is the fundamental motion of nearly all data analysis."
      },
      {
        "type": "p",
        "text": "In SQL, unfortunately, dimensionalization isn't always straight forward. The way that you relate data in a query can affect aggregate calculations and make them incorrect at times. The general solution to this is to make dimensional fragments and link them together, but that adds a lot of complexity."
      },
      {
        "type": "p",
        "text": "<a href=\"http://www.malloydata.dev/\">Malloy</a> is interesting in that aggregates operate independently from relations. Because of this innovation, <a href=\"http://www.malloydata.dev/\">Malloy</a> offers a degree of dimensional flexibility not available anywhere else."
      },
      {
        "type": "p",
        "text": "Let's take a tour."
      }
    ],
    "path": "/blog/2022-12-01-dimensional-flexibility/index.malloynb"
  },
  {
    "titles": [
      "Dimensional Flexibility, one of the things that makes Malloy Special",
      "IMDB, for example"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "In the IMDB for example. There are movies (titles), people, genres and ratings. The relations and some basic calcuations are encoded in this 75 line data model on github."
      },
      {
        "type": "p",
        "text": "These are live examples, click “Try it!” to run any of the queries."
      }
    ],
    "path": "/blog/2022-12-01-dimensional-flexibility/index.malloynb"
  },
  {
    "titles": [
      "Dimensional Flexibility, one of the things that makes Malloy Special",
      "How many movies?"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Lets take a look at movies and filter to just three genres, <em>Drama</em>, <em>Comedy</em> and <em>Action</em>. We will also filter to just movies from 2010 until 2020. The first query we run shows there are 2146 movies with an average rating of 6.986."
      },
      {
        "type": "p",
        "text": "<a href=\"https://lloydtabb.github.io/imdb_fiddle/composer.html#/default?page=query&source=movies&model=movies-simple&query=query%3A+new_query+is+movies+-%3E+%7B%0A++where%3A%0A++++startYear%3A+%3E%3D+2010+%26+%3C+2020%2C%0A++++genre+%3D+%27Drama%27+%7C+%27Comedy%27+%7C+%27Action%27%0A++aggregate%3A+%0A++++title_count%0A++++average_rating%0A%7D&styles=%7B%22percent_of_titles%22%3A%7B%22renderer%22%3A%22percent%22%7D%7D&run=true\">Try It!</a>"
      }
    ],
    "path": "/blog/2022-12-01-dimensional-flexibility/index.malloynb"
  },
  {
    "titles": [
      "Dimensional Flexibility, one of the things that makes Malloy Special",
      "Dimensionalize by genre"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "By dimensionalizing (grouping by) genre, we can see the number of movies that are in a particular genre. But if we add up the numbers 1358 + 783 + 716 we get 2857. Wait, Why? I thought the number of titles was only 2146? Movies can have multiple genres. Movies can appear in multiple groupings."
      },
      {
        "type": "p",
        "text": "<a href=\"https://lloydtabb.github.io/imdb_fiddle/composer.html#/default?page=query&source=movies&model=movies-simple&query=query%3A+new_query+is+movies+-%3E+%7B%0A++where%3A%0A++++startYear%3A+%3E%3D+2010+%26+%3C+2020%2C%0A++++genre+%3D+%27Drama%27+%7C+%27Comedy%27+%7C+%27Action%27%0A++group_by%3A+genre%0A++aggregate%3A+%0A++++title_count%0A++++average_rating%0A++limit%3A+10%0A%7D&styles=%7B%22percent_of_titles%22%3A%7B%22renderer%22%3A%22percent%22%7D%7D&run=true\">Try It!</a>"
      }
    ],
    "path": "/blog/2022-12-01-dimensional-flexibility/index.malloynb"
  },
  {
    "titles": [
      "Dimensional Flexibility, one of the things that makes Malloy Special",
      "Top level query is aggregates plus nesting."
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy can compute mulitple levels of dimensionality simultaneously. One way Malloy does this is through nesting queries. Nested queries are expressed exactly the same as top level queries. In the query below, we pick our top level measures as well as building a nested query that is essentially the same shape as the one above."
      },
      {
        "type": "p",
        "text": "<a href=\"https://lloydtabb.github.io/imdb_fiddle/composer.html#/default?page=query&source=movies&model=movies-simple&query=query%3A+new_query+is+movies+-%3E+%7B%0A++where%3A%0A++++startYear%3A+%3E%3D+2010+%26+%3C+2020%2C%0A++++genre+%3D+%27Drama%27+%7C+%27Comedy%27+%7C+%27Action%27%0A++aggregate%3A+%0A++++title_count%0A++++average_rating%0A++nest%3A+by_genre+is+%7B%0A++++group_by%3A+genre%0A++++aggregate%3A+%0A++++++title_count%0A++++++average_rating%0A++%7D%0A%7D&styles=%7B%22percent_of_titles%22%3A%7B%22renderer%22%3A%22percent%22%7D%7D&run=true\">Try it!</a>"
      },
      {
        "type": "p",
        "text": "While the query above is relatively easy to understand, it is quite difficult to express in SQL. Malloy hides this complexity from us. We can see the SQL for any query by bonking the SQL tab. All Malloy queries execute as a single SQL query so the data is only read once."
      }
    ],
    "path": "/blog/2022-12-01-dimensional-flexibility/index.malloynb"
  },
  {
    "titles": [
      "Dimensional Flexibility, one of the things that makes Malloy Special",
      "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">all</span></span></code> function escapes grouping"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Another way to work with dimensionality in Malloy with <a href=\"https://malloydata.github.io/malloy/documentation/language/ungrouped-aggregates.html\">ungrouped aggregate functions</a>. The <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">all</span><span style=\"color: #000000\">()</span></span></code> function can be used to make calculations independently of dimensional grouping in the current query, but return results in the same table. In the example below, we compute <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">all_titles</span></span></code> as <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">all</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">title_count</span><span style=\"color: #000000\">)</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">all_average_rating</span></span></code> as <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">all</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">average_rating</span><span style=\"color: #000000\">)</span></span></code>. Any measure can be used within the all function. Fine grain control over which columns to escape is also available, see the Malloy documentation on <a href=\"https://malloydata.github.io/malloy/documentation/language/ungrouped-aggregates.html\">Ungrouped Aggregates</a>."
      },
      {
        "type": "p",
        "text": "<a href=\"https://lloydtabb.github.io/imdb_fiddle/composer.html#/default?page=query&source=movies&model=movies-simple&query=query%3A+new_query+is+movies+-%3E+%7B%0A++where%3A%0A++++startYear%3A+%3E%3D+2010+%26+%3C+2020%2C%0A++++genre+%3D+%27Drama%27+%7C+%27Comedy%27+%7C+%27Action%27%0A++group_by%3A+genre%0A++aggregate%3A+%0A++++title_count%0A++++all_titles+is+all%28title_count%29%0A++++average_rating%0A++++all_average_rating+is+all%28average_rating%29%0A++limit%3A+10%0A%7D&styles=%7B%22percent_of_titles%22%3A%7B%22renderer%22%3A%22percent%22%7D%7D&run=true\">Try It!</a>"
      }
    ],
    "path": "/blog/2022-12-01-dimensional-flexibility/index.malloynb"
  },
  {
    "titles": [
      "Dimensional Flexibility, one of the things that makes Malloy Special",
      "Percent of Total"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Percent of total tell us about a groups relationship to it's parent. What percent of movies are Drama?, Comedy?. Using the calculation for <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">percent_of_titles</span></span></code> is <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">title_count</span><span style=\"color: #000000\"> / </span><span style=\"color: #795E26\">all</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">title_count</span><span style=\"color: #000000\">)</span></span></code> can show us. Malloy composer allow us to style this number as a percentage. Notice that the percentages sum to greater then 100%. Movies can have mulitple genres."
      },
      {
        "type": "p",
        "text": "<a href=\"https://lloydtabb.github.io/imdb_fiddle/composer.html#/default?page=query&source=movies&model=movies-simple&query=query%3A+new_query+is+movies+-%3E+%7B%0A++where%3A%0A++++startYear%3A+%3E%3D+2010+%26+%3C+2020%2C%0A++++genre+%3D+%27Drama%27+%7C+%27Comedy%27+%7C+%27Action%27%0A++group_by%3A+genre%0A++aggregate%3A+%0A++++title_count%0A++++percent_of_titles+is+title_count%2Fall%28title_count%29%0A++limit%3A+10%0A%7D&styles=%7B%22percent_of_titles%22%3A%7B%22renderer%22%3A%22percent%22%7D%7D&run=true\">Try It!</a>"
      }
    ],
    "path": "/blog/2022-12-01-dimensional-flexibility/index.malloynb"
  },
  {
    "titles": [
      "Dimensional Flexibility, one of the things that makes Malloy Special",
      "Nesting adds dimensionality (and perspective)"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Grouping by year and nesting our <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">by_genre</span></span></code> query allows us to gain perspective over time. Notice that we are free to include aggregate computations at any level of nesting."
      },
      {
        "type": "p",
        "text": "<a href=\"https://lloydtabb.github.io/imdb_fiddle/composer.html#/default?page=query&source=movies&model=movies-simple&query=query%3A+new_query+is+movies+-%3E+%7B%0A++where%3A%0A++++startYear%3A+%3E%3D+2010+%26+%3C+2020%2C%0A++++genre+%3D+%27Drama%27+%7C+%27Comedy%27+%7C+%27Action%27%0A++group_by%3A+startYear%0A++aggregate%3A+%0A++++title_count%0A++++percent_of_titles+is+title_count%2Fall%28title_count%29%0A++nest%3A+by_genre+is+%7B%0A++++group_by%3A+genre%0A++++aggregate%3A+%0A++++++title_count%0A++++++percent_of_titles+is+title_count%2Fall%28title_count%29%0A++%7D%0A++limit%3A+10%0A++order_by%3A+startYear+desc%0A%7D&styles=%7B%22percent_of_titles%22%3A%7B%22renderer%22%3A%22percent%22%7D%7D&run=true\">Try It!</a>"
      }
    ],
    "path": "/blog/2022-12-01-dimensional-flexibility/index.malloynb"
  },
  {
    "titles": [
      "Dimensional Flexibility, one of the things that makes Malloy Special",
      "Running queries side by side with a shared filter"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "A useful pattern is to nest several queries at the top level. This mimics a traditional dashboard in other tools. The difference here is that the data is all executed in a single query."
      },
      {
        "type": "p",
        "text": "<a href=\"https://lloydtabb.github.io/imdb_fiddle/composer.html#/default?page=query&source=movies&model=movies-simple&query=query%3A+by_genre+is+movies+-%3E+%7B%0A++where%3A%0A++++startYear%3A+%3E%3D+2010+%26+%3C+2020%2C%0A++++genre+%3D+%27Drama%27+%7C+%27Comedy%27+%7C+%27Action%27%0A++nest%3A+%0A++++by_genre+is+%7B%0A++++++group_by%3A+genre%0A++++++aggregate%3A+title_count%0A++++%7D%0A++++by_year+is+%7B%0A++++++group_by%3A+startYear%0A++++++aggregate%3A+title_count%0A++++++order_by%3A+startYear+desc%0A++++%7D%0A%7D&run=true\">Try It!</a>"
      }
    ],
    "path": "/blog/2022-12-01-dimensional-flexibility/index.malloynb"
  },
  {
    "titles": [
      "Dimensional Flexibility, one of the things that makes Malloy Special",
      "Styling Results"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "We can add styles to any of the nested queries to have them rendered as charts."
      },
      {
        "type": "p",
        "text": "<a href=\"https://lloydtabb.github.io/imdb_fiddle/composer.html#/default?page=query&source=movies&model=movies-simple&query=query%3A+by_genre+is+movies+-%3E+%7B%0A++where%3A%0A++++startYear%3A+%3E%3D+2010+%26+%3C+2020%2C%0A++++genre+%3D+%27Drama%27+%7C+%27Comedy%27+%7C+%27Action%27%0A++nest%3A+%0A++++by_genre+is+%7B%0A++++++group_by%3A+genre%0A++++++aggregate%3A+title_count%0A++++%7D%0A++++by_year+is+%7B%0A++++++group_by%3A+startYear%0A++++++aggregate%3A+title_count%0A++++++order_by%3A+startYear+desc%0A++++%7D%0A++limit%3A+10%0A%7D&styles=%7B%22by_year%22%3A%7B%22renderer%22%3A%22line_chart%22%7D%2C%22by_genre%22%3A%7B%22renderer%22%3A%22bar_chart%22%7D%7D&run=true\">Try It!</a>"
      }
    ],
    "path": "/blog/2022-12-01-dimensional-flexibility/index.malloynb"
  },
  {
    "titles": [
      "Dimensional Flexibility, one of the things that makes Malloy Special",
      "Adding more dimensionality"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Let's look at the top people in the industry by grouping by person."
      },
      {
        "type": "p",
        "text": "<a href=\"https://lloydtabb.github.io/imdb_fiddle/composer.html#/default?page=query&source=movies&model=movies-simple&query=query%3A+new_query+is+movies+-%3E+%7B%0A++where%3A%0A++++startYear%3A+%3E%3D+2010+%26+%3C+2020%2C%0A++++genre+%3D+%27Drama%27+%7C+%27Comedy%27+%7C+%27Action%27%0A++group_by%3A+person%0A++aggregate%3A+total_votes%0A++nest%3A+%0A++++by_genre+is+%7B%0A++++++group_by%3A+genre%0A++++++aggregate%3A+title_count%0A++++%7D%0A++++by_year+is+%7B%0A++++++group_by%3A+startYear%0A++++++aggregate%3A+title_count%0A++++++order_by%3A+startYear+desc%0A++++%7D%0A++limit%3A+10%0A%7D&styles=%7B%22by_year%22%3A%7B%22renderer%22%3A%22line_chart%22%7D%2C%22by_genre%22%3A%7B%22renderer%22%3A%22bar_chart%22%7D%7D\">Try It!</a>"
      }
    ],
    "path": "/blog/2022-12-01-dimensional-flexibility/index.malloynb"
  },
  {
    "titles": [
      "Dimensional Flexibility, one of the things that makes Malloy Special",
      "Dimensional Freedom"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy will compute aggregate calculations correctly independently from dimensionalization. This freedom gives you much more flexibility in building tooling to understand your data."
      },
      {
        "type": "p",
        "text": "<a href=\"https://malloydata.github.io/malloy-samples/wasm/\">Try more examples in Malloy Composer</a>"
      },
      {
        "type": "p",
        "text": "<a href=\"https://www.malloydata.dev/\">Learn more about Malloy</a>"
      }
    ],
    "path": "/blog/2022-12-01-dimensional-flexibility/index.malloynb"
  },
  {
    "titles": [
      "Data is Rectangular and other Limiting Misconceptions"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy breaks data's rectangular strangle hold."
      },
      {
        "type": "p",
        "text": "<em>January 18, 2023 by lloyd tabb</em>\n<br/><br/><br/>"
      },
      {
        "type": "p",
        "text": "In software we express our ideas through tools.  In data, those tools think in rectangles.  From spreadsheets to the data warehouses, to do any analytical calculation, you must first go through a rectangle.  Forcing data through a rectangle shapes the way we solve problems (for example, dimensional fact tables, OLAP Cubes)."
      },
      {
        "type": "p",
        "text": "But really, most data isn’t rectangular.  Most data exists in hierarchies (orders, items, products, users).  Most query results are better returned as a hierarchy (category, brand, product).  Can we escape the rectangle?"
      },
      {
        "type": "p",
        "text": "<a href=\"http://www.malloydata.dev/\">Malloy</a> is a new experimental data programming language that, among other things, breaks the rectangle paradigm and several other long held misconceptions in the way we analyze data."
      }
    ],
    "path": "/blog/2023-01-18-data-is-rectangular/index.malloynb"
  },
  {
    "titles": [
      "Data is Rectangular and other Limiting Misconceptions",
      "The Rectangle - Back to Basics"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "This example is going to start off very simple, but as you will see, we will hit complexity as soon as we need to perform two simultaneous calculations. The problem is that to merge these calculations, we are going to need to take two rectangles and join them."
      }
    ],
    "path": "/blog/2023-01-18-data-is-rectangular/index.malloynb"
  },
  {
    "titles": [
      "Data is Rectangular and other Limiting Misconceptions",
      "Orders and Items"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Lets assume two tables: first <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">orders</span></span></code>, which looks like the following:"
      },
      {
        "type": "p",
        "text": "And next, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">items</span></span></code>. Items have an <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">item_id</span></span></code> (a unique reference to an item sold), and an <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">order_id</span></span></code> (the order in the above table they are part of), the name of the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">item</span></span></code> and the price the item sold for."
      },
      {
        "type": "p",
        "text": "For the purposes of illustration we are interested in measuring two things from this data: our <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">total_shipping</span></span></code> costs and our <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">total_revenue</span></span></code> from sales. These calculations are pretty easy."
      },
      {
        "type": "p",
        "text": "To calculate total shipping with SQL we simply:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-sql\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">select</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">(shipping_cost) </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> total_shipping</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">FROM</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;orders.csv&#39;</span></span></pre>"
      },
      {
        "type": "p",
        "text": "To calculate total revenue."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-sql\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">select</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">(price) </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> total_revenue</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;items.csv&#39;</span></span></pre>"
      }
    ],
    "path": "/blog/2023-01-18-data-is-rectangular/index.malloynb"
  },
  {
    "titles": [
      "Data is Rectangular and other Limiting Misconceptions",
      "Dimensionality / Granularity"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "To build understanding in data, we often look at aggregate calculations at some level of dimensionality (or granularity). In this example we might want to look at each of these calculations by date."
      },
      {
        "type": "p",
        "text": "To look at <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">total_shipping</span></span></code> by date we can."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-sql\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">select</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  order_date,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">(shipping_cost) </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> total_shipping</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">FROM</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;orders.csv&#39;</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">GROUP BY</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">ORDER BY</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span></span></pre>"
      },
      {
        "type": "p",
        "text": "To look at <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">total_revenue</span></span></code> by date, we must join in the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">items</span></span></code> table to the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">orders</span></span></code> table, where the knowledge of the order data is stored."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-sql\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">select</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  order_date,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">(price) </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> total_revenue</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;orders.csv&#39;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> orders</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">join</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;items.csv&#39;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> items </span><span style=\"color: #0000FF\">ON</span><span style=\"color: #000000\"> orders.order_id = items.order_id</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">GROUP BY</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">ORDER BY</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span></span></pre>"
      }
    ],
    "path": "/blog/2023-01-18-data-is-rectangular/index.malloynb"
  },
  {
    "titles": [
      "Data is Rectangular and other Limiting Misconceptions",
      "Show me a table that looks like..."
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Here comes the tricky part. I'd like a table that looks like the one below. It is useful for all kinds of reasons. How does revenue relate to shipping?"
      },
      {
        "type": "p",
        "text": "You might think you can simply add the shipping calculation to the query above to produce the desired result. Look what happens, the total_shipping calculations are wrong."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-sql\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">select</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  orders.order_date,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">(items.price) </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> total_revenue,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">(orders.shipping_cost) </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> total_shipping</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;orders.csv&#39;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> orders</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">join</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;items.csv&#39;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> items </span><span style=\"color: #0000FF\">ON</span><span style=\"color: #000000\"> orders.order_id = items.order_id</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">GROUP BY</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">ORDER BY</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span></span></pre>"
      }
    ],
    "path": "/blog/2023-01-18-data-is-rectangular/index.malloynb"
  },
  {
    "titles": [
      "What went wrong?"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The problem is that the join interfered with the aggregate calculation. When we joined <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">items</span></span></code> to <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">orders</span></span></code>, new rows were produced and the shipping cost calculation overstates the shipping. In SQL you quickly learn that you can only perform an aggregate calculation in the correct rectangle. Joining <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">items</span></span></code> to <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">orders</span></span></code> turns the base calculation of the rectangle into an <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">items</span></span></code> rectangle. <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">orders</span></span></code> appear more than once in the resulting joined rectangle. The one-to-many join caused a fan-out, duplicating rows from the orders table."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-sql\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">select</span><span style=\"color: #000000\"> *</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;orders.csv&#39;</span><span style=\"color: #000000\"> orders</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">left join</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;items.csv&#39;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> items </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">on</span><span style=\"color: #000000\"> orders.order_id = items.order_id</span></span></pre>"
      }
    ],
    "path": "/blog/2023-01-18-data-is-rectangular/index.malloynb"
  },
  {
    "titles": [
      "Solved, join result rectangles"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "In order to solve this, traditionally, you produce multiple rectangles of the same granularity (in this case, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">date</span></span></code>), and join them. We have our two queries from above — we can run them separately and then join the resulting rectangles."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-sql\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">with</span><span style=\"color: #000000\"> orders_date </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> (</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">select</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    order_date,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">(shipping_cost) </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> total_shipping</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;orders.csv&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">group by</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span></span>\n<span class=\"line\"><span style=\"color: #000000\">),</span></span>\n<span class=\"line\"><span style=\"color: #000000\">items_date </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> (</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">select</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    order_date,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">(price) </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> total_revenue</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;orders.csv&#39;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> orders</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">join</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;items.csv&#39;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> items </span><span style=\"color: #0000FF\">ON</span><span style=\"color: #000000\"> orders.order_id = items.order_id</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">group by</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span></span>\n<span class=\"line\"><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">SELECT</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  orders_date.order_date,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  total_revenue,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  total_shipping</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">FROM</span><span style=\"color: #000000\"> orders_date</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">JOIN</span><span style=\"color: #000000\"> items_date </span><span style=\"color: #0000FF\">ON</span><span style=\"color: #000000\"> orders_date.order_date = items_date.order_date</span></span></pre>"
      }
    ],
    "path": "/blog/2023-01-18-data-is-rectangular/index.malloynb"
  },
  {
    "titles": [
      "Solved, join result rectangles",
      "What just happened?"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "In traditional data warehousing, the unit of re-usability is a rectangle — some level of dimensionality and aggregate calculations. We produce tables with lots of different levels of granularity and join them. In the computation of each rectangle, we make a pass over the entire data to produce a rectangle. Rectangles are the basis of OLAP Cubes, and the basis of nearly all the ideas in <a href=\"https://www.wiley.com/en-us/Building+the+Data+Warehouse%2C+4th+Edition-p-9780764599446\">traditional data warehousing</a>."
      }
    ],
    "path": "/blog/2023-01-18-data-is-rectangular/index.malloynb"
  },
  {
    "titles": [
      "Solved, join result rectangles",
      "Adding stuff adds complexity"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "This gets harder if we want to filter on a date range. The date filter will have to be applied to both queries. Filtering on orders containing a particular item will have to be applied to both underlying queries (though modern databases might optimize for this)."
      },
      {
        "type": "p",
        "text": "If we want to change the dimension (to say user), we have to duplicate this entire chain of rectangles."
      }
    ],
    "path": "/blog/2023-01-18-data-is-rectangular/index.malloynb"
  },
  {
    "titles": [
      "Solved, join result rectangles",
      "Enter Malloy"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "<a href=\"http://www.malloydata.dev/\">Malloy</a> makes the promise that <a href=\"https://malloydata.github.io/documentation/language/aggregates.html#aggregate-locality\">join relations won't effect aggregate calculations</a>."
      },
      {
        "type": "p",
        "text": "In Malloy, data is first described in a network. The network of joined rectangles is a <a href=\"https://malloydata.github.io/documentation/language/source.html\">reusable object called a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span></span></code></a>. Then in a query operation, aggregate calculations are applied. The aggregate calculations can reference any ‘locality’ in the join network and will compute results correctly."
      },
      {
        "type": "p",
        "text": "Hopefully, the query below will be somewhat self explanatory."
      },
      {
        "type": "p",
        "text": "The query starts by building a source from <code>orders.csv</code> and adding a join to <code>items.csv</code>. The items table will have multiple <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">item</span></span></code>s per <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">order</span></span></code> so <a href=\"https://malloydata.github.io/documentation/language/join.html\">we use Malloy's <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">join_many</span></span></code></a>. The “fanout” relationship in a join is the one piece of data that Malloy needs to perform aggregate computation correctly in any joined table."
      },
      {
        "type": "p",
        "text": "The <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">-&gt;</span></span></code> operator says “apply this query operation to the source”."
      },
      {
        "type": "p",
        "text": "The query operation groups by <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">order_date</span></span></code>"
      },
      {
        "type": "p",
        "text": "Perform aggregate calculations for <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">total_revenue</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">shipping_cost</span></span></code>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">query</span><span style=\"color: #000000\">: </span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;duckdb:orders.csv&#39;</span><span style=\"color: #000000\">) + {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">join_many</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">items</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;duckdb:items.csv&#39;</span><span style=\"color: #000000\">) </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">on</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">order_id</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">items</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">order_id</span></span>\n<span class=\"line\"><span style=\"color: #000000\">} </span></span>\n<span class=\"line\"><span style=\"color: #000000\">-&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">order_date</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">total_revenue</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">items</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">price</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">total_shipping</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">shipping_cost</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">1</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Notice that total_revenue is calculated as <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">items</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">price</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">()</span></span></code>. There are still two source rectangles, orders (the main variables) and items (the nested data). <a href=\"https://malloydata.github.io/documentation/language/aggregates.html#aggregate-locality\">Using a path</a> tells Malloy to calculate the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">sum</span></span></code> in the items sub-table."
      },
      {
        "type": "p",
        "text": "The SQL code Malloy writes for this query is non-trivial but actually much more efficient than the multi rectangle queries in that the data is read only once. See Apendix: <a href=\"#safe-aggregation\">SQL Safe Aggregation</a>."
      }
    ],
    "path": "/blog/2023-01-18-data-is-rectangular/index.malloynb"
  },
  {
    "titles": [
      "Dimensional Freedom"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Once the network has been defined, you are free to produce results from anywhere in the join network. We can change our query to <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">user_id</span></span></code> instead of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">order_date</span></span></code>, for example and get an entirely different result. In SQL we would have had to rewrite underlying queries or persist intermediate results."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">query</span><span style=\"color: #000000\">: </span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;duckdb:orders.csv&#39;</span><span style=\"color: #000000\">) + {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">join_many</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">items</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;duckdb:items.csv&#39;</span><span style=\"color: #000000\">) </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">on</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">order_id</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">items</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">order_id</span></span>\n<span class=\"line\"><span style=\"color: #000000\">} </span></span>\n<span class=\"line\"><span style=\"color: #000000\">-&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">user_id</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">total_revenue</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">items</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">price</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">total_shipping</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">shipping_cost</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">1</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/blog/2023-01-18-data-is-rectangular/index.malloynb"
  },
  {
    "titles": [
      "Source: the basis re-usability in a semantic data model"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The <a href=\"https://malloydata.github.io/documentation/language/source.html\">join network and calculations</a> can be defined once and used in multiple queries. Reusability is a large topic and we’ll save it for another blog post, but here is basically how it works."
      },
      {
        "type": "p",
        "text": "Define a source that contains the join network and common calculations."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">orders_items</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;duckdb:orders.csv&#39;</span><span style=\"color: #000000\">) + {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">join_many</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">items</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;duckdb:items.csv&#39;</span><span style=\"color: #000000\">) </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">on</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">order_id</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">items</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">order_id</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">declare</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">total_revenue</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">items</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">price</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">total_shipping</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">shipping_cost</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">} </span></span></pre>"
      },
      {
        "type": "p",
        "text": "Use that source in other queries. The <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">order_date</span></span></code> query"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">query</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">orders_items</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">order_date</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">total_revenue</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">total_shipping</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">1</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "and the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">user_id</span></span></code> query"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">query</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">orders_items</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">user_id</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">total_revenue</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">total_shipping</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">1</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/blog/2023-01-18-data-is-rectangular/index.malloynb"
  },
  {
    "titles": [
      "Source: the basis re-usability in a semantic data model",
      "Non-rectangular Tables"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "When you think about it, the whole idea that orders and items are two tables isn’t right. If you were building an in-memory data structure, you would have an order node that pointed to an items array. There exists no <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">item</span></span></code> without an <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">order</span></span></code>."
      },
      {
        "type": "p",
        "text": "In an object store, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">item</span></span></code>s would just repeated records within <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">order</span></span></code>s."
      },
      {
        "type": "p",
        "text": "The data exists in two tables, because our tool (SQL) thinks in rectangles so we have to map this into two tables with a foreign key relationship."
      },
      {
        "type": "p",
        "text": "A simple illustration of how the data might be nested is to see it in JSON. See <a href=\"#example-data-in-json\">data in JSON</a> in the Appendix."
      }
    ],
    "path": "/blog/2023-01-18-data-is-rectangular/index.malloynb"
  },
  {
    "titles": [
      "Source: the basis re-usability in a semantic data model",
      "Nested Repeated"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Most modern SQL databases support the notion of nested repeated data within a single table. DuckDB, for example can read and write parquet files which support the notion of nested-repeated data. Notice that items has a sub-schema and is represented as an array of <code>STRUCT</code>s?"
      }
    ],
    "path": "/blog/2023-01-18-data-is-rectangular/index.malloynb"
  },
  {
    "titles": [
      "Source: the basis re-usability in a semantic data model",
      "Nested data in SQL is very efficient but difficult to use"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Nested data in a database can be treated like a table in a <code>SELECT</code> clause. An <code>UNNEST</code> with a lateral join in a query to iterate over items like the one below. Each of the different databases have (very) different syntax for <code>UNNEST</code>ing data. BigQuery is probably simplest and shown below."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-sql\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">SELECT</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  orders.order_date </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">SUM</span><span style=\"color: #000000\">(items.price) </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&quot;total_revenue&quot;</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">FROM</span><span style=\"color: #000000\"> orders_items </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> orders</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">LEFT JOIN</span><span style=\"color: #000000\"> UNNEST(items) </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> items</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">GROUP BY</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">ORDER BY</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> </span></span></pre>"
      },
      {
        "type": "p",
        "text": "Unnesting embedded data is still a join and doesn't solve the rectangle aggregate problem in SQL."
      }
    ],
    "path": "/blog/2023-01-18-data-is-rectangular/index.malloynb"
  },
  {
    "titles": [
      "Source: the basis re-usability in a semantic data model",
      "Malloy understands nested tables"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "When Malloy reads a schema for a table, it automatically recognizes any nested data and treats it like a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">join_many</span></span></code>. You can simply reference the data as if it were pre-joined using the name of the nested structure (in this case, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">items</span></span></code>). Using the parquet file above, we can re-write our original query. Malloy makes working with nested data much more simple and powerful."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">query</span><span style=\"color: #000000\">: </span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;duckdb:orders_items.parquet&#39;</span><span style=\"color: #000000\">) -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">order_date</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">total_revenue</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">items</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">price</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">total_shipping</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">shipping_cost</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">1</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/blog/2023-01-18-data-is-rectangular/index.malloynb"
  },
  {
    "titles": [
      "Source: the basis re-usability in a semantic data model",
      "Nested Data In Results"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy also <a href=\"https://malloydata.github.io/documentation/language/nesting.html\">writes nested data</a>. Data is not rectangular. Malloy can easily write hierarchical data as output. Hierarchies can be any depth. Malloy’s language is uniform, so any query operation can be placed in a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">:</span></span></code> block. Nested blocks can be as deep as you like. This is a big topic for another day."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">query</span><span style=\"color: #000000\">: </span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;duckdb:orders_items.parquet&#39;</span><span style=\"color: #000000\">) -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">order_date</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">total_revenue</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">items</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">price</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">total_shipping</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">shipping_cost</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_items</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">items</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">item</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">total_revenue</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">items</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">price</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">1</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "From a SQL perspective, there is a lot going on here. We’re unnesting the parquet file, making sure we compute aggregates correctly. We’re also running several queries simultaneously inline to produce the nested result. The SQL for this is non-trivial but very efficient. It still only makes one read pass through the data. See <a href=\"#sql-query-for-nested-nested\">SQL Nested/Nested</a> below."
      }
    ],
    "path": "/blog/2023-01-18-data-is-rectangular/index.malloynb"
  },
  {
    "titles": [
      "Source: the basis re-usability in a semantic data model",
      "Malloy lets you escape the Rectangular nature of most data tools"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The freedom to think about the data in the network in which it already exists without having to constantly translate through rectangles offers new ways to look at problems. The rectangle of a unit of re-usability causes a proliferation of tables and complexity. Malloy’s solution to this problem offers aggregate calculation unbound by dimensions. With Malloy, your data world becomes more simple and comprehensible. We think this is quite a big deal."
      }
    ],
    "path": "/blog/2023-01-18-data-is-rectangular/index.malloynb"
  },
  {
    "titles": [
      "Appendix"
    ],
    "paragraphs": [],
    "path": "/blog/2023-01-18-data-is-rectangular/index.malloynb"
  },
  {
    "titles": [
      "Appendix",
      "Safe Aggregation"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy Query. Malloy computes aggregates safely regardless of join patterns."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">query</span><span style=\"color: #000000\">: </span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;duckdb:orders.csv&#39;</span><span style=\"color: #000000\">) + {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">join_many</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">items</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;duckdb:items.csv&#39;</span><span style=\"color: #000000\">) </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">on</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">order_id</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">items</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">order_id</span></span>\n<span class=\"line\"><span style=\"color: #000000\">} </span></span>\n<span class=\"line\"><span style=\"color: #000000\">-&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">order_date</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">total_revenue</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">items</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">price</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">total_shipping</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">shipping_cost</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">1</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "SQL Query"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-sql\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">SELECT</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">   base.</span><span style=\"color: #A31515\">&quot;order_date&quot;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&quot;order_date&quot;</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">   </span><span style=\"color: #795E26\">COALESCE</span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\">SUM</span><span style=\"color: #000000\">(items_0.</span><span style=\"color: #A31515\">&quot;price&quot;</span><span style=\"color: #000000\">),</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&quot;total_revenue&quot;</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">   </span><span style=\"color: #795E26\">COALESCE</span><span style=\"color: #000000\">((</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">SELECT</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">(a.val) </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">value</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">FROM</span><span style=\"color: #000000\"> (</span></span>\n<span class=\"line\"><span style=\"color: #000000\">          </span><span style=\"color: #0000FF\">SELECT</span><span style=\"color: #000000\"> UNNEST(list(</span><span style=\"color: #0000FF\">distinct</span><span style=\"color: #000000\"> {</span><span style=\"color: #0000FF\">key</span><span style=\"color: #000000\">:base.</span><span style=\"color: #A31515\">&quot;__distinct_key&quot;</span><span style=\"color: #000000\">, val: base.</span><span style=\"color: #A31515\">&quot;shipping_cost&quot;</span><span style=\"color: #000000\">})) a</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        )</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      ),</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&quot;total_shipping&quot;</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">FROM</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">SELECT</span><span style=\"color: #000000\"> GEN_RANDOM_UUID() </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> __distinct_key, * </span><span style=\"color: #0000FF\">FROM</span><span style=\"color: #000000\"> orders.csv </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> x) </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> base</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">LEFT JOIN</span><span style=\"color: #000000\"> items.csv </span><span style=\"color: #0000FF\">AS</span><span style=\"color: #000000\"> items_0</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">ON</span><span style=\"color: #000000\"> base.</span><span style=\"color: #A31515\">&quot;order_id&quot;</span><span style=\"color: #000000\">=items_0.</span><span style=\"color: #A31515\">&quot;order_id&quot;</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">GROUP BY</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">ORDER BY</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">ASC</span><span style=\"color: #000000\"> NULLS </span><span style=\"color: #0000FF\">LAST</span></span></pre>"
      }
    ],
    "path": "/blog/2023-01-18-data-is-rectangular/index.malloynb"
  },
  {
    "titles": [
      "Appendix",
      "Example data in JSON"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Data as two tables represented as nested in JSON"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">orders</span></span></code>"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">items</span></span></code>"
      },
      {
        "type": "p",
        "text": "Data as JSON"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-json\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">[</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">&quot;order_id&quot;</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">&quot;order_date&quot;</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">&quot;2022-01-01&quot;</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">&quot;shipping_cost&quot;</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">&quot;user_id&quot;</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">&quot;items&quot;</span><span style=\"color: #000000\">: [</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">&quot;item_id&quot;</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">&quot;item&quot;</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">&quot;Chocolate&quot;</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">&quot;price&quot;</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">2</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      },</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">&quot;item_id&quot;</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">&quot;item&quot;</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">&quot;Twizzler&quot;</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">&quot;price&quot;</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">1</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    ]</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  },</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">&quot;order_id&quot;</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">&quot;order_date&quot;</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">&quot;2022-01-01&quot;</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">&quot;shipping_cost&quot;</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">&quot;user_id&quot;</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">&quot;items&quot;</span><span style=\"color: #000000\">: [</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">&quot;item_id&quot;</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">&quot;item&quot;</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">&quot;Chocolate&quot;</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">&quot;price&quot;</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">2</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      },</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">&quot;item_id&quot;</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">4</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">&quot;item&quot;</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">&quot;M and M&quot;</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">&quot;price&quot;</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">1</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    ]</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  },</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">&quot;order_id&quot;</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">&quot;order_date&quot;</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">&quot;2022-01-02&quot;</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">&quot;shipping_cost&quot;</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">&quot;user_id&quot;</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">&quot;items&quot;</span><span style=\"color: #000000\">: [</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">&quot;item_id&quot;</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">&quot;item&quot;</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">&quot;Twizzler&quot;</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">&quot;price&quot;</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">1</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    ]</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  },</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">&quot;order_id&quot;</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">4</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">&quot;order_date&quot;</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">&quot;2022-01-02&quot;</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">&quot;shipping_cost&quot;</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">&quot;user_id&quot;</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">&quot;items&quot;</span><span style=\"color: #000000\">: [</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">&quot;item_id&quot;</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">6</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">&quot;item&quot;</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">&quot;Fudge&quot;</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">&quot;price&quot;</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">3</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      },</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">&quot;item_id&quot;</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">7</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">&quot;item&quot;</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">&quot;Skittles&quot;</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">&quot;price&quot;</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">1</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    ]</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">]</span></span></pre>"
      }
    ],
    "path": "/blog/2023-01-18-data-is-rectangular/index.malloynb"
  },
  {
    "titles": [
      "Appendix",
      "SQL Query for Nested/Nested"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy Query"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">query</span><span style=\"color: #000000\">: </span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;duckdb:orders_items.parquet&#39;</span><span style=\"color: #000000\">) -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">order_date</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">total_revenue</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">items</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">price</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">total_shipping</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">shipping_cost</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_items</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">items</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">item</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">total_revenue</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">items</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">price</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">1</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "SQL Query"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-sql\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">WITH</span><span style=\"color: #000000\"> __stage0 </span><span style=\"color: #0000FF\">AS</span><span style=\"color: #000000\"> (</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">SELECT</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    group_set,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">CASE</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">WHEN</span><span style=\"color: #000000\"> group_set </span><span style=\"color: #0000FF\">IN</span><span style=\"color: #000000\"> (</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">,</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">THEN</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      base.</span><span style=\"color: #A31515\">&quot;order_date&quot;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #0000FF\">END</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&quot;order_date__0&quot;</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">CASE</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">WHEN</span><span style=\"color: #000000\"> group_set=</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">THEN</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #795E26\">COALESCE</span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\">SUM</span><span style=\"color: #000000\">(base.items[items_0.__row_id].</span><span style=\"color: #A31515\">&quot;price&quot;</span><span style=\"color: #000000\">),</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #0000FF\">END</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&quot;total_revenue__0&quot;</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">CASE</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">WHEN</span><span style=\"color: #000000\"> group_set=</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">THEN</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #795E26\">COALESCE</span><span style=\"color: #000000\">((</span></span>\n<span class=\"line\"><span style=\"color: #000000\">          </span><span style=\"color: #0000FF\">SELECT</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">(a.val) </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">value</span></span>\n<span class=\"line\"><span style=\"color: #000000\">          </span><span style=\"color: #0000FF\">FROM</span><span style=\"color: #000000\"> (</span></span>\n<span class=\"line\"><span style=\"color: #000000\">            </span><span style=\"color: #0000FF\">SELECT</span><span style=\"color: #000000\"> UNNEST(list(</span><span style=\"color: #0000FF\">distinct</span><span style=\"color: #000000\"> {</span><span style=\"color: #0000FF\">key</span><span style=\"color: #000000\">:base.</span><span style=\"color: #A31515\">&quot;__distinct_key&quot;</span><span style=\"color: #000000\">, val: base.</span><span style=\"color: #A31515\">&quot;shipping_cost&quot;</span><span style=\"color: #000000\">})) a</span></span>\n<span class=\"line\"><span style=\"color: #000000\">          )</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        ),</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #0000FF\">END</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&quot;total_shipping__0&quot;</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">CASE</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">WHEN</span><span style=\"color: #000000\"> group_set=</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">THEN</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      base.items[items_0.__row_id].</span><span style=\"color: #A31515\">&quot;item&quot;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #0000FF\">END</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&quot;item__1&quot;</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">CASE</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">WHEN</span><span style=\"color: #000000\"> group_set=</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">THEN</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #795E26\">COALESCE</span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\">SUM</span><span style=\"color: #000000\">(base.items[items_0.__row_id].</span><span style=\"color: #A31515\">&quot;price&quot;</span><span style=\"color: #000000\">),</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #0000FF\">END</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&quot;total_revenue__1&quot;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">FROM</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">SELECT</span><span style=\"color: #000000\"> GEN_RANDOM_UUID() </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> __distinct_key, * </span><span style=\"color: #0000FF\">FROM</span><span style=\"color: #000000\"> orders_items.parquet </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> x) </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> base</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">LEFT JOIN</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">select</span><span style=\"color: #000000\"> UNNEST(generate_series(</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">          </span><span style=\"color: #098658\">100000</span><span style=\"color: #000000\">, </span><span style=\"color: #008000\">--</span></span>\n<span class=\"line\"><span style=\"color: #000000\">          </span><span style=\"color: #008000\">-- (SELECT genres_length FROM movies limit 1),</span></span>\n<span class=\"line\"><span style=\"color: #000000\">          </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">)) </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> __row_id) </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> items_0 </span><span style=\"color: #0000FF\">ON</span><span style=\"color: #000000\">  items_0.__row_id &lt;= array_length(base.</span><span style=\"color: #A31515\">&quot;items&quot;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">CROSS</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">JOIN</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">SELECT</span><span style=\"color: #000000\"> UNNEST(GENERATE_SERIES(</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">,</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">,</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">)) </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> group_set  ) </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> group_set</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">GROUP BY</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">,</span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">,</span><span style=\"color: #098658\">5</span></span>\n<span class=\"line\"><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">SELECT</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #A31515\">&quot;order_date__0&quot;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&quot;order_date&quot;</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">MAX</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">CASE</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">WHEN</span><span style=\"color: #000000\"> group_set=</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">THEN</span><span style=\"color: #000000\"> total_revenue__0 </span><span style=\"color: #0000FF\">END</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&quot;total_revenue&quot;</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">MAX</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">CASE</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">WHEN</span><span style=\"color: #000000\"> group_set=</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">THEN</span><span style=\"color: #000000\"> total_shipping__0 </span><span style=\"color: #0000FF\">END</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&quot;total_shipping&quot;</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">COALESCE</span><span style=\"color: #000000\">(LIST({</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">&quot;item&quot;</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">&quot;item__1&quot;</span><span style=\"color: #000000\">, </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">&quot;total_revenue&quot;</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">&quot;total_revenue__1&quot;</span><span style=\"color: #000000\">}  </span><span style=\"color: #0000FF\">ORDER BY</span><span style=\"color: #000000\">  </span><span style=\"color: #A31515\">&quot;total_revenue__1&quot;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">desc</span><span style=\"color: #000000\"> NULLS </span><span style=\"color: #0000FF\">LAST</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">FILTER</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">WHERE</span><span style=\"color: #000000\"> group_set=</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">),[]) </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&quot;by_items&quot;</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">FROM</span><span style=\"color: #000000\"> __stage0</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">GROUP BY</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">ORDER BY</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">ASC</span><span style=\"color: #000000\"> NULLS </span><span style=\"color: #0000FF\">LAST</span></span></pre>"
      }
    ],
    "path": "/blog/2023-01-18-data-is-rectangular/index.malloynb"
  },
  {
    "titles": [
      "\"Malloy is Incomplete\" and the Turducken"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "<em>January 23, 2023 by lloyd tabb and Michael Toy</em>"
      },
      {
        "type": "p",
        "text": "<br/><br/><br/>"
      },
      {
        "type": "p",
        "text": "Designing a new language is hard. There are two competing forces:"
      },
      {
        "type": "p",
        "text": "Make the language complete enough so that is useful."
      },
      {
        "type": "p",
        "text": "You have to live with language mistakes forever, so don't make any."
      },
      {
        "type": "p",
        "text": "<a href=\"http://www.malloydata.dev/\">Malloy</a> aspires to be able to do everything that SQL does. SQL does a lot. We want to design <a href=\"http://www.malloydata.dev/\">Malloy</a> slowly and carefully to avoid language regrets (yes, I'm looking at you Postgres and Perl). A language regret is a feature added to the language that was conceptually flawed and then corrected (Postgres's <code>UNNEST</code> for example). The 'flawed' feature lives in the language forever, forever confusing users."
      },
      {
        "type": "p",
        "text": "We really don't want many regrets, so we are cheating, we invented the Turducken."
      }
    ],
    "path": "/blog/2023-01-23-malloy-is-incomplete--turducken/index.malloynb"
  },
  {
    "titles": [
      "\"Malloy is Incomplete\" and the Turducken",
      "The Turducken"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "What the heck is a Turducken? I like to <a href=\"https://en.wikipedia.org/wiki/Turducken\">think of a Turducken as recursive meat</a>. A Turducken is a chicken stuffed in a duck, stuffed in a turkey."
      },
      {
        "type": "p",
        "text": "The Malloy feature, <em><a href=\"https://malloydata.github.io/documentation/language/sql_blocks.html\">Turducken</a></em>, allows you to base a Malloy data <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">:</span></span></code> on <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">sql</span><span style=\"color: #000000\">:</span></span></code> query which can contain Malloy <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">query</span><span style=\"color: #000000\">:</span></span></code>s."
      },
      {
        "type": "p",
        "text": "Wait, what? Why?"
      },
      {
        "type": "p",
        "text": "If you need a feature that SQL supports that Malloy doesn't yet, you can use Malloy in SQL. But you can also use SQL in Malloy to get at the unsupported feature. This sounds more complex than it is."
      }
    ],
    "path": "/blog/2023-01-23-malloy-is-incomplete--turducken/index.malloynb"
  },
  {
    "titles": [
      "\"Malloy is Incomplete\" and the Turducken",
      "An Example"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "<a href=\"https://twitter.com/carlineng\">Carlin Eng</a> has been working on converting the TPCDS benchmarks to Malloy. In order to do this he needs to <code>UNION</code> the results of a queries he as written in Malloy, but Malloy does not yet support the union operation."
      },
      {
        "type": "p",
        "text": "Carlin writes a SQL query that unions Malloy queries from <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">web_sales</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">catalog_sales</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">store_sales</span></span></code>. Carl then builds a Malloy data source that is based on this query."
      },
      {
        "type": "p",
        "text": "Carlin's SQL Query (see the <a href=\"https://github.com/carlineng/malloy-tpcds/blob/acdbef3dc5da6c4e438bc83f26e736a2ac468768/malloy_queries/tpcds.malloy#L282-L291\">complete code</a>)"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">sql</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">all_sales_sql</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">&quot;&quot;&quot;</span></span>\n<span class=\"line\"><span style=\"color: #A31515\">    SELECT * FROM (%{ web_sales -&gt; projection }%)</span></span>\n<span class=\"line\"><span style=\"color: #A31515\">    UNION ALL</span></span>\n<span class=\"line\"><span style=\"color: #A31515\">    SELECT * FROM (%{ catalog_sales -&gt; projection }%)</span></span>\n<span class=\"line\"><span style=\"color: #A31515\">    UNION ALL</span></span>\n<span class=\"line\"><span style=\"color: #A31515\">    SELECT * FROM (%{ store_sales -&gt; projection }%)</span></span>\n<span class=\"line\"><span style=\"color: #A31515\">  &quot;&quot;&quot;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">connection</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">&quot;duckdb&quot;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Carlin creates a Malloy source based on his SQL query."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">all_sales</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">from_sql</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">all_sales_sql</span><span style=\"color: #000000\">) {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">date_dim</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">with</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">sold_date_sk</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">customer_demographics</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">with</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">cdemo_sk</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">customer</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">with</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">customer_sk</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">item</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">with</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">item_sk</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">promotion</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">with</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">promo_sk</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">customer_address</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">with</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">addr_sk</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  ...</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Malloy will eventually support <code>UNION</code>. The Turduckeon allows us to be in conversation with users who need <code>UNION</code>, to learn to think about the data as they do, so the Malloy expression of <code>UNION</code> can be both powerful and clear."
      },
      {
        "type": "p",
        "text": "As we move closer to Malloy 1.0 there are features that have not yet arrived, like with <code>UNION</code>. We are trying to get there as fast as possible, but not too fast. Thanks for your patience in our completion of the Malloy Language. In the meantime enjoy your Turducken."
      }
    ],
    "path": "/blog/2023-01-23-malloy-is-incomplete--turducken/index.malloynb"
  },
  {
    "titles": [
      "Malloy Data Notebooks: A picture is now worth 10,000 words"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Notebooks feel great when working with data"
      },
      {
        "type": "p",
        "text": "<em>March 10, 2023 by lloyd tabb</em>\n<br/><br/><br/>"
      },
      {
        "type": "p",
        "text": "We always knew that putting <a href=\"http://www.malloydata.dev/\">Malloy</a> into a data notebook would be pretty great, but I don’t think we quite realized how great it would be. Notebooks in Malloy showcase the re-usability of a semantic data model and the simplicity of writing complex queries."
      }
    ],
    "path": "/blog/2023-03-10-malloy-data-notebooks/index.malloynb"
  },
  {
    "titles": [
      "Malloy Data Notebooks: A picture is now worth 10,000 words",
      "Setting up Malloy - in browser."
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "One of the great things about Malloy is that it runs in all the places that VSCode runs. One of those places is Github (github.dev), an entirely browser based experience. Malloy has DuckDB built right in so all you really need is a browser."
      },
      {
        "type": "p",
        "text": "To set up Malloy on github.dev, <a href=\"https://github.dev/lloydtabb/install-malloy/blob/main/README.md\">Go to the setup repository</a> and say yes when it asks if you want to install. You can close this window once Malloy has been installed. You don’t have to do this again."
      }
    ],
    "path": "/blog/2023-03-10-malloy-data-notebooks/index.malloynb"
  },
  {
    "titles": [
      "Some Notebooks."
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "We’ve put together a few notebooks. Pretty amazingly, the Malloy code and data are all stored in repositories on Github. Try these notebooks we’ve built and then try it with your own data."
      },
      {
        "type": "p",
        "text": "Open a notebook and then bonk <strong>Run All</strong> at the top of the page."
      },
      {
        "type": "p",
        "text": "<a href=\"https://github.dev/lloydtabb/auto_recalls/blob/main/auto_recalls\">Auto Recalls</a> - Recall data from Data.gov."
      },
      {
        "type": "p",
        "text": "<a href=\"https://github.dev/lloydtabb/name_fiddle/blob/main/names\">Baby Names</a> - What are the 100 most common baby names, and by decade."
      },
      {
        "type": "p",
        "text": "<a href=\"https://github.dev/malloydata/patterns/blob/main/flight_routes\">Plane Tracker</a> - Map/Reduce example. Take flight records and map to individual airplane/days along with maps of where the plane flew."
      },
      {
        "type": "p",
        "text": "<a href=\"https://github.dev/malloydata/patterns/blob/main/quickstart\">Malloy Quickstart</a> - we’ve converted the Malloy Quickstart documentation into a Notebook. Run all the examples. Try modifying them."
      }
    ],
    "path": "/blog/2023-03-10-malloy-data-notebooks/index.malloynb"
  },
  {
    "titles": [
      "Some Notebooks.",
      "How it works"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "In a Malloy Notebook a cell is either Markdown or Malloy Code. The Malloy code is spread throughout the notebook. Each cell includes the code from the previous cells so you can define object in one cell and use it in the next. For example, the first cell below describes a data model with some measures and dimensions. The next cell uses these definitions."
      }
    ],
    "path": "/blog/2023-03-10-malloy-data-notebooks/index.malloynb"
  },
  {
    "titles": [
      "Some Notebooks.",
      "Use the Schema"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Whenever you are editing a Malloy Code Cell in a notebook, all the definitions available to you are located in the schema panel to the left. This makes programming easier."
      }
    ],
    "path": "/blog/2023-03-10-malloy-data-notebooks/index.malloynb"
  },
  {
    "titles": [
      "Some Notebooks.",
      "Code in Style"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Styles can be applied to rendered cells by placing a comment on the last line."
      }
    ],
    "path": "/blog/2023-03-10-malloy-data-notebooks/index.malloynb"
  },
  {
    "titles": [
      "Some Notebooks.",
      "Make your own Notebook"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Making your own notebook in Github is really easy."
      },
      {
        "type": "p",
        "text": "Make a new repository in github."
      },
      {
        "type": "p",
        "text": "Upload a some data (csv, parquet or json) and bonk the <strong>Commit changes</strong> button."
      },
      {
        "type": "p",
        "text": "Press the Period Key on your keyboard (magic will happen). You should now be in VSCode!"
      },
      {
        "type": "p",
        "text": "Make sure you have the Malloy extension installed (If you ran any of the above examples, you should have it installed already)."
      },
      {
        "type": "p",
        "text": "From the menu File/New File. Give it a name with an extension of <code>.malloynb</code>"
      },
      {
        "type": "p",
        "text": "Build your Notebook"
      },
      {
        "type": "p",
        "text": "Run it."
      },
      {
        "type": "p",
        "text": "Commit your changes"
      },
      {
        "type": "p",
        "text": "<a href=\"https://github.dev/lloydtabb/auto_recalls/blob/main/auto_recalls\">And there it is. Try it.</a>"
      }
    ],
    "path": "/blog/2023-03-10-malloy-data-notebooks/index.malloynb"
  },
  {
    "titles": [
      "Some Notebooks.",
      "More"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Notebooks can work on your local machine and can work with BigQuery and Postgres. We’re just getting started here, so we’d love your feedback. If you make some public notebooks, please share them with us."
      }
    ],
    "path": "/blog/2023-03-10-malloy-data-notebooks/index.malloynb"
  },
  {
    "titles": [
      "Malloy's Near Term Roadmap"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "We've been kinda busy..."
      },
      {
        "type": "p",
        "text": "<em>June 15, 2023 by Lloyd Tabb and Carlin Eng</em>\n<br/><br/><br/>"
      },
      {
        "type": "p",
        "text": "There are a bunch of new features in <a href=\"http://www.malloydata.dev/\">Malloy</a> that will be landing in the coming weeks. Some of these features have already partially landed. We're pre-announcing so if some of these features are interesting to you, we can get early feedback. Expect detailed blog posts about each of these in the coming weeks. <a href=\"/slack\">Please join our slack and ask any question.</a>"
      }
    ],
    "path": "/blog/2023-06-15-malloy-roadmap/index.malloynb"
  },
  {
    "titles": [
      "Malloy's Near Term Roadmap",
      "MalloySQL - Transform data with Malloy"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "<a href=\"http://www.malloydata.dev/\">Malloy</a> aims to be syntactically the same no matter what database contains the data. Unfortunately, in different databases, the SQL DDL commands (<code>CREATE VIEW</code> for example) are all necessarily so different. Making something consistent for SQL DDL would also mean reducing power. We've are introduced a new file type <code>malloysql</code> that can contain both Malloy and SQL. MalloySQL allows you to import models and execute SQL commands. In SQL in place of <code>SELECT ... FROM</code>, you can use Malloy queries. We are pretty excited about this."
      },
      {
        "type": "p",
        "text": "As a simple example, let's take a look at the <a href=\"https://github.com/malloydata/malloy-samples/blob/main/duckdb/names/names.malloy\">“Names” data model</a>, built from a dataset published by the Social Security Administration, containing counts of baby names in each state by gender. In the Names source, we model a few metrics of interest, such as total births, and births per 100k:"
      },
      {
        "type": "p",
        "text": "Now, in a <code>malloysql</code> file, I can create views or materialize tables in the database containing different slices of the data, cut by different dimensions:"
      },
      {
        "type": "p",
        "text": "This creates two new views in my database, with different rollups of the metric of interest. The ability to persist artifacts from Malloy queries back into the database will unlock a new set of use cases, and we're excited to see what people build."
      }
    ],
    "path": "/blog/2023-06-15-malloy-roadmap/index.malloynb"
  },
  {
    "titles": [
      "Malloy's Near Term Roadmap",
      "Calculate: Window Functions"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "We are finally ready to talk about Window Functions + Malloy. Window functions in SQL are pretty hard to learn. We've simplified these calculations while retaining most of the power. Malloy introduces a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">:</span></span></code> phase that operates against the produced columns in a query. Malloy has built in functions for ranking, rolling averages and all the other usual window functions. Importantly, this <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">:</span></span></code> step can operate even when a query is nested."
      },
      {
        "type": "p",
        "text": "Using the same Names model from above, we can now use a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">lag</span></span></code> window function to look at the top names in the dataset, and their year-over-year change in popularity:"
      },
      {
        "type": "p",
        "text": "which gives the following results:"
      }
    ],
    "path": "/blog/2023-06-15-malloy-roadmap/index.malloynb"
  },
  {
    "titles": [
      "Malloy's Near Term Roadmap",
      "Malloy's standard data function library"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Many different SQL dialects implement functions differently. This often creates confusion. The built in Malloy functions operate the same regardless of the SQL engine you are running against. Malloy also has the ability to call any native function (or UDF) on any supported SQL engine so no power is lost in this effort.  If the function you need is not supported directly by Malloy, simply append <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">!</span></span></code> to the function name, and Malloy treat the function name and its arguments as a direct pass-through to the underlying database."
      },
      {
        "type": "p",
        "text": "The full list of functions (including all scalar, aggregate, and analytic functions) will be available on our documentation page once the change arrives."
      }
    ],
    "path": "/blog/2023-06-15-malloy-roadmap/index.malloynb"
  },
  {
    "titles": [
      "Malloy's Near Term Roadmap",
      "Annotations - adding semantics to your result set"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Queries against datasets serve all kinds of systems. Queries can be used in Business Intelligence, Machine learning (and other AI functions), data transformation and more. Often additional information is needed along with the result set to clue in the layer above what to do with the data. Other systems co-mingle this data for a specific purpose. Malloy has a generalized solution to this problem so the same data model/ query can serve multiple uses. Think of it as CSS (Cascading Style Sheets) for data."
      },
      {
        "type": "p",
        "text": "For example:"
      },
      {
        "type": "p",
        "text": "Business intelligence: a query result might be rendered as a bar chart or a calculation might be rendered as us currency. Queries can be annotated as to how they should be visually represented. Individual columns can be styled."
      },
      {
        "type": "p",
        "text": "Transformation: the results of the query should be written back to the database using certain columns as partitioning. An annotation on a query can indicate which output column to use as a partition when creating a table."
      },
      {
        "type": "p",
        "text": "AI/Machine learning: Columns can be labeled for different uses in machine learning. Labels and synonyms can be written as annotations."
      },
      {
        "type": "p",
        "text": "For example, in the names query above, we calculate the year-over-year change in names over time. We can annotate the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">yoy_change</span></span></code> field with styling information. This metadata is returned alongside the results, and can serve as a clue to the rendering engine to display the data with the given style."
      },
      {
        "type": "p",
        "text": "We are still arguing over the syntax, so no example just yet. We will show you soon."
      }
    ],
    "path": "/blog/2023-06-15-malloy-roadmap/index.malloynb"
  },
  {
    "titles": [
      "Malloy's Near Term Roadmap",
      "Python: The imperative language of data."
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Using Malloy with Python is now pretty easy. The <a href=\"https://pypi.org/project/malloy/\">malloy-py</a> library allows you to interact with a Malloy runtime that can be used to either execute queries against your database, or serve as a query compiler. We're also working on tighter integration with the notebook ecosystem, and will soon have Jupyter magics available so you can write Malloy queries directly from a notebook. For example, the following query would issue a query to the database, retrieve the result, and return a Pandas dataframe."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">%%</span><span style=\"color: #001080\">malloy</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">query</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">names</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">name</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">population</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Once the results are in the dataframe, they can be used as part of any typical machine learning workflow. It's often remarked that ML Engineering is 90% Data Engineering, and yet, the tools that ML Engineers use live in a parallel universe to much of the technology in the data warehousing and business intelligence space. This integration is a critical piece of the puzzle, marrying the safety and reusability of a semantic layer's metric definitions with the capabilities of Python for data science tasks like training ML models or time series forecasting."
      }
    ],
    "path": "/blog/2023-06-15-malloy-roadmap/index.malloynb"
  },
  {
    "titles": [
      "Using Google's Project IDX with Malloy"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "<em>August 15, 2023 by lloyd tabb</em>\n</br></br></br>"
      },
      {
        "type": "p",
        "text": "Google recently announced <a href=\"https://developers.googleblog.com/2023/08/introducing-project-idx-experiment-to-improve-full-stack-multiplatform-app-development.html\">Poject IDX</a> and a Cloud-based, AI-powered coding development enviornment.  It turns out that this environment makes a pretty fabulous development environment for working with <a href=\"https://www.malloydata.dev\">Malloy</a>."
      },
      {
        "type": "p",
        "text": "A Project IDX development environment consists configurable clouds instance, VSCode and AI to help you.  We've configured some of our Malloy repositories so that when you open them in Project IDX, everything is setup to run, all you need to do is log into gcloud at the command line."
      }
    ],
    "path": "/blog/2023-08-15-idx-malloy/index.malloynb"
  },
  {
    "titles": [
      "Using Google's Project IDX with Malloy",
      "Setting it up"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The first thing is to join the waitlist for <a href=\"https://idx.dev\">Project IDX</a>.  Once you've done this, <a href=\"/slack\">ping the Malloy team in the Slack channel</a> and we'll use our insider influence to help expedite the process."
      }
    ],
    "path": "/blog/2023-08-15-idx-malloy/index.malloynb"
  },
  {
    "titles": [
      "Using Google's Project IDX with Malloy",
      "Import a Repo"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Project IDX gives you several choices in starting machine instances.  Choose \"Import a Repo\" and click 'enable Nix for this workspace'.  <a href=\"https://nixos.org\">Nix</a> is a way of configuring development environments (more on this later).  You can think of it as a super lightweight Docker."
      },
      {
        "type": "p",
        "text": "Click \"Create\" and IDX will create your development environment.  <strong>Try not to click on things while this is happening</strong>."
      }
    ],
    "path": "/blog/2023-08-15-idx-malloy/index.malloynb"
  },
  {
    "titles": [
      "Using Google's Project IDX with Malloy",
      "Rebuild Environment"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Once VSCode opens up in your browser, you'll see a notification in the lower-right corner that says <strong>Rebuild Enviornment</strong>.  Click it.  This button tells Project IDX to install all the stuff specified in <code>~/.idx/dev.nix</code> (Malloy and other tooling).  If you don't see this button, make any change to the above file and the button will re-appear."
      },
      {
        "type": "p",
        "text": "You should see another set of screens about installing stuff and then ultimately you should be back in VSCode."
      }
    ],
    "path": "/blog/2023-08-15-idx-malloy/index.malloynb"
  },
  {
    "titles": [
      "Using Google's Project IDX with Malloy",
      "Log into gcloud"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The final step in setting up your Project IDX with Malloy is to log into <code>gcloud</code> so you can run queries against BigQuery."
      },
      {
        "type": "p",
        "text": "Open a new terminal window by Clicking the three lines in the upper left corner."
      },
      {
        "type": "p",
        "text": "In terminal log into gcloud by running the commands (using your project)"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-txt\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">gcloud auth login --update-adc</span></span>\n<span class=\"line\"><span style=\"color: #000000\">gcloud config set project {my_project_id}</span></span></pre>"
      }
    ],
    "path": "/blog/2023-08-15-idx-malloy/index.malloynb"
  },
  {
    "titles": [
      "Using Google's Project IDX with Malloy",
      "Test your BigQuery connection"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Open <code>~/bigquery/faa/airports.malloy</code> and click <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">Run</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">Query</span></span></code> on any of the queries."
      },
      {
        "type": "p",
        "text": "Everything should be setup."
      },
      {
        "type": "p",
        "text": "As always, <a href=\"/slack\">please visit our Slack Communitity</a> if you have any problems or feedback."
      }
    ],
    "path": "/blog/2023-08-15-idx-malloy/index.malloynb"
  },
  {
    "titles": [
      "Introducing the Malloy Command Line Interface"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Lightweight, powerful, concise data transformation"
      },
      {
        "type": "p",
        "text": "<em>August 25, 2023 by lloyd tabb and Carlin Eng</em>"
      },
      {
        "type": "p",
        "text": "<br/><br/><br/>"
      },
      {
        "type": "p",
        "text": "Today we’re excited to announce the launch of the <a href=\"https://malloydata.github.io/documentation/malloy_cli/index\">Malloy Command Line Interface</a> (CLI). One of the primary jobs of SQL is transforming datasets. The most basic way to do this is by issuing SQL queries on a command line. The Malloy CLI serves this function, but offers simplicity and reusability in calculations that SQL lacks. With Malloy, metric calculations can be saved as part of a data model and reused in queries that calculate roll-ups at varying levels of granularity or slice across different dimensions. This reduces duplicate code, making data pipelines much easier to read, understand, and maintain."
      },
      {
        "type": "p",
        "text": "Let’s take a look at a simple example. The <a href=\"https://support.google.com/analytics/answer/7029846\">Google Analytics 4 (GA4) schema</a> is notoriously difficult to query. The schema contains 23 columns, 11 of which are “record” types with nested data. Three of those record columns contain further nested types. Some of these nested types contain columns named “key” and “value”, so the schema can’t be inferred without actually querying the data:"
      },
      {
        "type": "p",
        "text": "This data needs to be transformed before it is usable by normal people. The Malloy model we define below does all this toilsome work; for example, transforming the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">timestamp</span></span></code> data from microseconds to an actual timestamp data type, or wrangling session IDs from the unhelpfully named <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">event_params</span></span></code> column:"
      },
      {
        "type": "p",
        "text": "Isn’t the same thing achievable with SQL views? We could certainly write the same transformation logic to unpack <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">event_params</span></span></code> with SQL, but things get more interesting when we start aggregating the data. Suppose we want to compute the conversion rate as the count of users who made a purchase divided by all users. In the model above, the logic for this metric is encapsulated into a named measure called <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">conversion_rate</span></span></code>. The business wants to see conversion rates sliced by different dimensions: date, month, and platform. In SQL, to generate each of these slices, the aggregation logic for <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">conversion_rate</span></span></code> would need to be duplicated for each view:"
      },
      {
        "type": "p",
        "text": "With Malloy, we can simply reference the named measure with each query. There’s a single place to define the measure, and that measure can be used to calculate roll-ups across any arbitrary set of dimensions. We can embed these queries inside of SQL DDL statements in a script:"
      },
      {
        "type": "p",
        "text": "Now we use the Malloy CLI to execute this script and create the views inside of our database:"
      },
      {
        "type": "p",
        "text": "The Malloy code is much more concise, readable, and maintainable. If the definition of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">conversion_rate</span></span></code> changes, it only needs to be updated in a single place: the events model. Contrast this with the SQL equivalent. The code is verbose, and any change to the underlying business logic requires an update to every single <code>CREATE VIEW</code> statement."
      },
      {
        "type": "p",
        "text": "The Malloy CLI is relatively simple in its functionality today, but it still unlocks the power of Malloy for many users. We’ll be looking to build more advanced functionality into this tool to make it even more useful. Getting started is easy – head over to <a href=\"https://github.com/malloydata/malloy-cli/releases\">Github Releases</a> to grab the latest binary for your platform, and check out our <a href=\"https://malloydata.github.io/documentation/malloy_cli/index\">documentation</a> for detailed usage information. If you have any feedback or feature requests, don’t hesitate to join our community <a href=\"/slack\">Slack channel</a> and drop us a note."
      }
    ],
    "path": "/blog/2023-08-25-malloy-cli/index.malloynb"
  },
  {
    "titles": [
      "Announcing Malloy 4.0"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The next major update to the Malloy syntax is here."
      },
      {
        "type": "p",
        "text": "<em>October 3, 2023 by the Malloy Team</em>\n<br/><br/><br/>"
      },
      {
        "type": "p",
        "text": "While there was never an official \"3.0\" version we are calling this release 4.0 because this is the fourth major\nrenovation of the language. It could also be thought of as \"1.0\" because this is when we stop using\nthe word \"experimental\" to describe the language. At this point we have experimented enough.  We believe\nMalloy is now the best language for working with data stored in an SQL server."
      },
      {
        "type": "p",
        "text": "If you haven't tried Malloy yet, you can try it right now with just your browser by"
      },
      {
        "type": "p",
        "text": "log into Github"
      },
      {
        "type": "p",
        "text": "press '.' (the period key) to launch VSCode"
      },
      {
        "type": "p",
        "text": "Install the Malloy Extension"
      },
      {
        "type": "p",
        "text": "going to the <a href=\"https://github.com/malloydata/malloy-samples\">Malloy Examples Repository</a> on Github"
      }
    ],
    "path": "/blog/2023-10-03-malloy-four/index.malloynb"
  },
  {
    "titles": [
      "Announcing Malloy 4.0",
      "The 4.0 Release Timeline"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "While Malloy 4.0 was in development, it was considered acceptable to make breaking\nchanges to the language as we discovered better ways to express data computations.  Beginning with\n4.0, it is our intention to keep code compatibility for existing code, even as we continue to add\ncapabilities to the language."
      },
      {
        "type": "p",
        "text": "The rollout of 4.0 will happen in stages so users will have time to upgrade their code before it stops working."
      }
    ],
    "path": "/blog/2023-10-03-malloy-four/index.malloynb"
  },
  {
    "titles": [
      "Announcing Malloy 4.0",
      "4.0 Differences"
    ],
    "paragraphs": [],
    "path": "/blog/2023-10-03-malloy-four/index.malloynb"
  },
  {
    "titles": [
      "Announcing Malloy 4.0",
      "4.0 Differences",
      "Incompatible Changes"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "With the Malloy 4.0 language changes, we're making Malloy more consistent readable and learnable. Some of\nthese changes will require users to edit existing code. The IDE will issue warnings to flag code which\nneeds to change, once the rollout begins. For examples showing both the old and new syntaxes, refer to\nthe <a href=\"../../documentation/language/m4warnings\">4.0 Messages FAQ</a> document."
      },
      {
        "type": "p",
        "text": "Malloy has a <a href=\"../../documentation/language/functions\">function library</a> for doing common data manipulation operations"
      },
      {
        "type": "p",
        "text": "Access to the database's internal functions directly must be through the <a href=\"../../documentation/language/functions#raw-sql-functions\">raw sql function syntax</a>"
      },
      {
        "type": "p",
        "text": "<a href=\"../../documentation/language/source#source-extensions\">Source extensions</a> now use <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {}</span></span></code>"
      },
      {
        "type": "p",
        "text": "<a href=\"../../documentation/language/views#refining-views\">Query refinement</a> now uses <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">+ {}</span></span></code>"
      },
      {
        "type": "p",
        "text": "<a href=\"../../documentation/language/views#source-extensions\">Source extensions in a query</a> must be contained in an <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\">: { }</span></span></code>"
      },
      {
        "type": "p",
        "text": "The <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">from</span><span style=\"color: #000000\">()</span></span></code> function to create a source from a query is no longer needed"
      },
      {
        "type": "p",
        "text": "The filter shortcut <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">{? }</span></span></code> has been removed"
      },
      {
        "type": "p",
        "text": "The expression to run an existing query is now <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">query_name</span></span></code> instead of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">-&gt; </span><span style=\"color: #001080\">query_name</span></span></code>"
      },
      {
        "type": "p",
        "text": "<a href=\"../../documentation/language/source#adding-fields\">Reusable query operations</a> in a source are now defined with <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">:</span></span></code> instead of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">query</span><span style=\"color: #000000\">:</span></span></code>"
      },
      {
        "type": "p",
        "text": "<a href=\"../../documentation/language/source#sources-from-tables-or-views\">Table sources</a> have new syntax: <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">connection_name</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;table_path&#39;</span><span style=\"color: #000000\">)</span></span></code> instead of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;connection_name:table_path&#39;</span><span style=\"color: #000000\">)</span></span></code>"
      },
      {
        "type": "p",
        "text": "<a href=\"../../documentation/language/views#projection\">Projections</a> are performed with <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">:</span></span></code> instead of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">project</span><span style=\"color: #000000\">:</span></span></code>"
      },
      {
        "type": "p",
        "text": "When <a href=\"../../documentation/language/sql_sources#embedding-malloy-queries-in-an-sql-block-a-k-a-turducken-\">nesting Malloy code inside a SQL string</a>, the syntax\nis <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">%{ </span><span style=\"color: #000000; font-style: italic\">malloy query</span><span style=\"color: #000000\"> }</span></span></code> and not <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">%{ </span><span style=\"color: #000000; font-style: italic\">malloy query</span><span style=\"color: #000000\"> }%</span></span></code>"
      },
      {
        "type": "p",
        "text": "New syntax for <a href=\"../../documentation/language/aggregates#count-expr-\">distinct counts</a>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">(</span><span style=\"color: #000000; font-style: italic\">expression</span><span style=\"color: #000000\">)</span></span></code> instead of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\">distinct</span><span style=\"color: #000000\"> </span><span style=\"color: #000000; font-style: italic\">expression</span><span style=\"color: #000000\">)</span></span></code>"
      },
      {
        "type": "p",
        "text": "The new <a href=\"../../documentation/language/statement#run-statements\">run statement</a>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">:</span></span></code> replaces <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">query</span><span style=\"color: #000000\">:</span></span></code> with no name"
      },
      {
        "type": "p",
        "text": "The syntax for <a href=\"../../documentation/language/aggregates#count\">counts</a> is now just <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span></code>, and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">(*)</span></span></code> is deprecated"
      },
      {
        "type": "p",
        "text": "<a href=\"../../documentation/language/aggregates#required-explicit-aggregate-locality\">Explicit aggregate locality</a> (using <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">.</span></span></code>) is now required in some cases for <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">()</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">()</span></span></code>"
      },
      {
        "type": "p",
        "text": "The <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">sql</span><span style=\"color: #000000\">:</span></span></code> statement is replaced by <a href=\"../../documentation/language/sql_sources\">SQL sources</a>, e.g. <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sql</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&quot;SELECT ...&quot;</span><span style=\"color: #000000\">)</span></span></code>"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">join_</span><span style=\"color: #000000\">:</span></span></code> statements in a query must be in the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\">: {}</span></span></code> block"
      },
      {
        "type": "p",
        "text": "The <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">declare</span><span style=\"color: #000000\">:</span></span></code> statement has been removed, use <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">:</span></span></code> or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">:</span></span></code>"
      },
      {
        "type": "p",
        "text": "The <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">-&gt;</span></span></code> after the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">is</span></span></code> in a <a href=\"../../documentation/language/source#adding-fields\"><code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">:</span></span></code></a> or <a href=\"../../documentation/language/nesting\"><code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">:</span></span></code></a> statement is not longer needed"
      }
    ],
    "path": "/blog/2023-10-03-malloy-four/index.malloynb"
  },
  {
    "titles": [
      "Announcing Malloy 4.0",
      "4.0 Differences",
      "New Features"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "These features are all active now.  Most are not \"new\" in that they have already appeared in the\nRelease version of the Malloy VS Code extension, even though they were part of the 4.0 project.  Code which uses\nthese will continue to work. They are listed here to provide a complete record of \"What Is Malloy\n4.0.\""
      },
      {
        "type": "p",
        "text": "<a href=\"../../documentation/language/expressions#casting-to-specific-database-types\">Casting to a specific database type</a> is now legal using a quoted type name"
      },
      {
        "type": "p",
        "text": "Addition of <a href=\"../../documentation/language/tags\">annotations and tags</a>"
      },
      {
        "type": "p",
        "text": "<a href=\"../../documentation/language/imports#selective-imports\">Selective imports</a> of objects from other files"
      },
      {
        "type": "p",
        "text": "<a href=\"../../documentation/language/calculations_windows\">Analytic/window functions</a> using <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">:</span></span></code>"
      },
      {
        "type": "p",
        "text": "New <a href=\"../../documentation/language/expressions#safe-type-cast\">safe cast operator</a> <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">:::</span></span></code>"
      },
      {
        "type": "p",
        "text": "New <a href=\"../../documentation/language/expressions#null-operations\">null-coalescing operator</a> <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">??</span></span></code>"
      },
      {
        "type": "p",
        "text": "There are three kinds of <a href=\"../../documentation/language/datatypes#string\">string literals</a>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">&#39;</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">&quot;</span></span></code>, and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">&quot;&quot;&quot;</span></span></code>, which can be used interchangeably anywhere a literal is legal"
      }
    ],
    "path": "/blog/2023-10-03-malloy-four/index.malloynb"
  },
  {
    "titles": [
      "Malloy and Jupyter Notebooks"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Advanced data science needs trustworthy metrics"
      },
      {
        "type": "p",
        "text": "<em>October 18, 2023 by Carlin Eng</em>\n<br/><br/><br/>"
      },
      {
        "type": "p",
        "text": "The Malloy team is on a mission to replace SQL for analytics. This is an incredibly ambitious goal, and in order to succeed we need to make Malloy available in all the places where SQL runs. This is why I’m particularly excited about the work we’ve done to make Malloy usable in Python and Jupyter Notebooks. SQL is the lingua franca of data, but it doesn’t have a monopoly. Many data scientists live primarily in Python, and only use SQL as a method to pull datasets from a remote database into their local Python environment. From there, a rich ecosystem of Python libraries enables them to execute complex tasks like forecasting and ML model training."
      },
      {
        "type": "p",
        "text": "Machine learning models are highly sensitive to the quality of input data. As such, it’s a common adage that Machine Learning Engineering is 90% data engineering, 10% model development -- as the saying goes, \"garbage-in, garbage-out\". Ensuring that a model is trained on the correct implementation of a metric can have profound implications for a business. To take an extreme example, in its 2021 earnings report, Unity Technologies claimed that an issue with <a href=\"https://www.fool.com/earnings/call-transcripts/2022/05/11/unity-software-inc-u-q1-2022-earnings-call-transcr/#:~:text=part%20to%20us-,ingesting%20bad%20data,-from%20a%20large\">“ingesting bad data from a large customer\"</a> resulted in a loss of $110 million in 2022. I’d be willing to bet that “bad data ingestion” means “incorrectly written SQL query”. Traditional analytics and business intelligence tools developed the notion of the semantic data model to store shared definitions of metrics and avoid issues like this; however, these technologies have not made inroads amongst the machine learning crowd."
      },
      {
        "type": "p",
        "text": "The recently released <a href=\"https://pypi.org/project/malloy/\">Malloy Python package</a> aims to bridge this gap by allowing users to import and query their Malloy semantic data models directly from Jupyter notebooks."
      }
    ],
    "path": "/blog/2023-10-18-malloy-python-notebooks/index.malloynb"
  },
  {
    "titles": [
      "Malloy and Jupyter Notebooks",
      "Example: Forecasting with Google Analytics 4 Data"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Let’s take a look at a simple, but realistic example: forecasting sales based on data from Google Analytics (GA4). If you want to follow along in a notebook as you read this post, you can visit <a href=\"https://colab.research.google.com/drive/1DfCA0WL0ztuFPiD1fGovbpEVGrXC-eHD#scrollTo=c6NpLkmXFtTT\">this example on Google Colab</a>."
      },
      {
        "type": "p",
        "text": "Google Analytics is one of the most widespread data sources in the world. The out-of-box dashboards provided by GA are fine for basic tasks, but more sophisticated analysis requires exporting the data out of Google Analytics and into BigQuery. Unfortunately, the <a href=\"https://support.google.com/analytics/answer/7029846\">BigQuery export schema</a> is way too complicated for normal people to understand. The schema contains 23 columns, 11 of which are nested “record” types. Three of those “record” types contain further nested records, many of which have column names of “key” and “value”, which means the schema of the data can’t be determined unless we actually peek inside the data."
      },
      {
        "type": "p",
        "text": "The basic question of “how do I find revenue?” has an atrociously complex answer that requires multiple <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">UNNEST</span></span></code> statements, obscure filters, and a verbose <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">COALESCE</span></span></code> operation (see <a href=\"https://developers.google.com/analytics/bigquery/advanced-queries\">this list of queries for examples</a>). Doing simple things requires the user to know a ton of useless trivia like this, and as a data scientist, it's the type of stuff I’d rather not be filling my head with."
      },
      {
        "type": "p",
        "text": "That’s where Malloy comes in. Malloy allows data modelers to define this tedious logic up front, a single time. It is then hidden from downstream users, who can query the data model without having to understand all this complexity, or worry about whether they’re doing it the right way. Also, since Malloy is a full-fledged query language with the complete power of relational algebra, data scientists and analysts have total freedom to explore the dataset even if they need to step outside the bounds of the metrics that are explicitly modeled in the semantic layer. No other semantic modeling language provides this combination of safety and freedom when exploring data. In the GA4 example, we created a simple data model that handles all the tedious data transformations and stores the golden definitions of key metrics like revenue. This model is saved to a git repository, which a data scientist can clone into their Jupyter environment and access via the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">%%</span><span style=\"color: #001080\">malloy_model</span></span></code> IPython magic command:"
      },
      {
        "type": "p",
        "text": "From there, it’s trivial to run a simple query to calculate revenue by day using the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">%%</span><span style=\"color: #001080\">malloy_query</span></span></code> magic command. Every Malloy query compiles to a single SQL query, which is then executed on the data warehouse. The Malloy Python client retrieves the results and stores them in a Pandas dataframe."
      },
      {
        "type": "p",
        "text": "The trustworthy version of the revenue metric has been pulled into our Jupyter notebook, where we have access to all of the standard Python data science libraries like <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">sklearn</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">prophet</span></span></code> which can take our analysis to the next level. In the next cell, we create the most basic version of a revenue forecast using the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">prophet</span></span></code> library, and plot the results:"
      },
      {
        "type": "p",
        "text": "The forecast doesn't look very good. The chart goes down and to the right, and eventually we see forecasted revenue dipping into the negatives. Clearly we have some work to do on the predictions, but we have all the necessary tools at hand."
      }
    ],
    "path": "/blog/2023-10-18-malloy-python-notebooks/index.malloynb"
  },
  {
    "titles": [
      "Malloy and Jupyter Notebooks",
      "Malloy + Python: Better Together"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy's integration with Python and Jupyter Notebooks is a critical step towards simplifying complex and error-prone data workflows. The GA4 example underscores Malloy's potential to declutter and streamline, providing a sturdy foundation for sophisticated analyses. By bridging the metrics gap between business analytics and machine learning, we're confident that Malloy will prove invaluable to the data scientists of the future."
      },
      {
        "type": "p",
        "text": "To learn more, visit our <a href=\"https://malloydata.github.io/documentation/malloy_python/jupyter\">documentation page</a>, try it out for yourself with this <a href=\"https://colab.research.google.com/drive/1eo1fe3878DfUvo1RcyhFUKcFhjdaSlzp#scrollTo=5qHL_ZmU3Rx9\">sample Colab notebook</a>, and join our <a href=\"https://join.slack.com/t/malloy-community/shared_invite/zt-1t32mufpy-THwP1o1ADJVkd3o2L2zaZw\">Slack Community</a> to connect with our passionate user base!"
      }
    ],
    "path": "/blog/2023-10-18-malloy-python-notebooks/index.malloynb"
  },
  {
    "titles": [
      "Drawing Bump Charts in Malloy"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Yes, it can do that"
      },
      {
        "type": "p",
        "text": "<em>October 25, 2023 by Speros Kokenes</em>\n<br/><br/><br/>"
      },
      {
        "type": "p",
        "text": "The Malloy language recently <a href=\"https://malloydata.github.io/blog/2023-10-03-malloy-four/\">hit 4.0 and left experimental status</a>. With the language now stable, we are focusing on the next stage of Malloy which includes further language capabilities, deeper third-party integrations, and a more powerful rendering system. Our rendering roadmap is ambitious and exciting, but today I want to share a little bit about what you can already accomplish with Malloy's renderer."
      },
      {
        "type": "p",
        "text": "In this post, let's explore some capabilities of the renderer by creating a novel visualization known as a <strong>bump chart</strong>."
      }
    ],
    "path": "/blog/2023-10-26-malloy-bump-chart/index.malloynb"
  },
  {
    "titles": [
      "Drawing Bump Charts in Malloy",
      "What's a Bump Chart?"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "A bump chart is a visualization used to show changes in ranking amongst a group of values over time. <a href=\"https://dominikkoch.github.io/Bump-Chart/\">Consider this example from Dominik Koch</a>, where each country in the 2018 Winter Olympics is plotted day by day of the competition, ranked by the number of medals won:"
      },
      {
        "type": "p",
        "text": "The name \"bump chart\" is inspired by a form of rowing race called a <a href=\"https://en.wikipedia.org/wiki/Bumps_race\">bumps race</a>, which commonly employs this type of visualization to show race results. In a bumps race, boats are lined up in a single file and pass each other in ranked position by bumping the boat in front of them. This race can take place over several days, with the starting order of the boats being dictated by their finishing rank from the previous day. Hence the need for a nice visualization to show the ranking results changing from day to day."
      }
    ],
    "path": "/blog/2023-10-26-malloy-bump-chart/index.malloynb"
  },
  {
    "titles": [
      "Drawing Bump Charts in Malloy",
      "Making it in Malloy"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "If you've used the Malloy renderer before, you may be saying \"wait, you can make THAT with Malloy?\". Well, not <em>yet</em>. But today we can make a poor man's version of a bump chart. Using data about the Olympics, we will use Malloy's table, list, and image renderer to produce a chart that shows from Olympic year to Olympic year how the ranking of countries by medals shook out:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">##(docs) hidden</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">regions</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sql</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&quot;select * from read_csv_auto(&#39;noc_regions.csv&#39;, header=true)&quot;</span><span style=\"color: #000000\">);</span></span>\n<span class=\"line\"><span style=\"color: #008000\">-- Model based on table of athlete events data</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">model</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&quot;athlete_events.csv&quot;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #008000\">-- Join the mapping table on NOC columns</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">join_many</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">regions</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">on</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">regions</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">NOC</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">NOC</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #008000\">-- Create a dimension containing image urls for flags</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\"># image</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">{</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">height</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">16px</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">width</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">32px</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">}</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">flag</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;https://raw.githubusercontent.com/cristiroma/countries/master/data/flags/PNG-32/&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">regions</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">CC2</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39;-32.png&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #008000\">-- Simple country name</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">Country</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">regions</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">region</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #008000\">-- Create a measure which counts medals won</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">medal_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">() { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">Medal</span><span style=\"color: #000000\"> != </span><span style=\"color: #A31515\">&#39;NA&#39;</span><span style=\"color: #000000\"> }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">medal_ranking</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flag</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">Country</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">medal_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">rank</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">rank</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">medal_ranking_by_year</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">`Year`</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">medal_ranking</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">Season</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;Summer&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">bump_chart</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">medal_ranking_by_year</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">medal_ranking</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">rank</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\"># pivot</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">rankingNest</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">`Year`</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">`Year`</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\"># list</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">countries</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">medal_ranking</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">flag</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/blog/2023-10-26-malloy-bump-chart/index.malloynb"
  },
  {
    "titles": [
      "Drawing Bump Charts in Malloy",
      "Making it in Malloy",
      "Our data"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "To create the chart above, let's use a dataset of <a href=\"https://www.kaggle.com/datasets/heesoo37/120-years-of-olympic-history-athletes-and-results\">Olympics competition data</a>. This data contains a record for every athlete, event competed in, and outcome of that event (what medal did they win, if any)."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">##(docs) hidden</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&quot;athlete_events.csv&quot;</span><span style=\"color: #000000\">) -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">: *</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Let's start by loading this data into a simple model, with a reusable measure for counting medals."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">model</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&quot;athlete_events.csv&quot;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #008000\">-- Create a measure which counts medals won</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">medal_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">() { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">Medal</span><span style=\"color: #000000\"> != </span><span style=\"color: #A31515\">&#39;NA&#39;</span><span style=\"color: #000000\"> }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Now using Malloy, we can easily rank our countries by medals won across the entire dataset."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">model</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">NOC</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">medal_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">rank</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">rank</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "So far, so good. But we can do much better than this. For one thing, this view isn't reusable. Let's move it up into our model so that we can using this as a building block for further querying. Another problem is the NOC column. NOC stands for \"National Olympic Committees\" and is a special identifier for each competing country. Unfortunately, this code does not line up with ISO standard codes for countries, so we need additional data to map this to any useful country data outside of this Olympics set. In our case, this will be important as we can look up flag images by ISO code, so we can use this mapping table:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">##(docs) hidden</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sql</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&quot;select * from read_csv_auto(&#39;noc_regions.csv&#39;, header=true)&quot;</span><span style=\"color: #000000\">) -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">: *</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">100</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Let's model this data together. We can take our previous model and use a join to link it with our NOC mapping data. Then, we can create a Country dimension and a flag dimension that uses the ISO 2 country code to look up a flag image URL and shows an image. Finally, we can store our ranking query as a view inside the model."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #008000\">-- Mapping table of NOC to ISO 2 country codes</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">regions</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sql</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&quot;select * from read_csv_auto(&#39;noc_regions.csv&#39;, header=true)&quot;</span><span style=\"color: #000000\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #008000\">-- Model based on table of athlete events data</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">model</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&quot;athlete_events.csv&quot;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #008000\">-- Join the mapping table on NOC columns</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">join_many</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">regions</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">on</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">regions</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">NOC</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">NOC</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #008000\">-- Create a dimension containing image urls for flags</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\"># image</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">{</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">height</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">16px</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">width</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">32px</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">}</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">flag</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;https://raw.githubusercontent.com/cristiroma/countries/master/data/flags/PNG-32/&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">regions</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">CC2</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39;-32.png&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #008000\">-- Simple country name</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">Country</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">regions</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">region</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #008000\">-- Create a measure which counts medals won</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">medal_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">() { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">Medal</span><span style=\"color: #000000\"> != </span><span style=\"color: #A31515\">&#39;NA&#39;</span><span style=\"color: #000000\"> }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">medal_ranking</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flag</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">Country</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">medal_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">rank</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">rank</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Now our medal_ranking view has nice country names and flags, AND its reusable."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">model</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">medal_ranking</span></span></pre>"
      }
    ],
    "path": "/blog/2023-10-26-malloy-bump-chart/index.malloynb"
  },
  {
    "titles": [
      "Drawing Bump Charts in Malloy",
      "Calculating the ranks over time"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "To create a data structure that supports our bump chart format, we need to calculate the ranks of each country within each year, then regroup that data by ranking and pivot out the year. It sounds complicated, but thanks to Malloy's conciseness and reusability, we can break this into smaller steps and easily put them all together."
      },
      {
        "type": "p",
        "text": "We already have a view for ranking countries by medals won. We can reuse that view to create a new view that calculates that ranking on a country by country basis, and limits it to only Summer Olympics:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">model</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&quot;athlete_events.csv&quot;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">medal_ranking</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> ...</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">medal_ranking_by_year</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">`Year`</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">medal_ranking</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">Season</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;Summer&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">model</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">medal_ranking_by_year</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Great, we have all of the data that we need for our chart. But it's in the wrong format. Let's fix that by introducing a second stage to the query, where we take the results above and re-aggregate by the nested rank value, with the rest of the data for the ranking nested. Also, within an Olympic year, if two or more countries have the same medal count, they will tie with the same ranking. So we need to nest countries within each year as well in case we have more than 1 value."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">model</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&quot;athlete_events.csv&quot;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">medal_ranking</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> ...</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">medal_ranking_by_year</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> ...</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">bump_chart</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">medal_ranking_by_year</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">medal_ranking</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">rank</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">rankingNest</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">`Year`</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">`Year`</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">countries</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">medal_ranking</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">flag</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">model</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">bump_chart</span></span></pre>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">##(docs) hidden</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">model</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">medal_ranking_by_year</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">medal_ranking</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">rank</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">rankingNest</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">`Year`</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">`Year`</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">countries</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">medal_ranking</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">flag</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Almost there! There are two things off in this data structure. First, we want the Years pivoted. Second, some ranks have ties for certain years, which means more than 1 country is represented in the dataset. It would be best if we could show this as a list within one cell."
      },
      {
        "type": "p",
        "text": "These two issues can be resolved using Malloy's <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">pivot</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">list</span></span></code> tags."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">model</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&quot;athlete_events.csv&quot;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #008000\">-- ...</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">bump_chart</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">medal_ranking_by_year</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">medal_ranking</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">rank</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\"># pivot</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">rankingNest</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">`Year`</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">`Year`</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\"># list</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">countries</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">medal_ranking</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">flag</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">model</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">bump_chart</span></span></pre>"
      },
      {
        "type": "p",
        "text": "And there you have it. A pseudo bump chart with the Malloy renderer."
      },
      {
        "type": "p",
        "text": "Here is what our final model looks like, end to end:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">regions</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sql</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&quot;select * from read_csv_auto(&#39;noc_regions.csv&#39;, header=true)&quot;</span><span style=\"color: #000000\">);</span></span>\n<span class=\"line\"><span style=\"color: #008000\">-- Model based on table of athlete events data</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">model</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&quot;athlete_events.csv&quot;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #008000\">-- Join the mapping table on NOC columns</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">join_many</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">regions</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">on</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">regions</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">NOC</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">NOC</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #008000\">-- Create a dimension containing image urls for flags</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\"># image</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">{</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">height</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">16px</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">width</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">32px</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">}</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">flag</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;https://raw.githubusercontent.com/cristiroma/countries/master/data/flags/PNG-32/&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">regions</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">CC2</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39;-32.png&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #008000\">-- Simple country name</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">Country</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">regions</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">region</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #008000\">-- Create a measure which counts medals won</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">medal_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">() { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">Medal</span><span style=\"color: #000000\"> != </span><span style=\"color: #A31515\">&#39;NA&#39;</span><span style=\"color: #000000\"> }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">medal_ranking</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flag</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">Country</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">medal_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">rank</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">rank</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">medal_ranking_by_year</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">`Year`</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">medal_ranking</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">Season</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;Summer&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">bump_chart</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">medal_ranking_by_year</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">medal_ranking</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">rank</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\"># pivot</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">rankingNest</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">`Year`</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">`Year`</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\"># list</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">countries</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">medal_ranking</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">flag</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/blog/2023-10-26-malloy-bump-chart/index.malloynb"
  },
  {
    "titles": [
      "Data for Kindergarteners"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Given that we learn about data in Kindergarten, It is really surprising how hard it is to query data in the \"big\" world.  In kindergarten data we notice attributes about <em>things</em>, make piles of <em>things</em>, and count <em>things</em> in the piles.  We do this even before we learn any \"real\" math.  Strangely, noticing attributes about <em>things</em> and counting <em>things</em> is almost all there is to working with data."
      }
    ],
    "path": "/blog/2023-11-04-data-for-kindergarten/index.malloynb"
  },
  {
    "titles": [
      "Data for Kindergarteners",
      "Two types of queries, \"Where's Waldo\" and \"Making Piles\""
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "There are really two types of queries in the world, <em>lookup</em> and <em>aggregating</em>."
      },
      {
        "type": "p",
        "text": "<em>Lookup</em> queries are pretty easy.  Google search is a lookup query.  To search, type in some terms then see a list of results. Searching in SQL this often looks like `SELECT * FROM <something> WHERE <FILTER>``."
      },
      {
        "type": "p",
        "text": "The interesting queries, the kindergarten queries, are <em>aggregating</em>.  Aggregating queries tell you something about a set of data.  The an aggregating query has two main parts, the <em>dimensions</em> and <em>measures</em>."
      },
      {
        "type": "p",
        "text": "<em>Dimensions</em> are the attribute you use to decide which pile the <em>thing</em> goes in."
      },
      {
        "type": "p",
        "text": "A <em>measure</em> is something you can say about the pile.  \"How many object?\", \"How much does it weigh?\", \"What is the average size of an object in this pile?\"."
      },
      {
        "type": "p",
        "text": "\"Ok class lets take this pile of coins and separate them.  How many coins are pennies?  How many coins are nickels? Dimes?  Quarters?\""
      },
      {
        "type": "p",
        "text": "<em>Aggregating queries</em> tell us things about a datasets.  <em>Lookup queries</em> find things."
      }
    ],
    "path": "/blog/2023-11-04-data-for-kindergarten/index.malloynb"
  },
  {
    "titles": [
      "Data for Kindergarteners",
      "Data tools are rectangular."
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "In data world, aggregating queries the piles things we make become rows in the output an table.  We pick some attribue from the source table and for every different attribute we recognize, we make a row in the output table.  We add columns to the output by measuring things about the rows underlying object."
      },
      {
        "type": "p",
        "text": "For this example we are going to use a pile of coins.  Each coin has only two attributes.  The value of the coin and the year it was minted.  We've stored the data about these coins in a data table."
      },
      {
        "type": "p",
        "text": "The columns are named <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">face_value</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">year_minted</span></span></code>.  Let's see how we can notice things about these coins."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;coins.csv&#39;</span><span style=\"color: #000000\">) -&gt; {</span><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">:*}</span></span></pre>"
      }
    ],
    "path": "/blog/2023-11-04-data-for-kindergarten/index.malloynb"
  },
  {
    "titles": [
      "Data for Kindergarteners",
      "The first questions is \"How Many coins do we have?\""
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Usually the very first question, \"let's count all the coins\".  In Malloy, the data <em>source</em>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;coins.csv&#39;</span><span style=\"color: #000000\">)</span></span></code>, is where the  comes from.  The <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">-&gt;</span></span></code> operator asks a question from the source and the stuff in the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">{}</span></span></code> is the question.  <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span></code> is used to write an expression that tells us something about the size of the pile."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;coins.csv&#39;</span><span style=\"color: #000000\">) -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">coin_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/blog/2023-11-04-data-for-kindergarten/index.malloynb"
  },
  {
    "titles": [
      "Data for Kindergarteners",
      "Ok Class, how many of each coin do we have?"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Lets notice things about these coins and put them into piles. The most obvious feature is the value of the coin.  Let's make piles by the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">face_value</span></span></code> of the coins.   <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">:</span></span></code> is used to determine which pile a coin goes into.  How many coins in each pile?  We can use the same <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span></code> calculation above."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;coins.csv&#39;</span><span style=\"color: #000000\">) -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">face_value</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">coin_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/blog/2023-11-04-data-for-kindergarten/index.malloynb"
  },
  {
    "titles": [
      "Data for Kindergarteners",
      "Gifted Student"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "A gifted student asks \"How much is each pile worth\".  We can compute as many calculations as we'd like on each of the piles so we add another calculation <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">total_value</span></span></code>.  Notice that we write the calculation a little differently than in other languages.  Malloy writes <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">()</span></span></code> this way to insure that calculations are always correct when things get complex."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;coins.csv&#39;</span><span style=\"color: #000000\">) -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">face_value</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">coin_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">total_value</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">face_value</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/blog/2023-11-04-data-for-kindergarten/index.malloynb"
  },
  {
    "titles": [
      "Data for Kindergarteners",
      "We're repeating ourselves."
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Notice that we use the calculation for <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">coin_count</span></span></code> in all the queries.  It is probably a useful concept in this dataset.  Also <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">total_value</span></span></code>.  We encode these concepts into a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">:</span></span></code> so we can use them simply in subsequent queries. If we were ever have to change a calculation, it would be all in one place."
      },
      {
        "type": "p",
        "text": "We're going to add some <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">:</span></span></code> calculations too.  It would be nice to know the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">coin_type</span></span></code> and the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">color</span></span></code> of each of the coins.  <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">dimension</span></span></code>s are used in <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">:</span></span></code> in queries."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">coins</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;coins.csv&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">coin_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">total_value</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">face_value</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">coin_type</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">face_value</span><span style=\"color: #000000\"> ? </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">pick</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;penny&#39;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">when</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">pick</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;nickle&#39;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">when</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">5</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">pick</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;dime&#39;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">when</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">10</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">pick</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;quarter&#39;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">when</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">25</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">else</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">null</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">color</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">face_value</span><span style=\"color: #000000\"> ? </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">pick</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;copper&#39;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">when</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">else</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;silver&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/blog/2023-11-04-data-for-kindergarten/index.malloynb"
  },
  {
    "titles": [
      "Data for Kindergarteners",
      "source: coins"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "If we were to click the 'schema' button we'd see all the definition for 'coins'.  We can use named object in queries witout having to repeat the definitions."
      }
    ],
    "path": "/blog/2023-11-04-data-for-kindergarten/index.malloynb"
  },
  {
    "titles": [
      "Data for Kindergarteners",
      "How many coins of each color?"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Asking questions is much easier now.  We have <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">coins</span></span></code> as a shorthand for <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;coins.csv&#39;</span><span style=\"color: #000000\">)</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">color</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">coin_count</span></span></code> as shorthad for those calculations."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">coins</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">color</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">coin_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/blog/2023-11-04-data-for-kindergarten/index.malloynb"
  },
  {
    "titles": [
      "Data for Kindergarteners",
      "How many of each type of coin?"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Another easy query, and pretty easy to read too."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">coins</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">coin_type</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">coin_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">total_value</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/blog/2023-11-04-data-for-kindergarten/index.malloynb"
  },
  {
    "titles": [
      "Data for Kindergarteners",
      "See the definitions"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "If we hold the control (or command) key and hovor over a variable, VSCode will show us the definition.  This can be really useful when you come upon a query you didn't write."
      }
    ],
    "path": "/blog/2023-11-04-data-for-kindergarten/index.malloynb"
  },
  {
    "titles": [
      "Data for Kindergarteners",
      "Shorter-hand."
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy is designed to make building queries easy."
      },
      {
        "type": "p",
        "text": "Queries can be constructed from reusable parts.  Above we saw how e can put reusable definitions into a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">:</span></span></code>.  We can also use a shorthand to combine these parts (dimensions, measures, and queries) together."
      },
      {
        "type": "p",
        "text": "A partial query is either a name or something between curlies (<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">{}</span></span></code>).  Partial queries can be combined with a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">+</span></span></code> operator."
      },
      {
        "type": "p",
        "text": "The query below is the same as the query above."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">coins</span><span style=\"color: #000000\"> -&gt; </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  {</span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">coin_type</span><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  + {</span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">coin_count</span><span style=\"color: #000000\">} </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  + {</span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">total_value</span><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/blog/2023-11-04-data-for-kindergarten/index.malloynb"
  },
  {
    "titles": [
      "Data for Kindergarteners",
      "Dimensions and measures can be used as partial queries."
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "When writing a query  <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">... -&gt; {</span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">coin_type</span><span style=\"color: #000000\">} ...</span></span></code> is the same as <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\"> ... -&gt; </span><span style=\"color: #001080\">coin_type</span><span style=\"color: #000000\">  ...</span></span></code>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">coins</span><span style=\"color: #000000\"> -&gt;       </span><span style=\"color: #008000\">//        same as:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #001080\">coin_type</span><span style=\"color: #000000\">         </span><span style=\"color: #008000\">// {group_by: coin_type}</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  + </span><span style=\"color: #001080\">coin_count</span><span style=\"color: #000000\">      </span><span style=\"color: #008000\">// {aggregate: coin_count}</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  + </span><span style=\"color: #001080\">total_value</span><span style=\"color: #000000\">     </span><span style=\"color: #008000\">// {aggregate: coin_count}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "We can write any part of the query either way.  All the queries below represent the same queries."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">coins</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">coin_type</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">coin_count</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">total_value</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">coins</span><span style=\"color: #000000\"> -&gt; {</span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">coin_type</span><span style=\"color: #000000\">} + </span><span style=\"color: #001080\">coin_count</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">total_value</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">coins</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">coin_type</span><span style=\"color: #000000\"> + {</span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">coin_count</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">total_value</span><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">coins</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">coin_type</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">coin_count</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">total_value</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/blog/2023-11-04-data-for-kindergarten/index.malloynb"
  },
  {
    "titles": [
      "Data for Kindergarteners",
      "Rendering results"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "By default, Malloy shows results as tables.  Results can be annotated by placing a line before the definition that starts with <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">#</span></span></code>  In the case below, we want to show the results as a bar_chart.  A bar chart expects 2 or three columns.  The first is the x axis, second is the y axis and the third, if it exists, controls the color."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\"># bar_chart</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">coins</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">coin_type</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">coin_count</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">total_value</span></span></pre>"
      }
    ],
    "path": "/blog/2023-11-04-data-for-kindergarten/index.malloynb"
  },
  {
    "titles": [
      "Data for Kindergarteners",
      "Extending Sources"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Suppose someone had written this great coin counting model and I wanted to use it in my analysis.  Malloy lets you extend (inherit from) a source and create a new source with new definitions.  We add a couple of new dimensions, a new calculation and some <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">views</span></span></code>.  In Malloy <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">views</span></span></code> are common ways of looking at data.  We've added two views here.  The first is <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">metrics</span></span></code> which is the common ways of look at data.  And by_type, the most common over all query."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #008000\">// import &#39;coins.malloy&#39;</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">coins2</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">coins</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">is_new</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">minted_year</span><span style=\"color: #000000\"> &gt;= </span><span style=\"color: #098658\">2000</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">minted_decade</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">floor</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">minted_year</span><span style=\"color: #000000\">/</span><span style=\"color: #098658\">10</span><span style=\"color: #000000\">) * </span><span style=\"color: #098658\">10</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\"># percent</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">percent_of_value</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">total_value</span><span style=\"color: #000000\">/</span><span style=\"color: #795E26\">all</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">total_value</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\"># percent</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">percent_of_coins</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">coin_count</span><span style=\"color: #000000\">/</span><span style=\"color: #795E26\">all</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">coin_count</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">metrics</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">total_value</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">coin_count</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">percent_of_value</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">percent_of_coins</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// we always look at this data by coin type</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_type</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">coin_type</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">metrics</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/blog/2023-11-04-data-for-kindergarten/index.malloynb"
  },
  {
    "titles": [
      "Data for Kindergarteners",
      "The schema for coins"
    ],
    "paragraphs": [],
    "path": "/blog/2023-11-04-data-for-kindergarten/index.malloynb"
  },
  {
    "titles": [
      "Data for Kindergarteners",
      "Views: The most common ways of looking at the data."
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Notice the views.  Views can be used by them selves or in combination with other queries.  Views are bigger building blocks."
      },
      {
        "type": "p",
        "text": "Let's start with <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">metrics</span></span></code>.  Metrics is a view that comuptes <em>all</em> the things we might want to ask about a pile of coins."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">coins2</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">metrics</span></span></pre>"
      }
    ],
    "path": "/blog/2023-11-04-data-for-kindergarten/index.malloynb"
  },
  {
    "titles": [
      "Data for Kindergarteners",
      "Composing with metrics"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "In our model above we've defined a view called 'metrics' and a dimension called 'color'"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">coins2</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">color</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">metrics</span></span></pre>"
      }
    ],
    "path": "/blog/2023-11-04-data-for-kindergarten/index.malloynb"
  },
  {
    "titles": [
      "Data for Kindergarteners",
      "Looking at data by type is the most common query."
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Often with a dataset, we might want to commonly look at the data in a particular way.  In this case, we probably want to look at coins by coin_type so we've built a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">by_type</span></span></code> view."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">coins2</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">by_type</span></span></pre>"
      }
    ],
    "path": "/blog/2023-11-04-data-for-kindergarten/index.malloynb"
  },
  {
    "titles": [
      "Data for Kindergarteners",
      "We can add filters to any query"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Adding filters let us look at subsets of the data.  In this case we are looking at coins minted this century."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">coins2</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">by_type</span><span style=\"color: #000000\"> + {</span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">is_new</span><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/blog/2023-11-04-data-for-kindergarten/index.malloynb"
  },
  {
    "titles": [
      "Data for Kindergarteners",
      "We can query by more than one dimension"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "(but this is hard to read)"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">coins2</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">coin_type</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">is_new</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">metrics</span></span></pre>"
      }
    ],
    "path": "/blog/2023-11-04-data-for-kindergarten/index.malloynb"
  },
  {
    "titles": [
      "Data for Kindergarteners",
      "Nesting data lets us look at more than one dimension at a time."
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">coins2</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">coin_type</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">metrics</span><span style=\"color: #000000\"> + {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">is_new</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">coin_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/blog/2023-11-04-data-for-kindergarten/index.malloynb"
  },
  {
    "titles": [
      "Pivoting data is even better."
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">coins2</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">coin_type</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">metrics</span><span style=\"color: #000000\"> + {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\"># pivot</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">is_new</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">metrics</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/blog/2023-11-04-data-for-kindergarten/index.malloynb"
  },
  {
    "titles": [
      "We can nest any query to get a more complete understanding of the data."
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">coins2</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">coin_type</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">metrics</span><span style=\"color: #000000\"> + {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">minted_year</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">coin_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/blog/2023-11-04-data-for-kindergarten/index.malloynb"
  },
  {
    "titles": [
      "We can nest any query to get a more complete understanding of the data.",
      "We nested data can be shown with a variety can have a variety of rendering options."
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">coins2</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">coin_type</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">metrics</span><span style=\"color: #000000\"> + {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\"># list_detail</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">minted_year</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">coin_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/blog/2023-11-04-data-for-kindergarten/index.malloynb"
  },
  {
    "titles": [
      "We can nest any query to get a more complete understanding of the data.",
      "Choosing a different outer dimension teaches us something entirely different."
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">coins2</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">minted_decade</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">metrics</span><span style=\"color: #000000\"> + {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">minted_decade</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">desc</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_type</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/blog/2023-11-04-data-for-kindergarten/index.malloynb"
  },
  {
    "titles": [
      "Beyond YAML: Why Semantic Layers Need Real Programming Languages"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The easy thing is not always the right thing"
      },
      {
        "type": "p",
        "text": "<em>November 6, 2023 by Carlin Eng</em>\n<br/><br/><br/>"
      },
      {
        "type": "p",
        "text": "Many commercial implementations of <a href=\"https://en.wikipedia.org/wiki/Semantic_layer\">semantic layers</a> are built using YAML, a “human-readable” data serialization format often used for configuration files. Because of its superficial readability, at first it may seem like the natural choice. It’s also relatively easy to start building a semantic layer using YAML, so it’s a quick path to get a product to market. However, taking this shortcut shifts the burden to users and creates a poor developer experience. In this post, I’ll lay out the reasons why, and explain why the Malloy team believes that a real semantic layer needs a full-fledged programming language."
      },
      {
        "type": "p",
        "text": "YAML was designed to create human-readable configuration files. When writing YAML configuration in an IDE, the editing environment sees input fields as simple text strings. This means the IDE cannot validate the contents of the configuration. Parsing and validation is usually passed off to some external program that lives outside of the IDE, and can take several seconds to run to completion. Unfortunately, users oftentimes need to write complex expressions in these configurations, and since the IDE has no knowledge of what those expressions can or cannot contain, those users are trapped in a vicious loop of guessing the correct syntax, leaving the IDE to run a validation script, trying to interpret any resulting error messages, and returning back to the IDE to try to fix their syntax. For cognitively demanding tasks like data modeling, fast feedback loops are absolutely critical, and this disjointed experience is crippling. The Malloy team experienced these limitations firsthand when they initially built LookML back in 2012 as a domain-specific language (DSL) on top of YAML. It’s one of the many lessons they took to heart when creating Malloy."
      },
      {
        "type": "p",
        "text": "Let’s look at a concrete example of this problem by inspecting a metric definition from another YAML-based semantic layer solution:"
      },
      {
        "type": "p",
        "text": "In this example, the logic for the filter field is fairly simple, but the correct syntax is quite complex. The field takes an expression where some values are enclosed in double-curlies, and those values have their own parenthesized subexpressions. Until you run a validation command, you have no idea if this is the correct syntax, or if you’ve referenced a non-existent field. Errors in this semantic data model can come from one of 3 totally separate languages:"
      },
      {
        "type": "p",
        "text": "<em>YAML</em>: these errors show up in the IDE, and are easy to fix"
      },
      {
        "type": "p",
        "text": "<em>Semantic Model DSL</em>: you need to explicitly run your DSL’s compilation program to see the problem. Maybe it’s a syntax error, maybe it’s an undefined field."
      },
      {
        "type": "p",
        "text": "<em>SQL</em>: semantic model DSLs typically contain SQL fragments, and the only way to test these is to run or compile the query."
      },
      {
        "type": "p",
        "text": "Modern programming environments don’t work this way. When someone writes syntactically invalid Javascript or Python code, they get immediate feedback from the IDE. Features like “jump to reference” or “peek at definition” allow developers to quickly explore a codebase and understand how complex components work together. By implementing a real programming language, instead of just a configuration DSL, Malloy offers this same functionality. In Malloy, when you type an invalid expression (either because the syntax isn’t correct, or because the object you’re referencing doesn’t exist), you get instantaneous feedback:"
      },
      {
        "type": "p",
        "text": "When reading someone else’s query that uses complex dimensions or measures, it’s a single click to see exactly how those objects are defined:"
      },
      {
        "type": "p",
        "text": "This doesn’t come for free. Writing a real compiler is a complex undertaking that requires a lot of hard work, knowledge, and skill. However, we believe it’s 100% worth the effort. Just like programming, data modeling and exploration is a very cognitively demanding process, and cognitively demanding processes benefit tremendously from fast feedback loops. At the Malloy team, we’re trying as hard as we can to ensure that data modelers and analysts can achieve “flow state” while doing their work. This means doing hard things, and sweating every tiny detail that causes friction in the experience."
      },
      {
        "type": "p",
        "text": "To learn more about Malloy, and experience the power of a semantic layer implemented as full programming language, check out our <a href=\"https://malloydata.github.io/documentation/\">documentation</a>, and make sure to join our <a href=\"/slack\">Slack community</a> to introduce yourself and join the conversation!"
      }
    ],
    "path": "/blog/2023-11-06-beyond-yaml/index.malloynb"
  },
  {
    "titles": [
      "Querying a Semantic Data Model?"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "A semantic data model contains prebuilt calculations and relationships for a set of data. This article will show you the basics of querying a semantic data model in <a href=\"https://www.malloydata.dev\">Malloy</a>."
      },
      {
        "type": "p",
        "text": "Let’s start simply, we'll define: <em>dimension</em>, <em>measure</em>, <em>aggregating query</em>, and <em>lookup query</em>."
      }
    ],
    "path": "/blog/2023-11-13-querying-a-semantic-model/index.malloynb"
  },
  {
    "titles": [
      "Querying a Semantic Data Model?",
      "Data for Kindergarteners"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Given that we learn about data in Kindergarten, it is really surprising how hard it is to query data in the \"big\" world.  In kindergarten data, we notice attributes about things, make piles of things, and count things in the piles.  We do this even before we learn any \"real\" math.  Strangely, noticing attributes about <em>things</em> and counting <em>things</em> is almost all there is to working with data."
      }
    ],
    "path": "/blog/2023-11-13-querying-a-semantic-model/index.malloynb"
  },
  {
    "titles": [
      "Querying a Semantic Data Model?",
      "Data for Kindergarteners",
      "Two types of queries, \"Where's Waldo\" and \"Making Piles\""
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "There are really two types of queries in the world, lookup and aggregating."
      },
      {
        "type": "p",
        "text": "<em>Lookup</em> queries are pretty easy.  Google search is a lookup query.  To search, type in some terms then see a list of results. Searching in SQL this often looks like <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">SELECT</span><span style=\"color: #000000\"> * </span><span style=\"color: #001080\">FROM</span><span style=\"color: #000000\"> &lt;</span><span style=\"color: #001080\">something</span><span style=\"color: #000000\">&gt; </span><span style=\"color: #AF00DB\">WHERE</span><span style=\"color: #000000\"> &lt;</span><span style=\"color: #001080\">FILTER</span><span style=\"color: #000000\">&gt;</span></span></code>."
      },
      {
        "type": "p",
        "text": "The interesting queries, the kindergarten queries, are <em>aggregating</em>.  Aggregating queries tell you something about a set of data.  An aggregating query has two main parts, the dimensions and measures."
      },
      {
        "type": "p",
        "text": "Dimensions are the attributes you use to decide which pile the thing goes in."
      },
      {
        "type": "p",
        "text": "A measure is something you can say about the pile.  \"How many objects?\", \"How much does this pile weigh?\", \"What is the average size of an object in this pile?\""
      },
      {
        "type": "p",
        "text": "\"OK class, let's take this pile of coins and separate them.  How many coins are pennies?  How many coins are nickels? Dimes? Quarters?\""
      },
      {
        "type": "p",
        "text": "Aggregating queries tell us things about datasets.  Lookup queries find things."
      }
    ],
    "path": "/blog/2023-11-13-querying-a-semantic-model/index.malloynb"
  },
  {
    "titles": [
      "Querying a Semantic Data Model?",
      "SQL World"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "In the SQL world, the interface to your data is just that, data.  The data sits in <em>tables</em>.  Everytime, you ask a question (run a query), you need to restate all the things about the data: the calculations, the relationships between <em>tables</em>. The unit of reusability is a <em>table</em>. You can run a query that makes a new <em>table</em>. You can turn a query into a SQL View, which is basically a <em>table</em> based on a calculation."
      }
    ],
    "path": "/blog/2023-11-13-querying-a-semantic-model/index.malloynb"
  },
  {
    "titles": [
      "Querying a Semantic Data Model?",
      "The Semantic Data Model is the interface to your data"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "In a Semantic Data Model, the calculations (<em>dimensions</em> and <em>measures</em>) are reusable. The join relationships are built into the semantic data model. The calculations (common ways of looking at data) are coded into the semantic data model. The act of querying becomes simply picking dimensions and measures, filtering the data, and sorting the results. This simplification is powerful in that the calculations are always vetted, so it becomes much harder to get incorrect results."
      }
    ],
    "path": "/blog/2023-11-13-querying-a-semantic-model/index.malloynb"
  },
  {
    "titles": [
      "Querying a Semantic Data Model?",
      "A Simple Example"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Below is a semantic data model for some flight data. For now, let's not concern ourselves with how this model is built but instead focus on how we can ask questions of the model.  In the semantic model, <em>dimensions</em>, <em>measures</em>, and joined relationships are all exposed as a list of variables."
      },
      {
        "type": "p",
        "text": "Each flight has an origin, destination and carrier.  Flights can be delayed.  Each flight has an aircraft that made the flight, and more.  The semantic data model provides us with the dimensions (in blue), the measures (in orange), and the graph of related objects. This model is encoded in a file called ‘flights.malloy’."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> {</span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\">} </span><span style=\"color: #001080\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;flights.malloy&#39;</span><span style=\"color: #000000\"> </span></span></pre>"
      }
    ],
    "path": "/blog/2023-11-13-querying-a-semantic-model/index.malloynb"
  },
  {
    "titles": [
      "Querying a Semantic Data Model?",
      "Step 10:  We'll jump to the end with a complex example"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "A semantic data model lets you do complicated things simply. Shamelessly, to ensure you read the full article, I'll start with a seemingly complex example and then explain how we got here. It's actually quite simple."
      },
      {
        "type": "p",
        "text": "The dashboard below shows flights from airports in California, where you can go, and which carriers will take you there. It shows how this has changed over time."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\"># dashboard</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">origin_name</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">metrics</span><span style=\"color: #000000\"> + {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">origin</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">state</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;CA&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">destination_name</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">metrics</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">carrier_list</span><span style=\"color: #000000\"> + {</span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">6</span><span style=\"color: #000000\">} </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\"># bar_chart</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier_name</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\"># line_chart</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">dep_month</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/blog/2023-11-13-querying-a-semantic-model/index.malloynb"
  },
  {
    "titles": [
      "Querying a Semantic Data Model?",
      "Wait, that looks really complex?  What do those things mean?"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "If you press the control key and hover over any of the terms, the Malloy VSCode extension will show you the semantic definition for the term."
      }
    ],
    "path": "/blog/2023-11-13-querying-a-semantic-model/index.malloynb"
  },
  {
    "titles": [
      "Querying a Semantic Data Model?",
      "Back to Step 1: How big is the pile?"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Ok, let's slow down and go step by step."
      },
      {
        "type": "p",
        "text": "Often, the first thing you want to know is, how big is the dataset?"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\">-&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "In Malloy, queries start with <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: &lt;</span><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">&gt;</span></span></code>.  In this case, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">flights</span></span></code>.  The <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">-&gt;</span></span></code> is the query transform operator.  The right hand side of the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">-&gt;</span></span></code> is the query transformation.  In this case we want a simple measure, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">flight_count</span></span></code>."
      }
    ],
    "path": "/blog/2023-11-13-querying-a-semantic-model/index.malloynb"
  },
  {
    "titles": [
      "Querying a Semantic Data Model?",
      "Dimensions and Measures"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "As we talked about earlier.  Aggregating queries have two parts: what you want to group by, and what you want to measure about things in that group.  Let's group the flights by the origin, and count how many flights."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">origin_name</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/blog/2023-11-13-querying-a-semantic-model/index.malloynb"
  },
  {
    "titles": [
      "Querying a Semantic Data Model?",
      "Seats in the Air"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Another way of measuring the busyness of an airport is to try and estimate the number of people that travel through the airport.  Planes are of different sizes.  If we count up all the seats in all the planes that have arrived, we can approximate the busyness.  The measure <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">seats_for_sale</span></span></code> will give us the maximum number of people that could have landed there."
      },
      {
        "type": "p",
        "text": "Notice Chicago has more people traveling through than Dallas-Fort Worth."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">origin_name</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">seats_for_sale</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/blog/2023-11-13-querying-a-semantic-model/index.malloynb"
  },
  {
    "titles": [
      "Querying a Semantic Data Model?",
      "Filtering"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Isolating the data to analyze is a big part of working with data.  Let's limit our analysis to California airports. We've reformated the query. In Malloy, spaces and newlines are the same thing."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; { </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">origin_name</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">seats_for_sale</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">origin</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">state</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">&#39;CA&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/blog/2023-11-13-querying-a-semantic-model/index.malloynb"
  },
  {
    "titles": [
      "Querying a Semantic Data Model?",
      "Adding your own measures"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The Malloy semantic data model provides most of what we would like to calculate, but we can provide our own calculations in our queries. This model doesn't contain an <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">average_distance</span></span></code>, so we can compute this ourselves."
      },
      {
        "type": "p",
        "text": "It looks like Jetblue, on average, has the longest flights."
      },
      {
        "type": "p",
        "text": "You may also notice that by default, Malloy sorts results in descending order by the first measure."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier_name</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">avg_distance</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">distance</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/blog/2023-11-13-querying-a-semantic-model/index.malloynb"
  },
  {
    "titles": [
      "Querying a Semantic Data Model?",
      "Adding your own measures",
      "Changing the sort order"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "We can change the sort order by adding a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span></span></code> clause"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier_name</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">avg_distance</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">distance</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">desc</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/blog/2023-11-13-querying-a-semantic-model/index.malloynb"
  },
  {
    "titles": [
      "Querying a Semantic Data Model?",
      "Adding your own dimensions"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "You can group by an expression.  The expressions can contain just about any calculation you can do in SQL."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39; - &#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">carrier_name</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">origin_count</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span></span></pre>"
      }
    ],
    "path": "/blog/2023-11-13-querying-a-semantic-model/index.malloynb"
  },
  {
    "titles": [
      "Querying a Semantic Data Model?",
      "Working with Time"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "A big part of working with data is working with time.  Queries that have time in the first column are sorted in descending order by time."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_month</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">month</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;WN&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/blog/2023-11-13-querying-a-semantic-model/index.malloynb"
  },
  {
    "titles": [
      "Querying a Semantic Data Model?",
      "Annotations and Charting"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Charts are generally another view on tables.  For example, the table above can be viewed as a line chart.  The x-axis is <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">flight_month</span></span></code> and the y-axis is <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">flight_count</span></span></code>.  Malloy's annotations let you tag a query so the rendering engine can show the results in different ways.  We simply tag the query above as a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\"># line_chart</span></span></code>."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\"># line_chart</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_month</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">month</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;WN&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/blog/2023-11-13-querying-a-semantic-model/index.malloynb"
  },
  {
    "titles": [
      "Querying a Semantic Data Model?",
      "Filtering Time"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Filtering time ranges is always difficult in SQL.  Malloy time ranges can be specified simply.  We add a filter to limit the time range to the year 2001."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\"># line_chart</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\"># x</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_month</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">month</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\"># y</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\"># series</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier_name</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\"> ? </span><span style=\"color: #098658\">@2001</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">10000</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/blog/2023-11-13-querying-a-semantic-model/index.malloynb"
  },
  {
    "titles": [
      "Querying a Semantic Data Model?",
      "Views: Pre-built Queries"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Semantic models can include views.  Views are pre-built queries.  Often in a dataset there are several interesting ways of looking at the dataset.  A common use for views is to declare these in advance."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">by_carrier</span></span></pre>"
      }
    ],
    "path": "/blog/2023-11-13-querying-a-semantic-model/index.malloynb"
  },
  {
    "titles": [
      "Querying a Semantic Data Model?",
      "Convention: the 'metrics' view."
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy models often contain a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">metrics</span></span></code> view.  The metrics view contains the most common ways of measuring data in this data set. This makes it easy build queries on the fly."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">metrics</span></span></pre>"
      }
    ],
    "path": "/blog/2023-11-13-querying-a-semantic-model/index.malloynb"
  },
  {
    "titles": [
      "Querying a Semantic Data Model?",
      "Metrics by Origin"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Views can be combined using the + operator, essentially merging the query definitions"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">origin_name</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">metrics</span></span></pre>"
      }
    ],
    "path": "/blog/2023-11-13-querying-a-semantic-model/index.malloynb"
  },
  {
    "titles": [
      "Querying a Semantic Data Model?",
      "Metric by Manufacturer"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "If you use a dimension name instead of a view name it treats it as if you wrote {group_by: dimension_name}"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">plane_manufacturer</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">metrics</span></span></pre>"
      }
    ],
    "path": "/blog/2023-11-13-querying-a-semantic-model/index.malloynb"
  },
  {
    "titles": [
      "Querying a Semantic Data Model?",
      "Nesting"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "One of the really powerful features of the Malloy language is nesting.  We can see which carriers fly which airplanes."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">plane_manufacturer</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">metrics</span><span style=\"color: #000000\"> + {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_carrier</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier_name</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">aircraft_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/blog/2023-11-13-querying-a-semantic-model/index.malloynb"
  },
  {
    "titles": [
      "Querying a Semantic Data Model?",
      "Nesting multiple queries"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "More than one query can be nested.  Nested queries can use the same '+' shorthand as top level queries."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">by_carrier</span><span style=\"color: #000000\"> + {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">plane_manufacturer</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">metrics</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">origin_name</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">metrics</span><span style=\"color: #000000\"> + {</span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/blog/2023-11-13-querying-a-semantic-model/index.malloynb"
  },
  {
    "titles": [
      "Querying a Semantic Data Model?",
      "And there you have it"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Writing queries with a pre-built model is really powerful.  You can easily explore a complex dataset in a simple, composable way.  The output of these queries can be used in lots of different ways, from Data Science to transforming data for consumption in other systems."
      },
      {
        "type": "p",
        "text": "Pre-built semantic models take much of the pain out of working with data."
      }
    ],
    "path": "/blog/2023-11-13-querying-a-semantic-model/index.malloynb"
  },
  {
    "titles": [
      "Queries that return databases instead of tables"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "<em>Reading data is expensive.</em>"
      },
      {
        "type": "p",
        "text": "lloyd tabb, 2023-12-22"
      },
      {
        "type": "p",
        "text": "<a href=\"https://bigdata.uni-saarland.de/people/nix.php\">Joris Nix</a> recently published a paper <em><a href=\"https://arxiv.org/pdf/2312.00638.pdf\">What if an SQL Statement Returned a Database?</a></em>.  The title of this paper ask a fascinating and important question. In data transformation, we often read the same data over and over producing multiple copies of the data at various granularities.  If we could read the data only once and produce multiple tables in a database, the efficiency gain is obvious.  It could also radically simplify data pipelines."
      },
      {
        "type": "p",
        "text": "In their article, Joris goes on to explain how it might be implemented in SQL."
      },
      {
        "type": "p",
        "text": "In this article, I'm going to give a couple more reasons why this question and idea is really important. I'll will show, how in Malloy, with Malloy's nesting, you can already achieve some of what Joris asks.  The real benefit will only happen if underlying databases choose to do something here."
      }
    ],
    "path": "/blog/2023-12-22-query-returns-database/index.malloynb"
  },
  {
    "titles": [
      "Queries that return databases instead of tables",
      "Reading data from storage"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Reading data from storage the most expensive thing when querying data. The cost of computation is often incidental relative to the cost of reading data. In traditional data warehousing, the unit of reusability is a <em>fact table</em>.  A fact table is the data at some level of dimensional granularity.  Most data pipelines are built to produce fact tables."
      }
    ],
    "path": "/blog/2023-12-22-query-returns-database/index.malloynb"
  },
  {
    "titles": [
      "Queries that return databases instead of tables",
      "Streaming data"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "When working with streaming data, you sometimes only get a <strong>single look at the data</strong> as it streams by.  If you can look at the data only once and produce multiple reuslts you have a chance of being much more efficient and closer to real time in your transformation."
      }
    ],
    "path": "/blog/2023-12-22-query-returns-database/index.malloynb"
  },
  {
    "titles": [
      "Queries that return databases instead of tables",
      "Malloy is mostly there already."
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "In Joris's paper, the SQL required to perfom the multiple results is difficult to understand.  Malloy makes creating multiple results from a single query relatively easy."
      },
      {
        "type": "p",
        "text": "Malloy queries <em>always</em> execute as a single SQL query so these concepts map nicely."
      }
    ],
    "path": "/blog/2023-12-22-query-returns-database/index.malloynb"
  },
  {
    "titles": [
      "Queries that return databases instead of tables",
      "Malloy is mostly there already.",
      "Let's use Joris's data."
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "We have a list of sections (lectures being given my mulitple professors) in CSV format."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-txt\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">name, age,lecture,difficulty</span></span>\n<span class=\"line\"><span style=\"color: #000000\">Prof A,30,Computer Science,low</span></span>\n<span class=\"line\"><span style=\"color: #000000\">Prof A,30,Databases,low</span></span>\n<span class=\"line\"><span style=\"color: #000000\">Prof B,40,Computer Science,low</span></span>\n<span class=\"line\"><span style=\"color: #000000\">Prof B,40,Artificial Intellegence,high</span></span>\n<span class=\"line\"><span style=\"color: #000000\">Prof C,50,Data Structures,high</span></span>\n<span class=\"line\"><span style=\"color: #000000\">Prof C,50,Computer Science,low</span></span></pre>"
      },
      {
        "type": "p",
        "text": "We're going to make a Malloy <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">:</span></span></code> that adds some definitions.  These are just common calculations associated with the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">sections</span></span></code> data.  A source can be queried like a table, but since these definitions are part of the source, we don't have to repeat ourselves when writing queries."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">sections</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;lectures.csv&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">section_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">lecture_id</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">md5</span><span style=\"color: #000000\">!(</span><span style=\"color: #001080\">lecture</span><span style=\"color: #000000\">)  </span><span style=\"color: #008000\">// define a primary key for lecture</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">professor_id</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">md5</span><span style=\"color: #000000\">!(</span><span style=\"color: #001080\">name</span><span style=\"color: #000000\">)  </span><span style=\"color: #008000\">// define a promary key for professor</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "For ANY of the the queries below:"
      },
      {
        "type": "p",
        "text": "Click on 'JSON' to see the output in JSON"
      },
      {
        "type": "p",
        "text": "Click on 'SQL' to Query in SQL generated for the Malloy Query."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">sections</span><span style=\"color: #000000\"> -&gt; {</span><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">: *}</span></span></pre>"
      }
    ],
    "path": "/blog/2023-12-22-query-returns-database/index.malloynb"
  },
  {
    "titles": [
      "Queries that return databases instead of tables",
      "First let's write the queries for each individual table."
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "In Joris's document, there are three tables that are produced in results.  Let's first take a look at the equivalent Malloy queries to produce these tables. Click SQL to see the equivalent SQL.  You will see that the translation from the Malloy query to the equivalent SQL is relatively straight forward."
      }
    ],
    "path": "/blog/2023-12-22-query-returns-database/index.malloynb"
  },
  {
    "titles": [
      "Queries that return databases instead of tables",
      "Query to produce the professors table."
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The query below reads the sections table an produces a professors table."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">sections</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">professor_id</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">name</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">age</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">section_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/blog/2023-12-22-query-returns-database/index.malloynb"
  },
  {
    "titles": [
      "Queries that return databases instead of tables",
      "Query to produce the lectures table."
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "We'd have to read the data once more to produce the lectures table."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">sections</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">lecture_id</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">lecture</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">difficulty</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">section_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/blog/2023-12-22-query-returns-database/index.malloynb"
  },
  {
    "titles": [
      "Queries that return databases instead of tables",
      "Query for the gives table."
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">sections</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">lecture_id</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">professor_id</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/blog/2023-12-22-query-returns-database/index.malloynb"
  },
  {
    "titles": [
      "Queries that return databases instead of tables",
      "Returning multiple results with nesting"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy's nesting produces subtables on each row.  In this case we have a table with a single row and the subtables <em>professors</em>, <em>lectures</em> and <em>gives</em>. (the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">#dashboard</span></span></code> shows the data in dashboard form instead of a table)."
      },
      {
        "type": "p",
        "text": "Look at the SQL tab in the results to see the SQL generated for this query."
      },
      {
        "type": "p",
        "text": "Look at the JSON tab to see the resulting nested tables in JSON."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\"># dashboard</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">sections</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">professors</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">professor_id</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">name</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">age</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">total_sections</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">section_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">lectures</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">lecture_id</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">lecture</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">difficulty</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">total_sections</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">section_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">gives</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">lecture_id</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">professor_id</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/blog/2023-12-22-query-returns-database/index.malloynb"
  },
  {
    "titles": [
      "Queries that return databases instead of tables",
      "Querying the resulting JSON."
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "We've taken the json output from the query above and placed it into a JSON file.  We could have just as also placed it in a <em>parquet</em> file or in BigQuery as it supports nested structures."
      },
      {
        "type": "p",
        "text": "Below we define a Malloy source 'db' based on this data."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">db</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;db.json&#39;</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "We can see from the schema above that the we have three nested tables in the above source."
      },
      {
        "type": "p",
        "text": "We can query the individual tables, for example professors."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">db</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">professors</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">professor_id</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">professors</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">name</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">professors</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">age</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "When working with nested data, accessing results from mulitple nested sources the results in a cross join, so we'll write some where clauses."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">db</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">   </span><span style=\"color: #001080\">gives</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">professor_id</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">professors</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">professor_id</span></span>\n<span class=\"line\"><span style=\"color: #000000\">   </span><span style=\"color: #0000FF\">and</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">gives</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">lecture_id</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">lectures</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">lecture_id</span><span style=\"color: #000000\">    </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">professors</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">name</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">lectures</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">lecture</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">lectures</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">difficulty</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/blog/2023-12-22-query-returns-database/index.malloynb"
  },
  {
    "titles": [
      "Queries that return databases instead of tables",
      "Conclusion: SQL syntax?"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "If there were SQL syntax to create multiple tables, we can envision creating a syntax like <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">nest</span></span></code> to create an additional output table as part of a single SQL query.  The effiency here is obvious in that the data would only be read from storage once."
      }
    ],
    "path": "/blog/2023-12-22-query-returns-database/index.malloynb"
  },
  {
    "titles": [
      "Queries that return databases instead of tables",
      "Appendix: The nesting query and results"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Below is SQL query generated by Malloy to produce the nested data."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-txt\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">WITH __stage0 AS (</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  SELECT</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    group_set,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    CASE WHEN group_set=1 THEN</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      md5(sections.&quot;name&quot;)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      END as &quot;professor_id__1&quot;,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    CASE WHEN group_set=1 THEN</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      sections.&quot;name&quot;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      END as &quot;name__1&quot;,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    CASE WHEN group_set=1 THEN</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      sections.&quot;age&quot;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      END as &quot;age__1&quot;,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    (CASE WHEN group_set=1 THEN</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      COUNT( 1)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      END) as &quot;total_sections__1&quot;,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    CASE WHEN group_set=2 THEN</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      md5(sections.&quot;lecture&quot;)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      END as &quot;lecture_id__2&quot;,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    CASE WHEN group_set=2 THEN</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      sections.&quot;lecture&quot;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      END as &quot;lecture__2&quot;,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    CASE WHEN group_set=2 THEN</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      sections.&quot;difficulty&quot;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      END as &quot;difficulty__2&quot;,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    (CASE WHEN group_set=2 THEN</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      COUNT( 1)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      END) as &quot;total_sections__2&quot;,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    CASE WHEN group_set=3 THEN</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      md5(sections.&quot;lecture&quot;)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      END as &quot;lecture_id__3&quot;,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    CASE WHEN group_set=3 THEN</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      md5(sections.&quot;name&quot;)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      END as &quot;professor_id__3&quot;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  FROM lectures.csv as sections</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  CROSS JOIN (SELECT UNNEST(GENERATE_SERIES(0,3,1)) as group_set  ) as group_set</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  GROUP BY 1,2,3,4,6,7,8,10,11</span></span>\n<span class=\"line\"><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">SELECT</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  COALESCE(LIST({</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    &quot;professor_id&quot;: &quot;professor_id__1&quot;, </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    &quot;name&quot;: &quot;name__1&quot;, </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    &quot;age&quot;: &quot;age__1&quot;, </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    &quot;total_sections&quot;: &quot;total_sections__1&quot;}  ORDER BY  &quot;total_sections__1&quot; desc NULLS LAST) FILTER (WHERE group_set=1),[]) as &quot;professors&quot;,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  COALESCE(LIST({</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    &quot;lecture_id&quot;: &quot;lecture_id__2&quot;, </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    &quot;lecture&quot;: &quot;lecture__2&quot;, </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    &quot;difficulty&quot;: &quot;difficulty__2&quot;, </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    &quot;total_sections&quot;: &quot;total_sections__2&quot;}  ORDER BY  &quot;total_sections__2&quot; desc NULLS LAST) FILTER (WHERE group_set=2),[]) as &quot;lectures&quot;,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  COALESCE(LIST({</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    &quot;lecture_id&quot;: &quot;lecture_id__3&quot;, </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    &quot;professor_id&quot;: &quot;professor_id__3&quot;}  ORDER BY  &quot;lecture_id__3&quot; asc NULLS LAST) FILTER (WHERE group_set=3),[]) as &quot;gives&quot;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">FROM __stage0</span></span></pre>"
      },
      {
        "type": "p",
        "text": "And the data produced, in JSON"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-txt\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">[</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    &quot;professors&quot;: [</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        &quot;professor_id&quot;: &quot;0b6a03d81e7b137f3a6bc238d3802d9a&quot;,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        &quot;name&quot;: &quot;Prof A&quot;,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        &quot;age&quot;: 30,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        &quot;total_sections&quot;: 2</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      },</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        &quot;professor_id&quot;: &quot;9aa3351834cd8de84eafd711dbd3e1d9&quot;,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        &quot;name&quot;: &quot;Prof B&quot;,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        &quot;age&quot;: 40,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        &quot;total_sections&quot;: 2</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      },</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        &quot;professor_id&quot;: &quot;fb6561c76605336b6b166432e9f84740&quot;,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        &quot;name&quot;: &quot;Prof C&quot;,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        &quot;age&quot;: 50,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        &quot;total_sections&quot;: 2</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    ],</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    &quot;lectures&quot;: [</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        &quot;lecture_id&quot;: &quot;8329f5105520a1b72d062628c077ddfa&quot;,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        &quot;lecture&quot;: &quot;Computer Science&quot;,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        &quot;difficulty&quot;: &quot;low&quot;,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        &quot;total_sections&quot;: 3</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      },</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        &quot;lecture_id&quot;: &quot;ea2ef9b0d095bf991f4973633b485340&quot;,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        &quot;lecture&quot;: &quot;Databases&quot;,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        &quot;difficulty&quot;: &quot;low&quot;,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        &quot;total_sections&quot;: 1</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      },</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        &quot;lecture_id&quot;: &quot;7ccd622f92e98e5474d720bf66673398&quot;,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        &quot;lecture&quot;: &quot;Artificial Intellegence&quot;,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        &quot;difficulty&quot;: &quot;high&quot;,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        &quot;total_sections&quot;: 1</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      },</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        &quot;lecture_id&quot;: &quot;49110ba9c7e157360ed1b72f643bc1a3&quot;,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        &quot;lecture&quot;: &quot;Data Structures&quot;,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        &quot;difficulty&quot;: &quot;high&quot;,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        &quot;total_sections&quot;: 1</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    ],</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    &quot;gives&quot;: [</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        &quot;lecture_id&quot;: &quot;49110ba9c7e157360ed1b72f643bc1a3&quot;,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        &quot;professor_id&quot;: &quot;fb6561c76605336b6b166432e9f84740&quot;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      },</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        &quot;lecture_id&quot;: &quot;7ccd622f92e98e5474d720bf66673398&quot;,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        &quot;professor_id&quot;: &quot;9aa3351834cd8de84eafd711dbd3e1d9&quot;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      },</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        &quot;lecture_id&quot;: &quot;8329f5105520a1b72d062628c077ddfa&quot;,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        &quot;professor_id&quot;: &quot;0b6a03d81e7b137f3a6bc238d3802d9a&quot;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      },</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        &quot;lecture_id&quot;: &quot;8329f5105520a1b72d062628c077ddfa&quot;,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        &quot;professor_id&quot;: &quot;9aa3351834cd8de84eafd711dbd3e1d9&quot;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      },</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        &quot;lecture_id&quot;: &quot;8329f5105520a1b72d062628c077ddfa&quot;,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        &quot;professor_id&quot;: &quot;fb6561c76605336b6b166432e9f84740&quot;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      },</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        &quot;lecture_id&quot;: &quot;ea2ef9b0d095bf991f4973633b485340&quot;,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        &quot;professor_id&quot;: &quot;0b6a03d81e7b137f3a6bc238d3802d9a&quot;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    ]</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">]</span></span></pre>"
      }
    ],
    "path": "/blog/2023-12-22-query-returns-database/index.malloynb"
  },
  {
    "titles": [
      "What's Next for Malloy in 2024"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "<em>January 9, 2024 by The Malloy Team</em>\n<br/><br/><br/>"
      },
      {
        "type": "p",
        "text": "Happy New Year from the Malloy Team! The end-of-year holiday break gave us all an opportunity to reflect on the accomplishments of the year and ponder what’s to come. To start the year, I’d like to give a quick rundown of what we’re excited about on our 2024 roadmap."
      }
    ],
    "path": "/blog/2024-01-09-whats-next-in-2024/index.malloynb"
  },
  {
    "titles": [
      "What's Next for Malloy in 2024",
      "Analytical Completeness"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "As the Malloy community grows, we have folks from all over the world testing the limits of the language with their use cases. Most of these folks are coming to us with an advanced knowledge of SQL, and their use cases often rely on sophisticated SQL features such as window partition clauses and sliding window frames that are not yet expressible in Malloy. At the start of the year, we’re making a concerted effort to close these gaps. While there are existing workarounds today with the <a href=\"https://docs.malloydata.dev/documentation/language/sql_blocks#embedding-malloy-queries-in-an-sql-block-turducken-\">Turducken</a> (a clause that allows embedding SQL in Malloy and vice versa), we want to make this a rare bird. At the start of the year, we’ll be filling these gaps and implementing partition clauses, percentile functions, and a way for you to call any arbitrary aggregate or window function in the underlying database."
      }
    ],
    "path": "/blog/2024-01-09-whats-next-in-2024/index.malloynb"
  },
  {
    "titles": [
      "What's Next for Malloy in 2024",
      "Even More Magical Rendering"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Existing data renderers only work well with tabular data, where the data is laid out in rows and columns. Building a renderer to natively handle nested data opens up some fascinating opportunities for visualization. Malloy breaks free from the standard rectangular paradigm of data, and we’re making major improvements to how these hyperdimensional result sets are presented. Nested queries allow you to inspect your dataset from multiple levels of granularity simultaneously, creating what are effectively entire dashboards with a single query. As a sneak preview, here’s an example screenshot showing a complex, nested result from a single Malloy query in our current renderer, versus how it will look in the improved renderer:"
      }
    ],
    "path": "/blog/2024-01-09-whats-next-in-2024/index.malloynb"
  },
  {
    "titles": [
      "What's Next for Malloy in 2024",
      "Even More Magical Rendering",
      "Legacy renderer"
    ],
    "paragraphs": [],
    "path": "/blog/2024-01-09-whats-next-in-2024/index.malloynb"
  },
  {
    "titles": [
      "What's Next for Malloy in 2024",
      "Even More Magical Rendering",
      "Improved renderer"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "We’re making a ton of other improvements as well: fixed column headers, fine-grained control over how charts are shown, sparklines, interactivity, and more. If you’re building an application with Malloy, and want to take advantage of our renderer, it’s simple to include in your own codebase. Check out the <a href=\"https://github.com/malloydata/malloy-svelte-example\">Svelte app example</a> on our Github repo."
      }
    ],
    "path": "/blog/2024-01-09-whats-next-in-2024/index.malloynb"
  },
  {
    "titles": [
      "What's Next for Malloy in 2024",
      "Parameters - Reusability, Composability, and Dynamic Filtering"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Today, Malloy users enjoy a level of composability and reusability that is completely absent from SQL via our semantic modeling concepts. We want to push this even further by introducing parameters into the language. Parameters in Malloy will allow the same artifact to be used in many different contexts, such as different customers inside of a multi-tenant SaaS application. A large percentage of our most passionate users are engineers who are building analytics-focused applications, and this functionality allows them to write a single data model and re-use it across different environments. Parameters will unlock powerful functionality for analysts and data scientists as well, such as the ability to build dashboards with dynamic time ranges and filters. You can read more about the proposal for implementing parameters and contribute to the discussion <a href=\"https://github.com/malloydata/whatsnext/blob/main/wns/WN-0002/wn-0002.md\">here</a>."
      }
    ],
    "path": "/blog/2024-01-09-whats-next-in-2024/index.malloynb"
  },
  {
    "titles": [
      "What's Next for Malloy in 2024",
      "Database Connections"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The overarching mission of the Malloy team is to replace SQL for analytics. In order to achieve this goal, we need to make sure that users can run Malloy code anywhere that SQL runs. There are a huge number of databases out there that speak SQL, and it would be foolish for a team of our size to build connectors for all of them. Instead, we’re working on a different approach – we’re going to decouple the core Malloy language from the database connection code, and make it as easy as possible to write a custom database connection for Malloy. Our goal is to have an ecosystem of third-party connectors to handle the long-tail of database support, and if your desired database is not yet supported, it should be simple to get one up and running. Finally, we know that in order for Malloy to be successful, there’s a small number of cloud-native data warehouses that will need first-class support, and we’ll be investing in this in 2024."
      }
    ],
    "path": "/blog/2024-01-09-whats-next-in-2024/index.malloynb"
  },
  {
    "titles": [
      "What's Next for Malloy in 2024",
      "A World Class IDE for Data Developers"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Software developers have had fantastic tooling for many years now. By comparison, data teams are living in the dark ages. We’re trying to build a first class development environment for data folks on par with what is available to other software domains, and so we put enormous effort into making our VS Code extension the best place for data modelers to do their work. Expect to see more tooling to make working with your data in Malloy a smooth and joyful experience. Some things to look forward to are improved code-completion, support for drilling into measures to look at more granular data, scratchpad support in Malloy notebooks, and allowing the VSCode extension to take advantage of the pluggable database connections described in the previous section."
      }
    ],
    "path": "/blog/2024-01-09-whats-next-in-2024/index.malloynb"
  },
  {
    "titles": [
      "What's Next for Malloy in 2024",
      "Conclusion"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "We’re a small team at the start of our journey, but we have huge ambitions. The above list is just a sampling of what we hope to achieve in the coming year. We love hearing feedback and suggestions, so if you’re excited about any of this, or you feel something is missing, we want to hear about it – <a href=\"/slack\">join the Malloy community Slack channel</a> and drop us a line!"
      }
    ],
    "path": "/blog/2024-01-09-whats-next-in-2024/index.malloynb"
  },
  {
    "titles": [
      "Instant BigQuery Usage Insights with Malloy"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "<em>January 28, 2024 by Carlin Eng</em>\n<br/><br/><br/>"
      },
      {
        "type": "p",
        "text": "Malloy is an innovative way to analyze and explore data. The Malloy team’s dedication to user experience removes much of the toil of data analysis, and turns it into a joyful experience. With some recent advances on GCP, it’s now easier than ever to run Malloy against your data in BigQuery. This blog post will show you exactly how, and provide you with some sample analysis that you can take off the shelf and use to explore your BigQuery usage patterns."
      },
      {
        "type": "p",
        "text": "<a href=\"https://cloud.google.com/shell/docs\">Google Cloud Shell</a> is a browser-based environment that greatly simplifies developing and operating a GCP environment. It comes preloaded with all the necessary libraries and credentials for accessing resources in a GCP project, including BigQuery. It also comes with a VS Code-based editing environment called <a href=\"https://cloud.google.com/code\">Cloud Code</a>, with full access to the VS Code Extension Marketplace. Navigate to <a href=\"https://ide.cloud.google.com\" target=\"_blank\">ide.cloud.google.com</a> and you’ll see it open up. Make sure you are running the ‘Preview’ as it has a more recent version of VS Code."
      },
      {
        "type": "p",
        "text": "To start analyzing your BigQuery usage data with Malloy, you need to do a few things:"
      },
      {
        "type": "p",
        "text": "Install the Malloy VS Code extension"
      },
      {
        "type": "p",
        "text": "Connect Cloud Code to your GCP Project"
      },
      {
        "type": "p",
        "text": "Clone the <a href=\"https://github.com/malloydata/bigquery_jobs\" target=\"_blank\">bigquery_jobs Github repository</a> . Let's walk through it, step-by-step:"
      }
    ],
    "path": "/blog/2024-01-28-bigquery-jobs/index.malloynb"
  },
  {
    "titles": [
      "Instant BigQuery Usage Insights with Malloy",
      "Installing the Extension"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "In your Cloud Shell Editor, the VS Code extension is accessible through the Extension Marketplace. Click on the Extensions icon in the sidebar, search for “Malloy”, and install the extension."
      }
    ],
    "path": "/blog/2024-01-28-bigquery-jobs/index.malloynb"
  },
  {
    "titles": [
      "Instant BigQuery Usage Insights with Malloy",
      "Signing into your GCP Project"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Click the “Cloud Code - Sign In” button on the bottom of your screen. This will open an authorization dialog that prompts you to authorize Cloud Shell to your GCP Project."
      },
      {
        "type": "p",
        "text": "The Status Bar at the bottom of your screen should now have the name of your GCP project. If you instead see text that says “Cloud Code - No Project”, click the “No Project” text on the status bar, and it will open up another dialog box that prompts you to select a project:"
      },
      {
        "type": "p",
        "text": "Once you’ve selected a Google Cloud project, your Cloud Code environment is authorized to run queries against BigQuery."
      }
    ],
    "path": "/blog/2024-01-28-bigquery-jobs/index.malloynb"
  },
  {
    "titles": [
      "Instant BigQuery Usage Insights with Malloy",
      "Load the BigQuery Jobs Data Model from Github"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "We’ve pre-built a Malloy data model on top of the <a href=\"https://cloud.google.com/bigquery/docs/information-schema-intro\" target=\"_blank\">BigQuery information_schema views</a>. This will allow you to gather insights about your BigQuery usage without having to do the detective work of understanding the schema of the tables yourself. Just clone the data model, point the tables to your own internal data, and run the notebooks."
      },
      {
        "type": "p",
        "text": "Click on the “Clone Git Repository” button on the home screen and enter the URL for our git repository: <a href=\"https://github.com/malloydata/bigquery_jobs.git\">https://github.com/malloydata/bigquery_jobs.git</a>"
      },
      {
        "type": "p",
        "text": "This will clone the git repo into the filesystem of your Cloud Shell instance, and open up the repo as a folder in your VS Code environment."
      }
    ],
    "path": "/blog/2024-01-28-bigquery-jobs/index.malloynb"
  },
  {
    "titles": [
      "Instant BigQuery Usage Insights with Malloy",
      "Point the Data Models at your own Data"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Open up <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">config</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">malloy</span></span></code> in the repo and in each of the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">bigquery</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sql</span><span style=\"color: #000000\">(‘...’)</span></span></code> statements, enter the values for your own <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">information_schema</span></span></code> views. For example, if my GCP Project was in the “US” region, the config file would look like the following:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">jobs_tbl</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">bigquery</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sql</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;SELECT * FROM `region-US`.INFORMATION_SCHEMA.JOBS&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">tables_tbl</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">bigquery</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sql</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;SELECT * FROM `region-US`.INFORMATION_SCHEMA.TABLES&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">table_storage_tbl</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">bigquery</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sql</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;SELECT * FROM `region-US`.INFORMATION_SCHEMA.TABLE_STORAGE&#39;</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Try clicking the \"Preview\" CodeLens action to show some examples of the data in the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">information</span><span style=\"color: #000000\">-</span><span style=\"color: #001080\">schema</span></span></code>."
      },
      {
        "type": "p",
        "text": "If you run into an error saying \"bytes billed exceeded\", you'll need to update the BigQuery connection settings."
      }
    ],
    "path": "/blog/2024-01-28-bigquery-jobs/index.malloynb"
  },
  {
    "titles": [
      "Instant BigQuery Usage Insights with Malloy",
      "Run the Dashboard Queries"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Once your model has been configured to point at your own <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">information_schema</span></span></code> data, you can immediately start exploring. The <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">dashboard</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">malloynb</span></span></code> file contains a set of queries that will immediately give you an overview of your high level BigQuery usage patterns, including slot usage over time, hot and cold tables, most active users, and most expensive queries. Open up the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">dashboard</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">malloynb</span></span></code> file and click the “Run All” button at the top to execute each of the queries, then scroll through the notebook to see the results:"
      }
    ],
    "path": "/blog/2024-01-28-bigquery-jobs/index.malloynb"
  },
  {
    "titles": [
      "Instant BigQuery Usage Insights with Malloy",
      "Conclusion"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Data analysis is an iterative process, and the answer to one question will spawn many more questions. Within a Malloy Notebook, it’s easy to use one query as a starting point for an investigation, and branch off into many different directions. Within this notebook, I can easily add new Malloy query cells to drill in further. As a quick exercise to see the power of Malloy for yourself, try answering a few of these simple questions:"
      },
      {
        "type": "p",
        "text": "BigQuery has the ability to instantaneously scale your compute resources up and down to meet demand. Does your BigQuery project exhibit any clear usage patterns around time of day or day of week?"
      },
      {
        "type": "p",
        "text": "The model we built in the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">jobs</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">malloy</span></span></code> file is fairly basic. It includes some scalar transformations, some aggregating measures, and some queries of interest. What other calculations would you include in the model to make it interesting for your own data?"
      },
      {
        "type": "p",
        "text": "Runaway queries in BigQuery can cause resource contention. Oftentimes these queries bump up against the <a href=\"https://cloud.google.com/bigquery/quotas#query_jobs\">default 6 hour runtime limit</a>. Are there any recurring queries in your project that are hitting this limit and causing problems? Write a query to identify these queries, and the user responsible for issuing them."
      },
      {
        "type": "p",
        "text": "We love hearing feedback and suggestions, so once you've tried this out, let us know how your experience went -- <a href=\"/slack\">join the Malloy community Slack channel</a> and drop us a line!"
      }
    ],
    "path": "/blog/2024-01-28-bigquery-jobs/index.malloynb"
  },
  {
    "titles": [
      "Malloy Renders Nested Data"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "A preview of our new nested data renderer"
      },
      {
        "type": "p",
        "text": "<em>February 8, 2024 by Speros Kokenes</em>\n<br/><br/><br/>\n<img class=\"table-post-img\" src=\"CleanShot 2024-02-08 at 08.18.41@2x.png\" style=\"\" alt=\"\">"
      },
      {
        "type": "p",
        "text": "When I first encountered Malloy in the wild, the aspect that stood out the most to me was how effortlessly it allows working with nested data. Nested data can be used as both an input and an output in Malloy queries to easily ask complicated questions that require inspecting complex relationships."
      },
      {
        "type": "p",
        "text": "But as a dataviz practioner, Malloy's nested outputs presented a new challenge to me: how do you visualize complex data structures in a consumable way? Since that first encounter, I've joined the Malloy team to work on this problem alongside some great thinkers. Below is a preview of where we are taking Malloy's rendering capabilities, which are available under the experimental <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\">## renderer_next</span></span></code> model annotation."
      }
    ],
    "path": "/blog/2024-02-08-tables/index.malloynb"
  },
  {
    "titles": [
      "Malloy Renders Nested Data",
      "First, Our Dataset"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Let's explore the renderer with an ecommerce model called <strong>order_items</strong>. This model has data about a company's retail clothing sales."
      },
      {
        "type": "p",
        "text": "An example of a view found in this model is <strong>Top Categories</strong>,\nwhich shows which of our product categories are leading in total sales dollars. It is written in the Malloy model as:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">Sales</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">sale_price</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">`Top Categories`</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">`Product Category`</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">Sales</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">top</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">5</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/blog/2024-02-08-tables/index.malloynb"
  },
  {
    "titles": [
      "Malloy Renders Nested Data",
      "Malloy renders a single table of data."
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "We can take any view in our <strong>order_items</strong> model and view the result in a table. The table aligns the columns properly based on data type and sizes to fit the data. Let's look at the <strong>Top Categories</strong> view."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">order_items</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">`Top Categories`</span></span></pre>"
      }
    ],
    "path": "/blog/2024-02-08-tables/index.malloynb"
  },
  {
    "titles": [
      "Malloy Renders Nested Data",
      "Malloy renders multiple tables side by side"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "We are not limited to only one view at a time. Malloy can show tables side by side in the same structure by nesting them in adjacent columns. The output implements proper spacing and alignment to keep the tables separated, but visually cohesive."
      },
      {
        "type": "p",
        "text": "Here, we add a second view from the model called <strong>Top Brands</strong> which tells us which brands are selling the most."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">order_items</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">`Top Categories`</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">`Top Brands`</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/blog/2024-02-08-tables/index.malloynb"
  },
  {
    "titles": [
      "Malloy Renders Nested Data",
      "Malloy renders multiple tables within table rows"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "We are not limited to looking at these views over the context of the entire dataset. We can nest these tables inside other tables in order to analyze our top categories and brands within subsets of the data."
      },
      {
        "type": "p",
        "text": "In this case, we break out by City to see which cities sell the most, and within those cities which categories and brands sell the most."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">order_items</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">City</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">Sales</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">`Top Categories`</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">`Top Brands Margin`</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/blog/2024-02-08-tables/index.malloynb"
  },
  {
    "titles": [
      "Malloy Renders Nested Data",
      "Malloy renders unevenly nested data"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The nested data we render doesn't have to match in breadth or depth. Nested data across different columns can have different numbers of rows, or even deeper levels of nesting. As users navigate these complex results, visual cues like pinned headers appear to help maintain context."
      },
      {
        "type": "p",
        "text": "Here we construct a different view: for our top customers, what are their top categories, favorite brands to purchase, and the last 3 purchases they've made with us?"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">order_items</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">Customer</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">isTopCustomer</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">Sales</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">`Top Categories`</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">`Favorite Brands`</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">`Last 3 Purchases`</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/blog/2024-02-08-tables/index.malloynb"
  },
  {
    "titles": [
      "Malloy Renders Nested Data",
      "Malloy renders deeply nested data"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Data can be nested as deeply as needed. For example, instead of looking at each customer's overall favorite brands, what if we want to know their favorite brands within each of their top categories? We can find that out by making the <strong>Favorite Brands</strong> view a nest of the <strong>Top Categories</strong> view, instead of an adjacent column:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">order_items</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">Customer</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">isTopCustomer</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">Sales</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">`Top Categories`</span><span style=\"color: #000000\"> + { </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">`Favorite Brands`</span><span style=\"color: #000000\"> }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">`Last 3 Purchases`</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">5</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/blog/2024-02-08-tables/index.malloynb"
  },
  {
    "titles": [
      "Malloy Renders Nested Data",
      "Malloy renders formatted numbers"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "So far, we haven't told Malloy how to render anything. But we can give our own instructions on how to visualize the data. These instructions are provided with simple <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">#</span></span></code> tags on the data elements that we want to modify."
      },
      {
        "type": "p",
        "text": "For example, we can format numbers in different ways. Currencies, durations, percentages, and even spreadsheet formatting syntax is supported."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">order_items</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">`Default Format`</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\"># currency</span><span style=\"color: #008000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">Currency</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\"># duration</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">`Duration (seconds)`</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\"># duration</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">minutes</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">`Duration (minutes)`</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\"># number</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">&#39;0.0,,&quot;M&quot;&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">`Spreadsheet format`</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/blog/2024-02-08-tables/index.malloynb"
  },
  {
    "titles": [
      "Malloy Renders Nested Data",
      "Malloy renders charts"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Simple tags can be used to produce charts as well. These charts can be nested inside of tables. When doing so, the charts make sure to align their displays such that all the charts in a column form a cohesive, comparable set of information."
      },
      {
        "type": "p",
        "text": "Here, we look at Customers broken out by their <strong>Top Categories</strong> and <strong>Top Brands</strong>, but tag Top Brands as a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\"># bar</span></span></code> to get a bar chart instead of a nested table."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">order_items</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">Customer</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">isTopCustomer</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">Sales</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">`Top Categories`</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\"># bar</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">`Top Brands`</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/blog/2024-02-08-tables/index.malloynb"
  },
  {
    "titles": [
      "Malloy Renders Nested Data",
      "Malloy renders customized charts"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Charts can be easily customized by setting additional tags and tag properties on a column. From the previous example, we can add size tags to customize the size of the nested <strong>Top Brands</strong> charts."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">order_items</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">Customer</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">isTopCustomer</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">Sales</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">Quantity</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #001080\">`Top Categories`</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\"># bar</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">size.width</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">100</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">size.height</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">200</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #001080\">`Top Brands`</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/blog/2024-02-08-tables/index.malloynb"
  },
  {
    "titles": [
      "Malloy Renders Nested Data",
      "Malloy renders view settings with overrides"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Visual tags can be saved with view definitions in a model. In this case, we have a <strong>Sales by Month Chart</strong> view in our <strong>order_items</strong> model that has already been configured with bar chart settings. We can re-use this bar chart view, while also overriding tags to tweak any settings we want changed. Here, we use the bar chart as is with the expection of changing its size to the preset \"spark\" setting."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">order_items</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">Brand</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">Sales</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\"># size</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">spark</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">`Sales by Month Chart`</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/blog/2024-02-08-tables/index.malloynb"
  },
  {
    "titles": [
      "Malloy Renders Nested Data",
      "Malloy renders charts at all different sizes"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Besides default and custom sizing, Malloy provides preset sizes to make it quick and easy to explore data at different scales on the fly. Depending on the size of the visualization and the amount of data, Malloy tweaks the display of the chart to best support analysis."
      },
      {
        "type": "p",
        "text": "In our model, we have a <strong>top_brands_bar</strong> view that is already configured as a bar chart. We can explore Malloy's preset sizes by nesting the view multiple times, overriding the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\"># size</span></span></code> tag on each column."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">order_items</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">Customer</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">isTopCustomer</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">Sales</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">`default`</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">top_brands_bar</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\"># size</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">spark</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">`spark`</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">top_brands_bar</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\"># size</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">xs</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">`xs`</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">top_brands_bar</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\"># size</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">sm</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">`sm`</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">top_brands_bar</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\"># size</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">md</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">`md`</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">top_brands_bar</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\"># size</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">lg</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">`lg`</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">top_brands_bar</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\"># size</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">xl</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">`xl`</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">top_brands_bar</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\"># size</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">2xl</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">`2xl`</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">top_brands_bar</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">5</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/blog/2024-02-08-tables/index.malloynb"
  },
  {
    "titles": [
      "Malloy Renders Nested Data",
      "Malloy renders deeply nested charts"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "All of the charting features mentioned above work no matter how deeply nested a visualization is. In this example, we deeply nest the <strong>Sales by Month Chart</strong> as a spark. Despite being deeply nested, it still ensures that all instances of the chart in the column conform to the same set of visual properties and scaling."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">order_items</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">City</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">Sales</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">Quantity</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">`Gross Margin`</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">`Key Brands`</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">Brand</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">Sales</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\"># size</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">spark</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">`Sales by Month Chart`</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">3</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">5</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/blog/2024-02-08-tables/index.malloynb"
  },
  {
    "titles": [
      "Malloy Renders Nested Data",
      "Whats Next"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Our next generation renderer is still a work in progress, and we are actively working on expanding the chart types, interactions, customization, and scaling. If you want to try it out early, use the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\">## renderer_next</span></span></code> model tag and give us your feedback in <a href=\"/slack\">our Slack community!</a>"
      }
    ],
    "path": "/blog/2024-02-08-tables/index.malloynb"
  },
  {
    "titles": [
      "Dataviz is Hierarchical"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "If only our data tools agreed"
      },
      {
        "type": "p",
        "text": "<em>February 29, 2024 by Speros Kokenes</em>\n<br/><br/><br/>\n<img src=\"image-22.png\" alt=\"alt text\"/>"
      },
      {
        "type": "p",
        "text": "Data visualization is hierarchical. If that's not obvious to you, don't worry; from the way our data tools work, you would never know it."
      },
      {
        "type": "p",
        "text": "Our data tools want us to think in rectangles. A dataset is defined by a 2D grid of rows and columns. Fit your data into those walls, and then we can talk charting. Point us to some rows and columns, and we will map that to a visual form."
      },
      {
        "type": "p",
        "text": "But what happens when our visual forms don't fit within the confines of those walls?"
      },
      {
        "type": "p",
        "text": "Consider the humble bar chart."
      },
      {
        "type": "p",
        "text": "<img src=\"CleanShot 2024-02-29 at 11.52.12@2x.png\" alt=\"alt text\"/>"
      },
      {
        "type": "p",
        "text": "What are its components? It has a set of rectangles arranged in a series."
      },
      {
        "type": "p",
        "text": "<img src=\"image-3.png\" alt=\"alt text\"/>"
      },
      {
        "type": "p",
        "text": "What does the data look like for this chart? In our tabular form:"
      },
      {
        "type": "p",
        "text": "These map well together. There is 1 bar per row, creating a nice synergy.\n<img src=\"image-4.png\" alt=\"alt text\"/>"
      },
      {
        "type": "p",
        "text": "Let's try something more complex. Add a dimension to make a stacked bar chart."
      },
      {
        "type": "p",
        "text": "<img src=\"CleanShot 2024-02-29 at 12.07.26@2x.png\" alt=\"alt text\"/>"
      },
      {
        "type": "p",
        "text": "What are this chart's components? It has a series of <em>groups of rectangles</em>."
      },
      {
        "type": "p",
        "text": "<img src=\"image-2.png\" alt=\"alt text\"/>"
      },
      {
        "type": "p",
        "text": "What does the annotation above look like? It looks like a tree."
      },
      {
        "type": "p",
        "text": "<img src=\"image-5.png\" alt=\"alt text\"/>"
      },
      {
        "type": "p",
        "text": "We can treat the entire chart as a root node. Within the chart, the visuals are broken up into a series of groups. Within each group, the visuals are broken up into stacked rectangles."
      },
      {
        "type": "p",
        "text": "How does 2D tabular data map to this visual structure? Not well. The rows no longer match the visual form we are creating. Awkward transformations are required to fit square pegs into round holes. Redundant data, like the name of each region, is repeated:"
      },
      {
        "type": "p",
        "text": "<img src=\"image-6.png\" alt=\"alt text\"/>"
      },
      {
        "type": "p",
        "text": "Compare that with mapping to a nested data structure:\n<img src=\"image-7.png\" alt=\"alt text\"/>"
      },
      {
        "type": "p",
        "text": "If we pull on this idea of visualization as a tree, we can easily create denser and more interesting analyses by simply adding levels to the hierarchy."
      },
      {
        "type": "p",
        "text": "We could add a level to group our stacked bars:\n<img src=\"image-10.png\" alt=\"alt text\"/>"
      },
      {
        "type": "p",
        "text": "We could add another level to create rows of our grouped stacked bars:"
      },
      {
        "type": "p",
        "text": "<img src=\"image-11.png\" alt=\"alt text\"/>"
      },
      {
        "type": "p",
        "text": "So on and so forth. The more we do this, the harder it is to map data back to our 2D prison. The awkward reshaping and data redundency compounds."
      },
      {
        "type": "p",
        "text": "But even worse, what if we have a level in our tree that requires its own calculations? Let's go back to our grouped stacked bar chart. What if I wanted to add a total reference line, as well as a reference line per quarter?"
      },
      {
        "type": "p",
        "text": "<img src=\"image-12.png\" alt=\"alt text\"/>"
      },
      {
        "type": "p",
        "text": "We now need new calculations at specific granularities of the data: our global reference line is calculated across all of the data, while our reference line per grouping is only calculated at the group level. In the tabular format, this is as awkward as you can get. There is no way to represent a value at anything but the lowest granularity of the table. Most BI tools provide a dimension-escaping mechanism for writing measures that ignore certain dimensions in a query. While this gets us the result we need, it only exacerbates the reshaping and data redundency problem:"
      },
      {
        "type": "p",
        "text": "<img src=\"CleanShot 2024-02-29 at 14.27.36@2x.png\" alt=\"alt text\"/>"
      },
      {
        "type": "p",
        "text": "In a tree on the other hand, assigning different measures at different granularities is completely natural. We can just define measures associated with a specific level in the hierarchy:"
      },
      {
        "type": "p",
        "text": "<img src=\"image-13.png\" alt=\"alt text\"/>"
      },
      {
        "type": "p",
        "text": "This naturally maps to our chart from before:"
      },
      {
        "type": "p",
        "text": "<img src=\"image-14.png\" alt=\"alt text\"/>"
      }
    ],
    "path": "/blog/2024-02-29-hierarchical-viz/index.malloynb"
  },
  {
    "titles": [
      "Dataviz is Hierarchical",
      "Execution"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "So what can we do? Well first off, we can start using a query language that will give us hierarchical data structures, like Malloy. But even once we have those structures, we need a way to express our mapping from data structure to visual form."
      },
      {
        "type": "p",
        "text": "Can we take a lesson from the most popular nested structure renderer: HTML and CSS? The hottest web dev trend as of late is utility CSS with libraries like <a href=\"https://tailwindcss.com/\">Tailwind CSS</a>. In this approach, a nested HTML structure is styled by applying a series of utility classes directly on the HTML elements:"
      },
      {
        "type": "p",
        "text": "<img src=\"CleanShot 2024-02-29 at 15.06.15@2x.png\" alt=\"alt text\"/>"
      },
      {
        "type": "p",
        "text": "To true believers of this approach, it's never been easier and faster to craft a beautiful UI. To the haters, this disdain for separation of concerns is an affront to God."
      },
      {
        "type": "p",
        "text": "Can we try to apply this same technique to our nested data? Let's try."
      },
      {
        "type": "p",
        "text": "Say we have this query and data:"
      },
      {
        "type": "p",
        "text": "<img src=\"image-15.png\" alt=\"alt text\"/>"
      },
      {
        "type": "p",
        "text": "Let's annotate it as a plot, and mark the fields we want to map to coordinates and visual forms."
      },
      {
        "type": "p",
        "text": "<img src=\"image-16.png\" alt=\"alt text\"/>"
      },
      {
        "type": "p",
        "text": "How about a reference line? Let's reorganize our query to add a level above the bars where we can calculate and draw rule for our reference line:"
      },
      {
        "type": "p",
        "text": "<img src=\"image-17.png\" alt=\"alt text\"/>"
      },
      {
        "type": "p",
        "text": "Let's add a level to make it a grouped bar chart, with each grouped bar chart having it's own reference line. Since our viz system is hierarchical, we can just nest a plot within a plot, just like how in Malloy we nest queries within queries:"
      },
      {
        "type": "p",
        "text": "<img src=\"image-21.png\" alt=\"alt text\"/>"
      },
      {
        "type": "p",
        "text": "For the dataviz nerds out there, perhaps we want to create rows of this form repeated, aka faceting. We can simply add another level for our faceted dimension and mark it as faceting in the y direction:"
      },
      {
        "type": "p",
        "text": "<img src=\"image-19.png\" alt=\"alt text\"/>"
      },
      {
        "type": "p",
        "text": "With a few lines of code, we can write a nested query and turn the hierarchical outputs into a complex visualization. The above is research we are doing on an experimental Plot API for Malloy's data renderer. We'd love to hear your feedback on the <a href=\"/slack\">Malloy Slack</a>."
      }
    ],
    "path": "/blog/2024-02-29-hierarchical-viz/index.malloynb"
  },
  {
    "titles": [
      "Metadata in Malloy: Annotations and Tags"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "<a href=\"https://docs.malloydata.dev/documentation/language/tags\"><em>Annotation</em> and <em>Tagging</em></a> are a pair of features for attaching metadata to objects in a Malloy model.\nThe idea of attaching metadata to fragments of a program is a common one in modern programing languages.\nWhen designing this feature for Malloy, we were not certain what uses there might be for metadata, because a Malloy model is\na slightly different kind of programming and might have slightly different requirments for its metadata."
      },
      {
        "type": "p",
        "text": "Because of this, the main feature of the Malloy design for annotation is that it imposes almost no\nstructure on what kinds of data might be contained in the annotations. Annotations in Malloy are surface\nwhich is flexible and powerful, to allow users of Malloy to investigate the possibilities of\nannotation that we were unable to envision when we designed Malloy."
      },
      {
        "type": "p",
        "text": "Malloy uses annotation sparingly, but we are noticing more projects using Malloy and taking advantage of annotations, and\nnow seemed like a good time to go into a little more detail on the feature so that it would be clear\nhow to take advantage of all the power offered by annotations."
      }
    ],
    "path": "/blog/2025-06-16-annotations-and-tags/index.malloynb"
  },
  {
    "titles": [
      "Metadata in Malloy: Annotations and Tags",
      "Annotations"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Annotations can be attached to models, sources, queries, views, and and field calculations. (e.g. dimensions, measures, caclucations, etc.)\nAn annotation is some text starting with the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">#</span></span></code> character and continuing to the end of the line."
      },
      {
        "type": "p",
        "text": "Annotation lines beginning with <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">##</span></span></code> are applied to the model. Annotations beginning with a single <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">#</span></span></code> are applied to the next object being defined."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\">## (def</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">model-level-notice</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">&quot;This</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">is</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">a</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">model</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">level</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">annotation&quot;)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #0451A5\"># &quot;queryProperties&quot;:</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">{</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">&quot;notice&quot;:</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">&quot;This</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">annotation</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">is</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">attach</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">to</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">the</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">query</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">&#39;first_row&#39;&quot;</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">}</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">query</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">first_row</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">some_src</span><span style=\"color: #000000\"> -&gt; {</span><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">: *; </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "You will notice in these examples that each annotation is written in a different language, this is\njust an example of what is possible.  An application can choose to parse its own annotations any\nway it chooses, or even to not parse them at all and simply use them as free form text. There is a\nMalloy companion property language (Malloy Tag Language) designed to be used with annotations, but\napplications are free to interpret their annotations in any way which make sense to them."
      }
    ],
    "path": "/blog/2025-06-16-annotations-and-tags/index.malloynb"
  },
  {
    "titles": [
      "Metadata in Malloy: Annotations and Tags",
      "Annotations",
      "Annotation Prefixes"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Multiple applications can decorate a Malloy model with annotations, and there is a convention which will\nallow applications to add annotations even without being aware of each other. This is the \"annotation prefix\"."
      },
      {
        "type": "p",
        "text": "When an application requests annotations for an object, a regular expression is passed along with the request,\nand only annotations matching that regular expression are returned. Here are some example annotation usages with\ntheir annotation prefixes:"
      },
      {
        "type": "p",
        "text": "<strong>prefix:</strong> <code>/^# /</code>"
      },
      {
        "type": "p",
        "text": "<strong>prefix:</strong> <code>/^##!/</code>"
      },
      {
        "type": "p",
        "text": "<strong>prefix</strong>: <code>/^#\"/</code>"
      },
      {
        "type": "p",
        "text": "<strong>prefix:</strong> <code>/#(yourApp)/</code>"
      },
      {
        "type": "p",
        "text": "Instructions to the Malloy rendering library"
      },
      {
        "type": "p",
        "text": "Flags to control the Malloy to SQL translator"
      },
      {
        "type": "p",
        "text": "Doc strings for describing objects"
      },
      {
        "type": "p",
        "text": "Parsed by: Nothing yet, this is aspirational. Our intention is this would be where developer documentation\nfor reusable components in Malloy models would be written, allowing an IDE to use the annotations to offer information to developers."
      },
      {
        "type": "p",
        "text": "Example: <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\"># chart</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">{</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">type</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">bar</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">variant</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">stacked</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">}</span></span></code>"
      },
      {
        "type": "p",
        "text": "Example: <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">##! experimental { featureName1 }</span></span></code>"
      },
      {
        "type": "p",
        "text": "Example: <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #008000\">#&quot; This source requires a date filter expression (fex)</span></span></code>"
      },
      {
        "type": "p",
        "text": "Annotations for the app <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">yourApp</span></span></code>"
      },
      {
        "type": "p",
        "text": "Example: <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">#(docs) size=medium</span></span></code>"
      },
      {
        "type": "p",
        "text": "We use the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">(</span><span style=\"color: #001080\">docs</span><span style=\"color: #000000\">)</span></span></code> prefix internally to attach formatting instructions for the Malloy documentation package."
      },
      {
        "type": "p",
        "text": "Parsed by the renderer using the Malloy Tag Language (See the <a href=\"https://github.com/malloydata/malloy/blob/main/packages/malloy-render/docs/renderer_tags_overview.md\">Render Tag Documentaion</a>)"
      },
      {
        "type": "p",
        "text": "Parsed by the Malloy translator, alsing using the Malloy Tag Language (See <a href=\"https://docs.malloydata.dev/documentation/experiments/experiments\">Experimental Features</a>)"
      }
    ],
    "path": "/blog/2025-06-16-annotations-and-tags/index.malloynb"
  },
  {
    "titles": [
      "Metadata in Malloy: Annotations and Tags",
      "Annotations",
      "Indirect Annotations"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "In addition to annotations directly placed on an object, there are two other ways for an object to have annotation metadata."
      },
      {
        "type": "p",
        "text": "If one object is an extension, or refinement of an existing object, it will have all the annotations of the object it is based on, as well as it's own annotations. For example"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #008000\">// this will render as a bar chart</span></span>\n<span class=\"line\"><span style=\"color: #0451A5\"># bar_chart</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_color</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> { </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">color</span><span style=\"color: #000000\">; </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">thing_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">() }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #008000\">// will &quot;inherit&quot; the bar_char annotation from by_color</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_color_and_size</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">by_color</span><span style=\"color: #000000\"> + { </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">size</span><span style=\"color: #000000\"> }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #008000\">// will show the by_color bar chart, only for the most common colors</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">top_colors</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">by_color</span><span style=\"color: #000000\"> + { </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\"> }</span></span></pre>"
      },
      {
        "type": "p",
        "text": "The other indirect way annotations can be placed on an object is available to objects which can be defined with a single statement"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #008000\">// Every measure defined in this measure statement will have the &quot;private&quot; annotation, in addition</span></span>\n<span class=\"line\"><span style=\"color: #008000\">// to any annotations on the actual object.</span></span>\n<span class=\"line\"><span style=\"color: #0451A5\"># private</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\"># currency</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">US_DOLLARS</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">total_revenue</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">revenue</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\"># font_color</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">green</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">profitable</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">pick</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;Yes&#39;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">when</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">revenue</span><span style=\"color: #000000\">) &gt; </span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">cost</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">else</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;No&#39;</span></span></pre>"
      }
    ],
    "path": "/blog/2025-06-16-annotations-and-tags/index.malloynb"
  },
  {
    "titles": [
      "Metadata in Malloy: Annotations and Tags",
      "The Malloy Tag Language"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "In some of the examples above we showed annotations intended be be parsed by an S-Expression parser and a JSON Parser,\nbut Malloy also has its own language for writing simple property-value data structures, the Malloy Tag Language."
      },
      {
        "type": "p",
        "text": "More details on the tag language <a href=\"https://docs.malloydata.dev/documentation/language/tags#tag-property-language\">are in the documentation</a>,\nbut here is a quick overview to give a flavor of the language."
      }
    ],
    "path": "/blog/2025-06-16-annotations-and-tags/index.malloynb"
  },
  {
    "titles": [
      "Metadata in Malloy: Annotations and Tags",
      "The Malloy Tag Language",
      "Tag Values"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "A tag has a value which can be a string or an array of values"
      },
      {
        "type": "p",
        "text": "A string can be quoted, but if it is a simple series of alphanumeric chartacters it can also be unquoted"
      },
      {
        "type": "p",
        "text": "An array is written using <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">[ ]</span></span></code> to bracket the contents (e.g. <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">[</span><span style=\"color: #001080\">mark</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">mack</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">molly</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">mandy</span><span style=\"color: #000000\">]</span></span></code>)"
      },
      {
        "type": "p",
        "text": "There is no boolean value, while you can use the strings <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">true</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">false</span></span></code> as values, the intention\nis that true/false conditions are indicated by presence/absence of a tag"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-txt\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">go_color=green</span></span>\n<span class=\"line\"><span style=\"color: #000000\">stop_color=&quot;red&quot;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">slow_colors=[yellow orange &quot;yellowish orange&quot;]</span></span>\n<span class=\"line\"><span style=\"color: #000000\"></span></span>\n<span class=\"line\"><span style=\"color: #000000\">// a boolean ..</span></span>\n<span class=\"line\"><span style=\"color: #000000\">slowdown</span></span>\n<span class=\"line\"><span style=\"color: #000000\">// turning off a boolean</span></span>\n<span class=\"line\"><span style=\"color: #000000\">-slowdown</span></span></pre>"
      }
    ],
    "path": "/blog/2025-06-16-annotations-and-tags/index.malloynb"
  },
  {
    "titles": [
      "Metadata in Malloy: Annotations and Tags",
      "The Malloy Tag Language",
      "Tag Properties"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "This is unlike other property languages. A tag, in addition to values, can also have properties."
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">{}</span></span></code> can be used to specify a number of properties at once"
      },
      {
        "type": "p",
        "text": "Properties on a tag can be set using the familiar <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">.</span></span></code> (dot) gesture"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-txt\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">slow_colors=[yellow orange &quot;yellowish orange&quot;]</span></span>\n<span class=\"line\"><span style=\"color: #000000\">slow_colors.flashing</span></span>\n<span class=\"line\"><span style=\"color: #000000\">slow_colors { blinks_per_minute=10 safetymode }</span></span></pre>"
      }
    ],
    "path": "/blog/2025-06-16-annotations-and-tags/index.malloynb"
  },
  {
    "titles": [
      "Metadata in Malloy: Annotations and Tags",
      "Sample Code For Annotation Usage"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "For some example metadata markup which looks like this ..."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #008000\">// some documentation</span></span>\n<span class=\"line\"><span style=\"color: #A31515\">#(myDoc) This is a lot of documentation</span></span>\n<span class=\"line\"><span style=\"color: #A31515\">#(myDoc) across many lines</span></span>\n<span class=\"line\"><span style=\"color: #008000\">// and some properties</span></span>\n<span class=\"line\"><span style=\"color: #A31515\">#(myTags) force default=go </span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> ...</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Here is some code which might be written to access the metadata\non an object from the Malloy API which has annotations."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-typescript\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">myTagsAndDocs</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">Taggable</span><span style=\"color: #000000\">): { </span><span style=\"color: #001080\">tags</span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">Tag</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">docs</span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">[] } {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">tagParse</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">tagParse</span><span style=\"color: #000000\">({</span><span style=\"color: #001080\">prefix:</span><span style=\"color: #811F3F\"> /</span><span style=\"color: #EE0000\">^</span><span style=\"color: #811F3F\">#</span><span style=\"color: #EE0000\">\\(</span><span style=\"color: #811F3F\">myTags</span><span style=\"color: #EE0000\">\\)</span><span style=\"color: #811F3F\">/</span><span style=\"color: #000000\">});</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">tagParse</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">log</span><span style=\"color: #000000\">) {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// deal with syntax errors, or ignore them</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">Error</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;syntax errors in tag parse&#39;</span><span style=\"color: #000000\">);</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        </span><span style=\"color: #001080\">tags:</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">tagParse</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">tag</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        </span><span style=\"color: #001080\">docs:</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">getTaglines</span><span style=\"color: #000000\">(</span><span style=\"color: #811F3F\">/</span><span style=\"color: #EE0000\">^</span><span style=\"color: #811F3F\">#</span><span style=\"color: #EE0000\">\\(</span><span style=\"color: #811F3F\">myDocs</span><span style=\"color: #EE0000\">\\)</span><span style=\"color: #811F3F\">/</span><span style=\"color: #000000\">),</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    };</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #008000\">// ...</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">metadata</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">myTagsAndDocs</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">someObj</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">metadata</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">tags</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">has</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;force&#39;</span><span style=\"color: #000000\">)) </span><span style=\"color: #795E26\">do_force_action</span><span style=\"color: #000000\">();</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">metadata</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">tags</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">has</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;default&#39;</span><span style=\"color: #000000\">)) </span><span style=\"color: #795E26\">set_default</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">metadata</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">tags</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">text</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;default&#39;</span><span style=\"color: #000000\">));</span></span>\n<span class=\"line\"><span style=\"color: #795E26\">setDocs</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">metadata</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">docs</span><span style=\"color: #000000\">);</span></span></pre>"
      }
    ],
    "path": "/blog/2025-06-16-annotations-and-tags/index.malloynb"
  },
  {
    "titles": [
      "Metadata in Malloy: Annotations and Tags",
      "The Future of Annotation"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "We are waiting to see how annotations are used. We have many ideas for the future, but\nwe have decided on \"wait and learn\" approach for this feature. Things we have talked about\nare ..."
      },
      {
        "type": "p",
        "text": "Some syntax for annotation metadata which is longer than one line"
      },
      {
        "type": "p",
        "text": "More formality on \"annotation prefixes\", perhaps requiring prefixes to match a pattern,\nor maybe some sort of \"prefix registry\" to make certain applications do not\ninadvertantly affect metadata from other applications."
      },
      {
        "type": "p",
        "text": "More formality on which annotations are tags, and what the \"schema\" is for a tagged\nannotation, allowing the IDE to assist in tagging complex objects."
      }
    ],
    "path": "/blog/2025-06-16-annotations-and-tags/index.malloynb"
  },
  {
    "titles": [
      "Malloy's Features"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "SQL is a powerful language that can express any possible query, but it has its downsides: everything is expressible, but nothing is reusable; simple ideas are complex to express; the language is verbose and lacks smart defaults. Malloy is immediately understandable by SQL users, and far easier to use and learn."
      }
    ],
    "path": "/documentation/about/features.malloynb"
  },
  {
    "titles": [
      "Malloy's Features",
      "Reusable Analytical Data Model"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Common calculations, table relationships and reusable queries can all be encoded in a Malloy\nData Model.  Malloy queries (equivalent of SQL's <code>SELECT</code>) run against the data model and\nproduce SQL."
      }
    ],
    "path": "/documentation/about/features.malloynb"
  },
  {
    "titles": [
      "Malloy's Features",
      "Filtering Data"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Often, the first step in working with data is isolating the data you are interested in.\nMalloy introduces <a href=\"../language/filters\">simplified filtering</a> for all types and allows these filters to be\napplied.  <a href=\"../language/expressions#time-expressions\">Time calculations</a> are powerful and understandable."
      }
    ],
    "path": "/documentation/about/features.malloynb"
  },
  {
    "titles": [
      "Malloy's Features",
      "Reusable Aggregates"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "In a Malloy Data Model, an aggregate computation need only be defined once (for example revenue).  Once defined, it can be used\nin any query at any level of granularity or dimensionality. Malloy retains enough information in the data graph\nto perform this calculation no matter how you ask for it. Reusable Aggregates help improve accuracy."
      }
    ],
    "path": "/documentation/about/features.malloynb"
  },
  {
    "titles": [
      "Malloy's Features",
      "Reusable Dimensional calculations"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Dimensions (scalar calculations) can also be introduced into the model. Dimensional calculations are useful\nmapping values, bucketing results, and data cleanup."
      }
    ],
    "path": "/documentation/about/features.malloynb"
  },
  {
    "titles": [
      "Malloy's Features",
      "Maintains Relationships"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "SQL's <code>SELECT</code> statement flattens the namespace into a wide table. Malloy retains the graph relationship\nof data and lets you access and correctly perform computations at any place in the graph."
      }
    ],
    "path": "/documentation/about/features.malloynb"
  },
  {
    "titles": [
      "Malloy's Features",
      "Reusable Queries"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Queries can be introduced into a Malloy model and accessed by name. Think of a Malloy model as a data function library.\nViews can also be used to create <a href=\"../language/nesting\">nested subtables</a> in other queries."
      }
    ],
    "path": "/documentation/about/features.malloynb"
  },
  {
    "titles": [
      "Malloy's Features",
      "Aggregating Subqueries"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy easily produces nested results. Entire dashboards can be fetched in a single query.\nNamed views of a given shape can easily be nested, visualized and reused."
      }
    ],
    "path": "/documentation/about/features.malloynb"
  },
  {
    "titles": [
      "Malloy's Features",
      "Pipelines"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy can pipeline operations. The output of one query can be the input for next."
      }
    ],
    "path": "/documentation/about/features.malloynb"
  },
  {
    "titles": [
      "Malloy's Features",
      "Metadata, Visualization and Drilling"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Compiling a Malloy query returns metadata about the structure of the results. When combined with the query results, Malloy's rendering library can give a very\nrich user experience, rendering dashboards, visualizations.  Through this metadata\nthe visualization library can rewrite queries to drill through to data detail."
      }
    ],
    "path": "/documentation/about/features.malloynb"
  },
  {
    "titles": [
      "The Tao of Malloy"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "<em>Tao is the natural order of the universe whose character one's human intuition must discern in order to realize the potential for individual wisdom. This intuitive knowing of \"life\" cannot be grasped as a concept; it is known through actual living experience of one's everyday being.</em> — <a href=\"https://en.wikipedia.org/wiki/Tao\">Wikipedia \"Tao\"</a>"
      }
    ],
    "path": "/documentation/about/tao.malloynb"
  },
  {
    "titles": [
      "The Tao of Malloy",
      "Malloy …"
    ],
    "paragraphs": [],
    "path": "/documentation/about/tao.malloynb"
  },
  {
    "titles": [
      "The Tao of Malloy",
      "Malloy …",
      "… feels familiar to someone coming from SQL"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Our primary users will all be familiar with SQL. We should make their life no harder than it needs to be. That said, Malloy is actually describing a different type of operation than SQL does, and so in some places we are deliberately different from SQL because we want people to be unfamiliar, to learn how Malloy works."
      },
      {
        "type": "p",
        "text": "For example <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">name</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">expression</span></span></code>, vs <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">expression</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">name</span></span></code>. In SQL the naming on an expression sits as a casual afterthought \"oh by the way, give this really important expression a name.\" In Malloy, the name of a thing is important; you are building complex things from smaller pieces. When you look at a model, you will often want to scan the file looking for names, so they belong on the left hand side."
      },
      {
        "type": "p",
        "text": "However, we in general try to have the \"feel\" of SQL. We use SQL words for things (like <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">join</span></span></code>) where it makes sense."
      },
      {
        "type": "p",
        "text": "The intention was always that there is some context, command line or editor, which handles a single document with mixed Malloy and SQL, either because they are one merged language, or there is some JSX-like escaping between the contexts. Today, <code>.malloysql</code> files serve as one instantiation of this idea."
      }
    ],
    "path": "/documentation/about/tao.malloynb"
  },
  {
    "titles": [
      "The Tao of Malloy",
      "Malloy …",
      "… feels concise, but not cryptic"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "This is the most common point of disagreement as we talk about how to express things. There is no one right answer to this. We have a preference for brevity, every single feature we wrestle with trying to get the most clarity from the least language surface."
      }
    ],
    "path": "/documentation/about/tao.malloynb"
  },
  {
    "titles": [
      "The Tao of Malloy",
      "Malloy …",
      "… is composable"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "If you find a piece of code that works, you should be able to select it, paste it somewhere with a name, and use it by name."
      }
    ],
    "path": "/documentation/about/tao.malloynb"
  },
  {
    "titles": [
      "The Tao of Malloy",
      "Malloy …",
      "… is an algebra for computations with relational data"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy comprehends data as a network of relationships and so computations like aggregation have a useful and mathematical meaning. Malloy gestures should read like a mathematical formula which means one clear thing."
      }
    ],
    "path": "/documentation/about/tao.malloynb"
  },
  {
    "titles": [
      "The Tao of Malloy",
      "Malloy …",
      "… is NOT an attempt to make the language look like English sentences"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Maybe AppleScript or COBOL would be at the extreme end of this. More of a kind of math, less like a natural language."
      }
    ],
    "path": "/documentation/about/tao.malloynb"
  },
  {
    "titles": [
      "The Tao of Malloy",
      "Malloy …",
      "… is curated"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "There are not four different ways to express things depending on which programming language or style you came from. There is one, and it is carefully chosen to match the task of data transformation, discovery and presentation."
      }
    ],
    "path": "/documentation/about/tao.malloynb"
  },
  {
    "titles": [
      "The Tao of Malloy",
      "Malloy …",
      "… is helpful"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy tries to \"do the right thing\" that most people want, by default, while still allowing non-default expressions to be written. The treatment of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">null</span></span></code> and booleans, and the sorting rules for \"reduce\" stages would be two examples of this."
      }
    ],
    "path": "/documentation/about/tao.malloynb"
  },
  {
    "titles": [
      "The Tao of Malloy",
      "Malloy …",
      "… is a living language"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "We had some theoretical insights that there was a better way to interact with data than SQL, and Malloy is the current snapshot of that thinking, but we are not done. We have a number of features which are not yet in the language, which we expect to have an impact on the language, and maybe even on these rules. The language is still young and needs room to grow."
      }
    ],
    "path": "/documentation/about/tao.malloynb"
  },
  {
    "titles": [
      "The Tao of Malloy",
      "Malloy …",
      "… is an expression of empathy towards explorers and explainers of data"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The Malloy user is not someone who writes one sentence in Malloy, and then never sees the language again. Malloy is an invitation into a \"way\" for people who are passionate about decision making based on data, and good decision making is iterative and ongoing."
      }
    ],
    "path": "/documentation/about/tao.malloynb"
  },
  {
    "titles": [
      "Pick values must match"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The types of each <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">pick</span></span></code> (and the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">else</span></span></code> if it is present), in a pick statement must match.\nA message <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;TYPENAME&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">expected</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;TYPENAME&#39;</span></span></code> indicates that the referenced source line\ncontains an expression whose type does not match the first <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">pick</span></span></code> in the pick statement. For example,\nthe following code would generate this error"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-txt\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">select: bad_pick is pick 1 when true else &#39;one&#39;</span></span></pre>"
      }
    ],
    "path": "/documentation/error_dictionary.malloynb"
  },
  {
    "titles": [
      "Unsupported SQL native type not allowed in expression"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "This error is most commonly generated when an expression is encountered where the types of the left and right side of a binary operation ( such as comparison ) do not match, and one of the values is a native SQL data type which doesn't have an equivalent Malloy datatype."
      },
      {
        "type": "p",
        "text": "The operations which are legal in Malloy with one of these native, but unsupported types are:"
      },
      {
        "type": "p",
        "text": "Cast the value to another type"
      },
      {
        "type": "p",
        "text": "Compare the value to NULL"
      },
      {
        "type": "p",
        "text": "Compare the value to another value of the same type"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">:</span></span></code> or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">:</span></span></code> the value in a query"
      }
    ],
    "path": "/documentation/error_dictionary.malloynb"
  },
  {
    "titles": [
      "Composite \"Cube\" Sources"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Composite sources in Malloy are virtualized sources which are backed by multiple other tables or sources. This is useful for handling cubed / rolled up data."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">##! experimental { composite_sources }</span></span></pre>"
      }
    ],
    "path": "/documentation/experiments/composite_sources.malloynb"
  },
  {
    "titles": [
      "Composite \"Cube\" Sources",
      "Syntax"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">composite_source</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">compose</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">base_one</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">base_two</span><span style=\"color: #000000\">, ...) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ... extra definitions</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/experiments/composite_sources.malloynb"
  },
  {
    "titles": [
      "Composite \"Cube\" Sources",
      "Simple Example"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Suppose our <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">airports</span></span></code> table has billions of rows instead of the thousands it actually has. Querying such a table would be extremely expensive, and most often not very useful. A common strategy for analysis on extremely large datasets is to roll up or \"cube\" the data. Let's look at how composite sources can help us query this kind of data."
      },
      {
        "type": "p",
        "text": "One kind of analysis that might be common with our <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">airports</span></span></code> table is to look at number of airports by state. We'll start with a simplified <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">airports</span></span></code> source with only the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">airport_code</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">state</span></span></code>."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">accept</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">code</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">rename</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_code</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">code</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "We can roll up this table by performing a query like this:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Now suppose we store the result in a table called <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">state_facts</span></span></code>. We can then create a source based on that table which will allow us to perform analysis on number of aiports per state much more efficiently."
      },
      {
        "type": "p",
        "text": "Note how we rename <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">airport_count</span></span></code> to <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">state_airport_count</span></span></code>, then redefine <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">airport_count</span></span></code> as a sum of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">state_airport_count</span></span></code>s."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state_facts</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/state_facts.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">accept</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">rename</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state_airport_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">state_airport_count</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state_facts</span><span style=\"color: #000000\"> -&gt; { </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">desc</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "This is great, but if we have many different levels of rollup which we would like to query consistently, having to choose which base source to use is error-prone and tedious. This is where composite sources help us. We can define a composite source <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">airports_composite</span></span></code>, which is backed by both <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">airports</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">state_facts</span></span></code>. Depending on the query, Malloy will automatically select which to use."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports_composite</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">compose</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">state_facts</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Now if we run a query that only uses <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">state</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">airport_count</span></span></code>, we will use <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">state_facts</span></span></code>, but if we use <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">airport_code</span></span></code>, we will fall back to the full <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">airports</span></span></code> table. You can view the SQL tab to see that each query is backed by the appropriate table."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports_composite</span><span style=\"color: #000000\"> -&gt; { </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span><span style=\"color: #000000\">; </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports_composite</span><span style=\"color: #000000\"> -&gt; { </span><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_code</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">state</span><span style=\"color: #000000\"> }</span></span></pre>"
      }
    ],
    "path": "/documentation/experiments/composite_sources.malloynb"
  },
  {
    "titles": [
      "Composite \"Cube\" Sources",
      "Composite Sources Based on Partitions"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Another common pattern is to define multiple levels of roll up in the same table with different partitions. We can generate a table with multiple levels of rollup by using <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">GROUPING</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">SETS</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">GROUPING_ID</span></span></code>."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-sql\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">SELECT</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  code,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">state</span><span style=\"color: #000000\">, </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  county,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  fac_type,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">CASE</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">GROUPING_ID</span><span style=\"color: #000000\">(code, </span><span style=\"color: #0000FF\">state</span><span style=\"color: #000000\">, county, fac_type) </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">WHEN</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">THEN</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;code.state.county.fac_type&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">WHEN</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">8</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">THEN</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;state.county.fac_type&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">WHEN</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">9</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">THEN</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;state.county&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">WHEN</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">10</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">THEN</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;state.fac_type&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">WHEN</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">12</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">THEN</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;county.fac_type&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">WHEN</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">11</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">THEN</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;state&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">WHEN</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">13</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">THEN</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;county&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">WHEN</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">14</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">THEN</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;fac_type&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">ELSE</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">END</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">AS</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;rollup&#39;</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">COUNT</span><span style=\"color: #000000\">() </span><span style=\"color: #0000FF\">AS</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;num_facilities&#39;</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">COUNT</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">CASE</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">WHEN</span><span style=\"color: #000000\"> fac_type=</span><span style=\"color: #A31515\">&#39;HELIPORT&#39;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">THEN</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">END</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">AS</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;num_heliports&#39;</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">COUNT</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">CASE</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">WHEN</span><span style=\"color: #000000\"> fac_type=</span><span style=\"color: #A31515\">&#39;AIRPORT&#39;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">THEN</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">END</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">AS</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;num_airports&#39;</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">COUNT</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">CASE</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">WHEN</span><span style=\"color: #000000\"> cntl_twr=</span><span style=\"color: #A31515\">&#39;Y&#39;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">THEN</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">END</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">AS</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;num_control_towers&#39;</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">FROM</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">GROUP BY</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">GROUPING</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">SETS</span><span style=\"color: #000000\"> (</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  (code, </span><span style=\"color: #0000FF\">state</span><span style=\"color: #000000\">, county, fac_type),</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  (</span><span style=\"color: #0000FF\">state</span><span style=\"color: #000000\">, county, fac_type),</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  (</span><span style=\"color: #0000FF\">state</span><span style=\"color: #000000\">, county),</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  (</span><span style=\"color: #0000FF\">state</span><span style=\"color: #000000\">, fac_type),</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  (county, fac_type),</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  (</span><span style=\"color: #0000FF\">state</span><span style=\"color: #000000\">),</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  (county),</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  (fac_type),</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  ()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">facilities_with_rollups</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/facilities_with_rollups.parquet&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">facilities_with_rollups</span><span style=\"color: #000000\"> -&gt; { </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">num_airports</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">num_airports</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">desc</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">rollup</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;state&#39;</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">facilities_with_rollups</span><span style=\"color: #000000\"> -&gt; { </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">county</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">num_airports</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">num_airports</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">desc</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">rollup</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;state.county&#39;</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Given this table, we can define our backing sources."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">`facilities:code.state.county.fac_type`</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">facilities_with_rollups</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">rollup</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;code.state.county.fac_type&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">`facilities:state.county.fac_type`</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">facilities_with_rollups</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">accept</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">rollup</span><span style=\"color: #000000\">, </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">state</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">county</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">fac_type</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">num_facilities</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">num_airports</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">num_heliports</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">num_control_towers</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">rollup</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;state.county.fac_type&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">`facilities:state.county`</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">facilities_with_rollups</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">accept</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">rollup</span><span style=\"color: #000000\">, </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">state</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">county</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">num_facilities</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">num_airports</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">num_heliports</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">num_control_towers</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">rollup</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;state.county&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">`facilities:state.fac_type`</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">facilities_with_rollups</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">accept</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">rollup</span><span style=\"color: #000000\">, </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">state</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">fac_type</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">num_facilities</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">num_airports</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">num_heliports</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">num_control_towers</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">rollup</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;state.fac_type&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">`facilities:county.fac_type`</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">facilities_with_rollups</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">accept</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">rollup</span><span style=\"color: #000000\">, </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">county</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">fac_type</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">num_facilities</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">num_airports</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">num_heliports</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">num_control_towers</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">rollup</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;county.fac_type&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">`facilities:state`</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">facilities_with_rollups</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">accept</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">rollup</span><span style=\"color: #000000\">, </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">state</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">num_facilities</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">num_airports</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">num_heliports</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">num_control_towers</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">rollup</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;state&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">`facilities:county`</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">facilities_with_rollups</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">accept</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">rollup</span><span style=\"color: #000000\">, </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">county</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">num_facilities</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">num_airports</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">num_heliports</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">num_control_towers</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">rollup</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;county&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">`facilities:fac_type`</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">facilities_with_rollups</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">accept</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">rollup</span><span style=\"color: #000000\">, </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">fac_type</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">num_facilities</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">num_airports</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">num_heliports</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">num_control_towers</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">rollup</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;fac_type&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">`facilities:`</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">facilities_with_rollups</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">accept</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">rollup</span><span style=\"color: #000000\">, </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">num_facilities</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">num_airports</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">num_heliports</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">num_control_towers</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">rollup</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">facilities</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">compose</span><span style=\"color: #000000\">(</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #001080\">`facilities:`</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #001080\">`facilities:fac_type`</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #001080\">`facilities:county`</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #001080\">`facilities:state`</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #001080\">`facilities:county.fac_type`</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #001080\">`facilities:state.fac_type`</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #001080\">`facilities:state.county`</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #001080\">`facilities:state.county.fac_type`</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #001080\">`facilities:code.state.county.fac_type`</span></span>\n<span class=\"line\"><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">facility_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">num_facilities</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">num_airports</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">heliport_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">num_heliports</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">control_tower_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">num_control_towers</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">facilities</span><span style=\"color: #000000\"> -&gt; { </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">facility_count</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">heliport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">facilities</span><span style=\"color: #000000\"> -&gt; { </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">facility_count</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">heliport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">facilities</span><span style=\"color: #000000\"> -&gt; { </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">fac_type</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">heliport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">facilities</span><span style=\"color: #000000\"> -&gt; { </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">code</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">state</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Here we can see that in each of these queries, we use the same <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">&#39;facilities_with_rollups.parquet&#39;</span></span></code> table, but with different filters on <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">rollup</span></span></code> depending on which fields are used."
      }
    ],
    "path": "/documentation/experiments/composite_sources.malloynb"
  },
  {
    "titles": [
      "Composite \"Cube\" Sources",
      "Detailed Behavior"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Which input source is chosen depends on which fields are used in a given query: the first source listed in the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">compose</span><span style=\"color: #000000\">()</span></span></code> which has definitions for all fields used in the query will be selected. If a composite source is joined into another source (composite or not), queries against that source will also resolve the composite source according to the same strategy."
      }
    ],
    "path": "/documentation/experiments/composite_sources.malloynb"
  },
  {
    "titles": [
      "Composite \"Cube\" Sources",
      "Limitations of the Experiment"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Views and joins defined in backing sources are not supported; currently they are ignored with a warning"
      },
      {
        "type": "p",
        "text": "Indexing a composite source will not work, and will generate SQL with placeholder values; no validation of cube fields will happen"
      },
      {
        "type": "p",
        "text": "Composite fields used in <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">on</span></span></code> clauses of always joins which are not referenced elsewhere in the query will not be counted"
      },
      {
        "type": "p",
        "text": "Joins of composite sources appearing in <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">extend</span></span></code> blocks in subsequent stages will not be resolved, resulting in bad SQL generation (SQL will contain placeholder fields, and will not compile)"
      }
    ],
    "path": "/documentation/experiments/composite_sources.malloynb"
  },
  {
    "titles": [
      "Experimental Features"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Before releasing language features, we like to get a feel for how they work when used in programs.  We often find bugs or language problems.  We like when people use these features with the understanding that they might changed in their final form or never be released."
      },
      {
        "type": "p",
        "text": "We value feedback during the experimental phase.  Please make sure you let us know what you think."
      },
      {
        "type": "p",
        "text": "Below is a list of currently running experiements and how to turn them on."
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">##! experimental.join_types</span></span></code> - <a href=\"joins\">Additional Join Type</a>"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\">## renderer_next</span></span></code> - <a href=\"renderer\">New table and visualization Rendering</a>"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">##! experimental { function_order_by partition_by aggregate_limit }</span></span></code> - <a href=\"window\">ordering and partitioning in calculations</a>"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">##! experimental.sql_functions</span></span></code> - <a href=\"sql_expressions\">Write expression in SQL</a>"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">##! experimental.parameters</span></span></code> - <a href=\"parameters\">Declare sources with parameters</a>"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">##! experimental.composite_sources</span></span></code> - <a href=\"composite_sources\">Create virtual sources backed by multiple cube tables or source definitions</a>"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">##! experimental.access_modifiers</span></span></code> - <a href=\"include\">Limit access to fields in a source</a>"
      }
    ],
    "path": "/documentation/experiments/experiments.malloynb"
  },
  {
    "titles": [
      "Access Modifiers Experiment"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "When developing Malloy models, it is fairly common to have a table which has more fields than you need, or fields which are useful for intermediary computation but should not be part of the external interface of the modeled source. To enable better curation of sources, we've added a new experiment for specifying access modifiers on fields, as well as modifiying access when extending a source."
      },
      {
        "type": "p",
        "text": "Enable the access modifiers experiment with:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">##! experimental.access_modifiers</span></span></pre>"
      }
    ],
    "path": "/documentation/experiments/include.malloynb"
  },
  {
    "titles": [
      "Access Modifiers Experiment",
      "Access Levels"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "This experiment adds three access levels to Malloy:"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">public</span></span></code> - A field which may be used in queries against the source"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">internal</span></span></code> - A field which may not be used in queries, but can be used in definitions in extensions of the source"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">private</span></span></code> - A field which may not be used in queries or definitions in extensions of the source"
      }
    ],
    "path": "/documentation/experiments/include.malloynb"
  },
  {
    "titles": [
      "Access Modifiers Experiment",
      "Specifying Access Level"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Any definition inside a source may be prefixed with an access modifier label (<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">public</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">internal</span></span></code>, or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">private</span></span></code>):"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">private</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">only_in_flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> ...</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Can reference private dimensions in the original source</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">exposed</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">only_in_flights</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights_ext</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Error: `only_in_flights` is private, so it cannot be used in an extension</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">exposed_2</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">only_in_flights</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #008000\">// Error: `only_in_flights` is private, so it cannot be used in a query</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; { </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">only_in_flights</span><span style=\"color: #000000\"> }</span></span></pre>"
      }
    ],
    "path": "/documentation/experiments/include.malloynb"
  },
  {
    "titles": [
      "Access Modifiers Experiment",
      "Changing Access When Extending Sources"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "When extending a source, you can change the access of fields by using the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">include</span></span></code> operator before the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">extend</span></span></code>, with the following rules:"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">public</span></span></code> fields may be narrowed to <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">internal</span></span></code> or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">private</span></span></code>"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">internal</span></span></code> fields may be narrowed to <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">private</span></span></code> or expanded to <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">public</span></span></code>"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">private</span></span></code> fields may not be expanded to either <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">internal</span></span></code> or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">public</span></span></code>"
      },
      {
        "type": "p",
        "text": "The <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">include</span></span></code> operator allows you to specify a series of fields, optionally with new labels. The wildcard <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">*</span></span></code> may be used to reference all fields not specified in another rule."
      },
      {
        "type": "p",
        "text": "Any field not listed in the include (unless <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">*</span></span></code> is used) will <em>not</em> be included in the resulting source. Fields can be explicitly called out to be excluded by using <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">except</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">field_1</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">field_2</span><span style=\"color: #000000\">, ...</span></span></code>."
      },
      {
        "type": "p",
        "text": "Note that in an <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">extend</span></span></code> immediately following an <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">include</span></span></code>, fields made private in the include block are available for use in that extend block (but not subsequent ones)."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">include</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">private</span><span style=\"color: #000000\">: *</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">public</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">distance</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">origin</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">destination</span></span>\n<span class=\"line\"><span style=\"color: #000000\">} </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// This is allowed</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier_copy</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/experiments/include.malloynb"
  },
  {
    "titles": [
      "Access Modifiers Experiment",
      "Changing Access When Extending Sources",
      "Examples"
    ],
    "paragraphs": [],
    "path": "/documentation/experiments/include.malloynb"
  },
  {
    "titles": [
      "Access Modifiers Experiment",
      "Changing Access Without Extending"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "You can also limit access to a source (thus defining a new source) without <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">extend</span></span></code>ing:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">include</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  *</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">private</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">distance</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/experiments/include.malloynb"
  },
  {
    "titles": [
      "Access Modifiers Experiment",
      "Changing Access Without Extending",
      "Interaction with Composite Sources"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">private</span></span></code> fields are not included in composite sources. If all input sources have a field which is <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">private</span></span></code>, that field will not be part of the composite source's interface. If the field is only private in some input sources, then use of that field in the composite source will disqualify those input sources from being chosen during composite source resolution."
      },
      {
        "type": "p",
        "text": "If any instance of a field in any input source is <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">internal</span></span></code>, that field will be <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">internal</span></span></code> in the composite source."
      }
    ],
    "path": "/documentation/experiments/include.malloynb"
  },
  {
    "titles": [
      "join_types"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Allow you to use INNER, RIGHT and FULL joins."
      },
      {
        "type": "p",
        "text": "We'll likely allow this syntax in Queries, but probably not in sources (it can create confusion).  At the moment this syntax works everywhere."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-txt\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">join_&lt;one|many&gt;: foo [&lt;left|inner|right|full&gt;] on ... </span></span></pre>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">##! experimental {join_types}</span></span></pre>"
      }
    ],
    "path": "/documentation/experiments/joins.malloynb"
  },
  {
    "titles": [
      "Example Usage."
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Two sources, flights an carriers."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/carriers.parquet&#39;</span><span style=\"color: #000000\">) -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">nickname</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;Southwest&#39;</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">&#39;Delta&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">: *</span></span>\n<span class=\"line\"><span style=\"color: #000000\">} </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\"> -&gt; {</span><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">: *}</span></span></pre>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">flight_count</span></span></pre>"
      }
    ],
    "path": "/documentation/experiments/joins.malloynb"
  },
  {
    "titles": [
      "Using an inner join in a query."
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Limits flights just Southwest and Delta flights."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\">: {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">join_many</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">inner</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">on</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">code</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/experiments/joins.malloynb"
  },
  {
    "titles": [
      "Parameters Experiment"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The parameters experiment enables the ability to add parameters to source definitions."
      },
      {
        "type": "p",
        "text": "Enable the parameters experiment with:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">##! experimental.parameters</span></span></pre>"
      },
      {
        "type": "p",
        "text": "This feature is still in development. Feedback is appreciated via <a href=\"/slack\">Slack</a> or <a href=\"https://github.com/malloydata/malloy/discussions/1409\">the dedicated GitHub discussion</a>."
      },
      {
        "type": "p",
        "text": "<strong>TL;DR</strong>:"
      },
      {
        "type": "p",
        "text": "Sources can be parameterized like <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #795E26\">my_source</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">param</span><span style=\"color: #000000\">::</span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&quot;default&quot;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> ...</span></span></code>"
      },
      {
        "type": "p",
        "text": "Sources with parameters can be invoked like <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #795E26\">my_source</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">param</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&quot;value&quot;</span><span style=\"color: #000000\">) -&gt; { ... }</span></span></code>"
      },
      {
        "type": "p",
        "text": "Parameters can be used in expressions <em>inside</em> the source, in invocations of sources being extended, and in joins"
      },
      {
        "type": "p",
        "text": "The goal is that eventually parameters will have true lexical scope <em>inside</em> the source, usable anywhere inside the source"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">##! experimental.parameters</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #795E26\">flights</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">min_distance</span><span style=\"color: #000000\">::</span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">distance</span><span style=\"color: #000000\"> &gt;= </span><span style=\"color: #001080\">min_distance</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_distance_bucket</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> { </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">distance_bucket</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">round</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">distance</span><span style=\"color: #000000\">, -</span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">) </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">() </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #795E26\">flights</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">min_distance</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1000</span><span style=\"color: #000000\">) -&gt; </span><span style=\"color: #001080\">by_distance_bucket</span></span></pre>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #795E26\">flights</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">min_distance</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">2000</span><span style=\"color: #000000\">) -&gt; </span><span style=\"color: #001080\">by_distance_bucket</span></span></pre>"
      }
    ],
    "path": "/documentation/experiments/parameters.malloynb"
  },
  {
    "titles": [
      "Parameters Experiment",
      "New Syntax"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "<strong>Sources can be declared with parameters:</strong>"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #795E26\">my_source</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">param</span><span style=\"color: #000000\">::</span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> ...</span></span></code>"
      },
      {
        "type": "p",
        "text": "<strong>Declared parameters may have a type and/or a default value:</strong>"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #795E26\">my_source</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">param</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> ...</span></span></code>"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #795E26\">my_source</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">param</span><span style=\"color: #000000\">::</span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> + </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> ...</span></span></code>"
      },
      {
        "type": "p",
        "text": "Error: <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #795E26\">my_source</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">param</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> ...</span></span></code> because it has neither a type nor a default value"
      },
      {
        "type": "p",
        "text": "A <a href=\"../language/filter-expressions\">filter expression</a> can also be a parameter, and the type of that parameter is specified <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">filter</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">T</span><span style=\"color: #000000\">&gt;</span></span></code> where <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">T</span></span></code> is one of th simple Malloy field types."
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #795E26\">my_source</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">param</span><span style=\"color: #000000\">::</span><span style=\"color: #001080\">filter</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #267F99\">timestamp</span><span style=\"color: #000000\">&gt; </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">f</span><span style=\"color: #A31515\">&#39;last week for two days&#39;</span><span style=\"color: #000000\">)</span></span></code>"
      },
      {
        "type": "p",
        "text": "Types may be any of the normal field types: <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">string</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">number</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">date</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">timestamp</span></span></code>, or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">boolean</span></span></code>"
      },
      {
        "type": "p",
        "text": "Unlike <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">null</span></span></code> the type must be specified with the parameter declaration, not with the value ..."
      },
      {
        "type": "p",
        "text": "A default value of null may be specified either by specifying a type and default value <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">null</span></span></code> or specifying a casted null"
      },
      {
        "type": "p",
        "text": "Error: <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #795E26\">my_source</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">param</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">)</span></span></code> because <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">null</span></span></code> is not a \"regular\" Malloy type"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #795E26\">my_source</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">param</span><span style=\"color: #000000\">::</span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">)</span></span></code>"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #795E26\">my_source</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">param</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">::</span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">)</span></span></code>"
      },
      {
        "type": "p",
        "text": "<strong>Source usages may specify parameters:</strong>"
      },
      {
        "type": "p",
        "text": "If a parameter has a default value, it need not be specified:"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #795E26\">my_source</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">param</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">) -&gt; ...</span></span></code>"
      },
      {
        "type": "p",
        "text": "Error: <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #795E26\">my_source</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">)</span></span></code> because parameter names are required"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #795E26\">my_source</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">param</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> ...</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">my_source</span><span style=\"color: #000000\"> -&gt; { ... } </span><span style=\"color: #008000\">// Ok</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #795E26\">my_source</span><span style=\"color: #000000\">() -&gt; { ... } </span><span style=\"color: #008000\">// Ok</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #795E26\">my_source</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">param</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">) -&gt; { ... } </span><span style=\"color: #008000\">// Ok</span></span></pre>"
      },
      {
        "type": "p",
        "text": "If a parameter does not have a default value, it must be specified"
      },
      {
        "type": "p",
        "text": "Passing 0 params is equivalent to not passing params, so a source without parameters may be invoked <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #795E26\">no_params_source</span><span style=\"color: #000000\">() -&gt; { ... }</span></span></code>"
      }
    ],
    "path": "/documentation/experiments/parameters.malloynb"
  },
  {
    "titles": [
      "Parameters Experiment",
      "New Semantics"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "<strong>Parameters are only inherited from one source to an extended source explicitly:</strong>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #795E26\">my_source</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">param</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> ...</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">ext_source_1</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">my_source</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">param</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">) </span><span style=\"color: #008000\">// No parameters</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #795E26\">ext_source_2</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">param</span><span style=\"color: #000000\">::</span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">my_source</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">param</span><span style=\"color: #000000\">) </span><span style=\"color: #008000\">// One parameter, but without default value</span></span></pre>"
      },
      {
        "type": "p",
        "text": "<strong>Constant expressions are allowed <em>anywhere</em> where sources can be invoked</strong>"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #795E26\">my_source</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">param</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> + </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">)</span></span></code>"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">new_source</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">my_source</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">param</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&quot;foo&quot;</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&quot;bar&quot;</span><span style=\"color: #000000\">))</span></span></code>"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">my_source</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">my_source</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">param</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">on</span><span style=\"color: #000000\"> ...</span></span></code>"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">query</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">my_query</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">my_source</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">param</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">) -&gt; ...</span></span></code>"
      },
      {
        "type": "p",
        "text": "<strong>Parameters can only be used in a few limited places:</strong>"
      },
      {
        "type": "p",
        "text": "In source invocations in source declarations:"
      },
      {
        "type": "p",
        "text": "In source invocations in join declarations"
      },
      {
        "type": "p",
        "text": "In dimension/measure expressions defined in the source:"
      },
      {
        "type": "p",
        "text": "In the first stage of views defined in the source:"
      },
      {
        "type": "p",
        "text": "This includes nests:"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #795E26\">ext_source</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">ext_param</span><span style=\"color: #000000\">::</span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">my_source</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">param</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">ext_param</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> ...</span></span></code>"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #795E26\">my_source</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">param</span><span style=\"color: #000000\">::</span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> ... { </span><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">other_source</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">other_source</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">param</span><span style=\"color: #000000\">) ... }</span></span></code>"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #795E26\">my_source</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">param</span><span style=\"color: #000000\">::</span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> ... { </span><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">other_source</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">with</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">param</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">other_source</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\"> }</span></span></code>"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #795E26\">my_source</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">param</span><span style=\"color: #000000\">::</span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> ... { </span><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">other_source</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">on</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">param</span><span style=\"color: #000000\"> }</span></span></code>"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #795E26\">my_source</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">param</span><span style=\"color: #000000\">::</span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> ... { </span><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">param_value</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">param</span><span style=\"color: #000000\"> }</span></span></code>"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #795E26\">my_source</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">param</span><span style=\"color: #000000\">::</span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> ... { </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">count_times_param</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">() * </span><span style=\"color: #001080\">param</span><span style=\"color: #000000\"> }</span></span></code>"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #795E26\">my_source</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">param</span><span style=\"color: #000000\">::</span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> ... { </span><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">my_view</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> { </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">param</span><span style=\"color: #000000\"> } }</span></span></code>"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #795E26\">my_source</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">param</span><span style=\"color: #000000\">::</span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> ... { </span><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">my_view</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> { </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> { </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">param</span><span style=\"color: #000000\"> } } }</span></span></code>"
      },
      {
        "type": "p",
        "text": "Convenience syntax: <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">my_source</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">param</span><span style=\"color: #000000\">)</span></span></code> is sugar for <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">my_source</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">param</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">param</span><span style=\"color: #000000\">)</span></span></code>:"
      },
      {
        "type": "p",
        "text": "This includes in SQL functions: <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">sql_number</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&quot;${ param }&quot;</span><span style=\"color: #000000\">)</span></span></code> (note this requires the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">sql_functions</span></span></code> experiment)"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #795E26\">ext_source</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">param</span><span style=\"color: #000000\">::</span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">my_source</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">param</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> ...</span></span></code>"
      },
      {
        "type": "p",
        "text": "<strong>Parameters cannot be used in the following places (<em>and likely will <strong>not</strong> in the future</em>):</strong>"
      },
      {
        "type": "p",
        "text": "Anywhere outside of the initial source declaration"
      },
      {
        "type": "p",
        "text": "Error: <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #795E26\">my_source</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">param</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">) -&gt;  { </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">param</span><span style=\"color: #000000\"> }</span></span></code>"
      },
      {
        "type": "p",
        "text": "<strong>Parameters of a source are not included in <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">index</span><span style=\"color: #000000\">: *</span></span></code> or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">: *</span></span></code></strong>"
      }
    ],
    "path": "/documentation/experiments/parameters.malloynb"
  },
  {
    "titles": [
      "Parameters Experiment",
      "Limitations"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "<strong>Parameters cannot be used in the following places (<em>but likely will in the future</em>):</strong>"
      },
      {
        "type": "p",
        "text": "In subsequent stages of views defined in the source:"
      },
      {
        "type": "p",
        "text": "In the sources of queries used to define sources or joins:"
      },
      {
        "type": "p",
        "text": "In SQL sources:"
      },
      {
        "type": "p",
        "text": "Error: <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #795E26\">my_src</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">param</span><span style=\"color: #000000\">::</span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> ... { </span><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">my_view</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> { ... } -&gt; { </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">param</span><span style=\"color: #000000\"> } }</span></span></code>"
      },
      {
        "type": "p",
        "text": "Error: <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #795E26\">my_source</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">param</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">base_source</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">param</span><span style=\"color: #000000\">) -&gt; { ... }</span></span></code>"
      },
      {
        "type": "p",
        "text": "Error: <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #795E26\">my_source</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">param</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">) ... { </span><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">joined</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">other</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">param</span><span style=\"color: #000000\">) -&gt; { ... } </span><span style=\"color: #AF00DB\">on</span><span style=\"color: #000000\"> ...</span></span></code>"
      },
      {
        "type": "p",
        "text": "Error: <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #795E26\">my_source</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">param</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">conn</span><span style=\"color: #000000\">.</span><span style=\"color: #AF00DB\">sql</span><span style=\"color: #000000\">(&quot;&quot;&quot;%{ </span><span style=\"color: #795E26\">other</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">param</span><span style=\"color: #000000\">) -&gt; { ... } }&quot;&quot;&quot;)</span></span></code>"
      },
      {
        "type": "p",
        "text": "Error: <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #795E26\">my_source</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">param</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">conn</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sql</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&quot;SELECT * ... WHERE %{ param } = 1&quot;</span><span style=\"color: #000000\">)</span></span></code>"
      },
      {
        "type": "p",
        "text": "<strong>Parameters cannot currently be annotated (<em>but they likely will be in the future</em>)</strong>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #795E26\">my_source</span><span style=\"color: #000000\">(</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\"># param_tag</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">1</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">//</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">&lt;—</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">syntax</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">error</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #001080\">param</span><span style=\"color: #000000\">::</span><span style=\"color: #267F99\">string</span></span>\n<span class=\"line\"><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> ...</span></span></pre>"
      },
      {
        "type": "p",
        "text": "<strong>For the time being, shadowing of parameters by fields or vice versa is illegal</strong>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #795E26\">my_source</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">param</span><span style=\"color: #000000\">::</span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> ... </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">param</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> ... </span><span style=\"color: #008000\">// Error</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">base_source</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> ... </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">param</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #795E26\">my_source</span><span style=\"color: #000000\">(</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #001080\">param</span><span style=\"color: #000000\">::</span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Error</span></span>\n<span class=\"line\"><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">base_source</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Likely in the future this will be legal, but there will be some other syntax to help navigate conflicts"
      }
    ],
    "path": "/documentation/experiments/parameters.malloynb"
  },
  {
    "titles": [
      "Improved Rendering."
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "We're working on making a reusable rendering library for Malloy that does smart things with your data.  Features include:"
      },
      {
        "type": "p",
        "text": "Fixed column heading"
      },
      {
        "type": "p",
        "text": "Various sizing of visualizations"
      },
      {
        "type": "p",
        "text": "Shared axis on visualizations embedded in tables"
      },
      {
        "type": "p",
        "text": "To turn on add the Tag"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\">## renderer_next</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Usage.  Normal results will display differently and better."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">avg_dist</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">distance</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">origin</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">avg_dist</span><span style=\"color: #000000\"> + {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">destination</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> + {</span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">10</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"></span></pre>"
      }
    ],
    "path": "/documentation/experiments/renderer.malloynb"
  },
  {
    "titles": [
      "SQL Expressions"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy allows you to call native database functions using <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">!</span><span style=\"color: #001080\">type</span></span></code>. For example if you wanted to call the duckdb function bit_length that returns a number, in Malloy you couild write <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">bitlength</span><span style=\"color: #000000\">!</span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&quot;this string)</span></span></code>."
      },
      {
        "type": "p",
        "text": "Sometimes the SQL expression you want to write can't be expressed this way.  For example in DUCKDB, the extract function looks like."
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">extract</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">part</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">date</span><span style=\"color: #000000\">)</span></span></code>"
      },
      {
        "type": "p",
        "text": "In order to make Malloy write an expression like this you can escape to a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">sql_</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">type</span><span style=\"color: #000000\">&gt;</span></span></code> function.  In the string parameter you can reference dimensions using the substitution operator <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">${</span><span style=\"color: #001080\">dimension_name</span><span style=\"color: #000000\">}</span></span></code>."
      },
      {
        "type": "p",
        "text": "SQL functions are"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-txt\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">sql_string</span></span>\n<span class=\"line\"><span style=\"color: #000000\">sql_number</span></span>\n<span class=\"line\"><span style=\"color: #000000\">sql_date</span></span>\n<span class=\"line\"><span style=\"color: #000000\">sql_boolean</span></span></pre>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">##! experimental{sql_functions}</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        </span><span style=\"color: #001080\">dep_year</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">sql_number</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&quot;&quot;&quot; extract(&#39;year&#39; from ${dep_time}) &quot;&quot;&quot;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">dep_year</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">flight_count</span></span></pre>"
      }
    ],
    "path": "/documentation/experiments/sql_expressions.malloynb"
  },
  {
    "titles": [
      "Reference the SQL Alias"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Sometimes you want to access a field directly in SQL, for example, arrays are unnested when referenced in Malloy.  You might want to access a column directly. In this case <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">${</span><span style=\"color: #001080\">TABLE</span><span style=\"color: #000000\">}</span></span></code> returns the alias for <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">flights2</span></span></code> in the SQL query."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights2</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\">  {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">sql_string</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&quot;&quot;&quot; ${TABLE}.carrier &quot;&quot;&quot;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights2</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">flight_count</span></span></pre>"
      }
    ],
    "path": "/documentation/experiments/sql_expressions.malloynb"
  },
  {
    "titles": [
      "Calculation Partitioning"
    ],
    "paragraphs": [],
    "path": "/documentation/experiments/window.malloynb"
  },
  {
    "titles": [
      "What Is Malloy"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy is a modern open source language for describing data relationships and transformations. It is an analytical language that runs on SQL databases. It provides the ability to define a semantic data model and query it. Malloy currently works with SQL databases BigQuery, Postgres, and querying Parquet and CSV via DuckDB."
      },
      {
        "type": "p",
        "text": "Queries compile to SQL, optimized for your database."
      },
      {
        "type": "p",
        "text": "Has both a semantic data model and a query language.  The semantic model contains reusable calculations and definitions, making queries short and readable."
      },
      {
        "type": "p",
        "text": "Excels at reading and writing nested data sets."
      },
      {
        "type": "p",
        "text": "Things that are complicated in SQL are simple to express in Malloy. For example: level of detail calculations, percent of total, aggregating against multiple tables across a join safely, date operations, reasonable ordering by default, and more."
      },
      {
        "type": "p",
        "text": "Malloy is a work in progress. Malloy is designed to be a language for anyone who works with SQL--whether you’re an analyst, data scientist, data engineer, or someone building a data application. If you know SQL, Malloy will feel familiar, while more powerful and efficient. Malloy allows you to model as you go, so there is no heavy up-front work before you can start answering complex questions, and you're never held back or restricted by the model."
      }
    ],
    "path": "/documentation/index.malloynb"
  },
  {
    "titles": [
      "What Is Malloy",
      "Try Malloy Today"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Write Malloy in the <a href=\"https://marketplace.visualstudio.com/items?itemName=malloydata.malloy-vscode\" target=\"_blank\">Visual Studio Code extension</a>: build semantic data models, query and transform data, and create simple visualizations and dashboards."
      },
      {
        "type": "p",
        "text": "Explore data with the <a href=\"https://github.com/malloydata/malloy-composer\" target=\"_blank\">Malloy Composer</a>, a demo of a data exploration application built on top of Malloy"
      },
      {
        "type": "p",
        "text": "<a href=\"https://github.dev/malloydata/try-malloy/airports.malloy\" target=\"_blank\">Try the language in your browser now</a> and run live Malloy queries while following the <a href=\"user_guides/basic\">Quickstart</a>"
      }
    ],
    "path": "/documentation/index.malloynb"
  },
  {
    "titles": [
      "What Is Malloy",
      "Get Involved"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Join our <a href=\"/slack\">Slack community</a>."
      },
      {
        "type": "p",
        "text": "File feature requests/bugs, join discussions, or contribute to Malloy on our <a href=\"https://github.com/malloydata/malloy\">Github repository</a>."
      }
    ],
    "path": "/documentation/index.malloynb"
  },
  {
    "titles": [
      "What Is Malloy",
      "The Story of Malloy"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy was designed by a team of people with a lot of experience in\nunderstanding the task of extracting meaning from data. Years of constant\nexposure to SQL resulted in a tremendous sense of wonder at the\npower of SQL ... and a tremendous source of frustration at how\nbad SQL is at representing the types of operations needed to\nget meaningful data out of relational databases, and how\ndifficult it is to maintain and extend a complex set\nof transformations written in SQL."
      },
      {
        "type": "p",
        "text": "Malloy started as a \"clean slate\" thought experiment, if we knew\nall the things we know about data, and about programming with data,\nand about programming languages in general, and we were designing\na query language today, what would it look like."
      },
      {
        "type": "p",
        "text": "In it's earliest form, Malloy looked a lot like SQL, and\nmuch of Malloy continues to be influenced by the overall\ndesign of the SQL language. It was always the intention that there\ncould be a document that would contain both Malloy and SQL\nand those would make sense together, perhaps parallel to\nthe way Javascript and Typescript work together."
      }
    ],
    "path": "/documentation/index.malloynb"
  },
  {
    "titles": [
      "Aggregates"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy supports the standard aggregate functions <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">count</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">sum</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">avg</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">min</span></span></code>, and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">max</span></span></code>. When these are used in a field's definition, they make that field a <a href=\"fields#measures\">measure</a>."
      }
    ],
    "path": "/documentation/language/aggregates.malloynb"
  },
  {
    "titles": [
      "Aggregates",
      "Basic Syntax"
    ],
    "paragraphs": [],
    "path": "/documentation/language/aggregates.malloynb"
  },
  {
    "titles": [
      "Aggregates",
      "Basic Syntax",
      "count"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #001080\">join_name</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span></pre>"
      },
      {
        "type": "p",
        "text": "The <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">count</span></span></code> aggregate function may be used to count the number of records appearing in a source."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">##(docs) hidden</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&quot;flights.malloy&quot;</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&quot;ecommerce.malloy&quot;</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&quot;airports.malloy&quot;</span></span></pre>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/aggregates.malloynb"
  },
  {
    "titles": [
      "Aggregates",
      "Basic Syntax",
      "count(expr)"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">(</span><span style=\"color: #000000; font-style: italic\">expression</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">(</span><span style=\"color: #000000; font-style: italic\">expression</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #001080\">join_name</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">field</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Distinct counts may be used to count the number of distinct values of a particular expression within a source."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">order_items</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">order_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">order_id</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/aggregates.malloynb"
  },
  {
    "titles": [
      "Aggregates",
      "Basic Syntax",
      "sum"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">(</span><span style=\"color: #000000; font-style: italic\">expression</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">(</span><span style=\"color: #000000; font-style: italic\">expression</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #001080\">join_name</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">(</span><span style=\"color: #000000; font-style: italic\">expression</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #001080\">join_name</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">field</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">()</span></span></pre>"
      },
      {
        "type": "p",
        "text": "The <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">sum</span></span></code> function may be used to compute the sum of all records of a particular field."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">total_distance</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">distance</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/aggregates.malloynb"
  },
  {
    "titles": [
      "Aggregates",
      "Basic Syntax",
      "avg"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">(</span><span style=\"color: #000000; font-style: italic\">expression</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">(</span><span style=\"color: #000000; font-style: italic\">expression</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #001080\">join_name</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">(</span><span style=\"color: #000000; font-style: italic\">expression</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #001080\">join_name</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">field</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">()</span></span></pre>"
      },
      {
        "type": "p",
        "text": "The <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">avg</span></span></code> function may be used to compute the average of all records of a particular field."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">aircraft</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">average_seats</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">aircraft_models</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">seats</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/aggregates.malloynb"
  },
  {
    "titles": [
      "Aggregates",
      "Basic Syntax",
      "min"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">min</span><span style=\"color: #000000\">(</span><span style=\"color: #000000; font-style: italic\">expression</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">min</span><span style=\"color: #000000\">(</span><span style=\"color: #000000; font-style: italic\">expression</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #001080\">join_name</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">field</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">min</span><span style=\"color: #000000\">()</span></span></pre>"
      },
      {
        "type": "p",
        "text": "The <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">min</span></span></code> function may be used to compute the minimum of all records of a particular field."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">order_items</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">cheapest_price</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">min</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">sale_price</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/aggregates.malloynb"
  },
  {
    "titles": [
      "Aggregates",
      "Basic Syntax",
      "max"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">max</span><span style=\"color: #000000\">(</span><span style=\"color: #000000; font-style: italic\">expression</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">max</span><span style=\"color: #000000\">(</span><span style=\"color: #000000; font-style: italic\">expression</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #001080\">join_name</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">field</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">max</span><span style=\"color: #000000\">()</span></span></pre>"
      },
      {
        "type": "p",
        "text": "The <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">max</span></span></code> function may be used to compute the maximum of all records of a particular field."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">longest_distance</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">max</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">distance</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/aggregates.malloynb"
  },
  {
    "titles": [
      "Aggregates",
      "Aggregate Locality"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "In SQL, some kinds of aggregations are difficult to express because locality of aggregation is restricted to the top level of a query. Malloy\noffers more control over this behavior, allowing these types of analysis to be\nexpressed much more easily."
      }
    ],
    "path": "/documentation/language/aggregates.malloynb"
  },
  {
    "titles": [
      "Aggregates",
      "Aggregate Locality",
      "The Problem"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Suppose you were interested in learning more about the number of seats on\ncommercial aircraft. First you might look at the average number of seats\non all registered aircraft."
      },
      {
        "type": "p",
        "text": "To do this, you would start with the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">aircraft</span></span></code> table and join in <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">aircraft_models</span></span></code> to get access to the number of seats, then take\nthe average of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">aircraft_models</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">seats</span></span></code>."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-sql\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">SELECT</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">AVG</span><span style=\"color: #000000\">(aircraft_models.seats)</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">FROM</span><span style=\"color: #000000\"> aircraft</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">LEFT JOIN</span><span style=\"color: #000000\"> aircraft_models</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">ON</span><span style=\"color: #000000\"> aircraft.aircraft_model_code = aircraft_models.aircraft_model_code</span></span></pre>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">aircraft</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">average_seats</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">aircraft_models</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">seats</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "You're also interested in knowing the average number of seats on the kinds of aircraft that are in use, or in other words, the average number of seats of the aircraft models of registered aircraft."
      },
      {
        "type": "p",
        "text": "To do this, you might decide to start with the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">aircraft_models</span></span></code> table instead."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-sql\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">SELECT</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">AVG</span><span style=\"color: #000000\">(seats)</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">FROM</span><span style=\"color: #000000\"> aircraft_models</span></span></pre>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">aircraft_models</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">average_seats</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">seats</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "However, this isn't actually the number you were interested in, because this measures the average number of seats across <em>all</em> aircraft models, not just the ones with actively-registered aircraft."
      },
      {
        "type": "p",
        "text": "Unfortunately, SQL doesn't have any native constructs to compute this value, and in practice analysts often resort to complicated <a href=\"https://www.zentut.com/data-warehouse/fact-table/\">fact tables</a> to perform this kind of query."
      }
    ],
    "path": "/documentation/language/aggregates.malloynb"
  },
  {
    "titles": [
      "Aggregates",
      "Aggregate Locality",
      "The Solution"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy introduces the concept of <em>aggregate locality</em>, meaning that aggregates can be computed with respect to different points in the data graph. In the following query, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">average_seats</span></span></code> is computed with respect to <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">aircraft_models</span></span></code>,\nyielding the the average number of seats on aircraft models of aircraft listed in the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">aircraft</span></span></code> table."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">aircraft</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">average_seats</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">aircraft_models</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">aircraft_models</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">seats</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Using a bare aggregate function, e.g. <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">(</span><span style=\"color: #000000; font-style: italic\">expression</span><span style=\"color: #000000\">)</span></span></code>, will aggregate with respect to the current source (in the above example, that would be <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">aircraft</span></span></code>). The syntax <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">expr</span><span style=\"color: #000000\">)</span></span></code> makes that aggregate locality explicit. When an aggregate computation crosses a join relationship, explicit aggregate locality is required. See <a href=\"#required-explicit-aggregate-locality\">below</a> for more details."
      },
      {
        "type": "p",
        "text": "For convenience, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">aircraft_models</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">aircraft_models</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">seats</span><span style=\"color: #000000\">)</span></span></code> can be written as <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">aircraft_models</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">seats</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">()</span></span></code>."
      }
    ],
    "path": "/documentation/language/aggregates.malloynb"
  },
  {
    "titles": [
      "Aggregates",
      "Aggregate Locality",
      "Aggregates that Support Locality"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The aggregate functions that support locality are <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">count</span></span></code> (non-distinct), <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">sum</span></span></code>, and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">avg</span></span></code>."
      },
      {
        "type": "p",
        "text": "The <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">min</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">max</span></span></code> aggregates do not support aggregate locality because the minimum and maximum values are the same regardless of where they are computed. Local aggregation removes duplicate values (those corresponding to the same row in the aggregate source location), and minimum and maximum values do not change if values are repeated more than once."
      }
    ],
    "path": "/documentation/language/aggregates.malloynb"
  },
  {
    "titles": [
      "Aggregates",
      "Aggregate Locality",
      "Required Explicit Aggregate Locality"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Specifying aggregate locality is required when the aggregate computation crosses a join relationship accesses nested data. For symmetric aggregate functions <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">min</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">max</span></span></code>, and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">count</span></span></code>, this never occurs, and so it is always allowed to use the regular <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">min</span><span style=\"color: #000000\">(</span><span style=\"color: #000000; font-style: italic\">expression</span><span style=\"color: #000000\">)</span></span></code> syntax.\nFor asymmetric aggregates <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">avg</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">sum</span></span></code>, any time the aggregate expression (or dimension) uses a join or nested field, using the syntax <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">(</span><span style=\"color: #000000; font-style: italic\">expression</span><span style=\"color: #000000\">)</span></span></code> will result in a warning suggesting the use of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">(</span><span style=\"color: #000000; font-style: italic\">expression</span><span style=\"color: #000000\">)</span></span></code> instead."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">aircraft</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Symmetric aggregate functions can use implicit locality</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">okay_1</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">min</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">aircraft_models</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">seats</span><span style=\"color: #000000\">) </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Asymmetric aggregate functions must use explicit locality</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">warning</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">aircraft_models</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">seats</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Using `source` for explicity locality to produce a weighted average</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">okay_2</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">aircraft_models</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">seats</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Using `aircraft_models` for explicit locality</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">okay_3</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">aircraft_models</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">aircraft_models</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">seats</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/aggregates.malloynb"
  },
  {
    "titles": [
      "Aggregates",
      "Aggregate Locality",
      "Examples"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The following queries show six ways of calculating the average number of seats."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">aircraft_models_avg_seats</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">aircraft</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">aircraft_models</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">seats</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">aircraft_avg_models_seats</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">aircraft</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">aircraft</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">aircraft_models</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">seats</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">avg_aircraft_models_seats</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">aircraft</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">aircraft_models</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">seats</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">aircraft</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">models_avg_seats</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">aircraft_models</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">seats</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">avg_models_seats</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">aircraft_models</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">seats</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">aircraft_models</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">avg_seats</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">seats</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "This table summarizes the meaning of each of these calculations."
      }
    ],
    "path": "/documentation/language/aggregates.malloynb"
  },
  {
    "titles": [
      "Aggregates",
      "Aggregate Locality",
      "Illegal Asymmetric Aggregate Computations"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "There are a few circumstances when an asymmetric aggregate computation is illegal, based on the join usage of that computation:"
      },
      {
        "type": "p",
        "text": "When the aggregate crosses a repeated nested relationship forward"
      },
      {
        "type": "p",
        "text": "When the aggregate crosses a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">join_many</span></span></code> relationship forward"
      },
      {
        "type": "p",
        "text": "When the aggregate crosses a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">join_cross</span></span></code> relationship forward or backward"
      },
      {
        "type": "p",
        "text": "\"Forward\" verses \"backward\" refers to the difference between <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000; font-style: italic\">join name</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">(</span><span style=\"color: #000000; font-style: italic\">field in source</span><span style=\"color: #000000\">)</span></span></code> (forward) and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">(</span><span style=\"color: #000000; font-style: italic\">join name</span><span style=\"color: #000000\">.</span><span style=\"color: #000000; font-style: italic\">field in join</span><span style=\"color: #000000\">)</span></span></code> (backward)."
      },
      {
        "type": "p",
        "text": "These cases don't carry meaning and are impossible to compute. Malloy will yield an error like \"Cannot compute <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">sum</span></span></code> across <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">join_many</span></span></code> relationship <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">join_name</span></span></code>; use <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">join_name</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">field</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">()</span></span></code>\"."
      }
    ],
    "path": "/documentation/language/aggregates.malloynb"
  },
  {
    "titles": [
      "Aggregates",
      "Aggregate Locality",
      "Aggregates on Fields"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Aggregating \"on a field,\" e.g. <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">aircraft_models</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">seats</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">()</span></span></code> is exactly equivalent to aggregating that field with respect to its direct parent source, e.g. <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">aircraft_models</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">aircraft_models</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">seats</span><span style=\"color: #000000\">)</span></span></code>. This syntax is supported for the aggregate functions which benefit from aggregate locality and require a field, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">avg</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">sum</span></span></code>."
      },
      {
        "type": "p",
        "text": "One case to make note of is when the field is a dimension which uses exactly one join pattern, in which case it is equivalent to aggregating with respect to that join pattern:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">aircraft</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">aircraft_model_seats</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">aircraft_models</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">seats</span></span>\n<span class=\"line\"><span style=\"color: #000000\">} -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">avg_on_source</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">aircraft_models</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">aircraft_models</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">seats</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">avg_on_field</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">aircraft_models</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">seats</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">avg_on_dimension</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">aircraft_model_seats</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/aggregates.malloynb"
  },
  {
    "titles": [
      "Aggregates",
      "Ungrouped Aggregates"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "In a query which is grouped by multiple dimensions, it is often useful to be able to perform an aggregate calculation on sub-groups to determine subtotals. The <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">all</span><span style=\"color: #000000\">()</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">exclude</span><span style=\"color: #000000\">()</span></span></code> functions in Malloy allow control over grouping and ungrouping, making this simple:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">faa_region</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">count_airports</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">overall_airports</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">all</span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">())</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\"># percent</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">percent_of_total</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">() / </span><span style=\"color: #795E26\">all</span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">())</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">airports_in_region</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">all</span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">(), </span><span style=\"color: #001080\">faa_region</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\"># percent</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">percent_in_region</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">() / </span><span style=\"color: #795E26\">all</span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">(), </span><span style=\"color: #001080\">faa_region</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Read more about Ungrouped Aggregates <a href=\"ungrouped-aggregates\">here</a>."
      }
    ],
    "path": "/documentation/language/aggregates.malloynb"
  },
  {
    "titles": [
      "Apply (?) Operator"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The apply operator takes one expression and applies it to another.\nThe primary us of apply is to \"apply\" a value to a partial comparison,\nbut there are a number of other powerful gestures which use this operator."
      },
      {
        "type": "p",
        "text": "For an expression matching the pattern <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> ? </span><span style=\"color: #001080\">expression</span></span></code>, the following table outlines the various meanings."
      },
      {
        "type": "p",
        "text": "In addition it is very common to use <a href=\"time-ranges\">Time Ranges</a>\nwith the apply operator, which operate similar to the numeric range\nexample above."
      }
    ],
    "path": "/documentation/language/apply.malloynb"
  },
  {
    "titles": [
      "Calculations and Window Functions"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Window functions in Malloy are expressed in <em>calculation</em> fields, using the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">: </span></span></code> keyword. Calculation fields operate on the results of a aggregation or selection, while still operating within the same query stage. Logically these calculation operations occur \"after\" the other operations, so their exact semantics can be challenging to understand. For a full list of the window functions that Malloy supports, visit our <a href=\"./functions#window-functions\">function reference documentation</a>."
      },
      {
        "type": "p",
        "text": "Here is a simple example:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">##(docs) hidden</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&quot;flights.malloy&quot;</span></span></pre>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;WN&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">dep_year</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">year</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">dep_year</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">asc</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">year_change</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> - </span><span style=\"color: #795E26\">lag</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "In this query, we compute <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">flight_count</span></span></code> as an aggregate, and then compute the year-over-year change, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">year_change</span></span></code> in the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">:</span></span></code> clause, using the <a href=\"./functions#lag\">lag</a> window function."
      }
    ],
    "path": "/documentation/language/calculations_windows.malloynb"
  },
  {
    "titles": [
      "Calculations and Window Functions",
      "Ordering"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Some window functions in SQL, such as <a href=\"https://cloud.google.com/bigquery/docs/reference/standard-sql/functions-and-operators#lag\">lag</a>, require an <code>ORDER BY</code> clause to determine behavior. In Malloy, such analytic functions use the ordering of the query itself. For example:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;WN&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">dep_year</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">year</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">dep_year</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">asc</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">year_change</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> - </span><span style=\"color: #795E26\">lag</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">lag</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\">)</span></span></code> for each row is calculated with respect to <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">dep_year</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">asc</span></span></code>. The value of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">lag</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\">)</span></span></code> for the year 2001 is the value of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">flight_count</span></span></code> for the year 2000."
      },
      {
        "type": "p",
        "text": "Note that Malloy queries use a <a href=\"order_by#ordering-and-limiting\">default ordering</a> if none is explicitly specified:"
      },
      {
        "type": "p",
        "text": "If a time dimension is specified in the query, default ordering is by \"descending time\", showing newest rows first"
      },
      {
        "type": "p",
        "text": "If no time is specified, but there is a numeric measure, default ordering is by \"measure values descending\", showing largest values first"
      },
      {
        "type": "p",
        "text": "Ordering can also be changed by adding an <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">order_by</span></span></code> property on the calculation. This allows you to control the ordering of the input to the window function independently from the ordering of the final results."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">##! experimental</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;WN&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">dep_year</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">year</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">year_change</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> - </span><span style=\"color: #795E26\">lag</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\">) {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">dep_year</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">asc</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">dep_year</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">desc</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "In this example, the window function is calculated in ascending order with respect to <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">dep_year</span></span></code>, but the results are output in descending order (most recent year first)."
      }
    ],
    "path": "/documentation/language/calculations_windows.malloynb"
  },
  {
    "titles": [
      "Calculations and Window Functions",
      "Partitioning"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Some window function operations require the specification of <code>partition_by</code> clauses in SQL. For example, calculating year-over-year changes for a specific time span, such as \"number of flights in March of this year versus March of last year\". In Malloy, these can be specified by adding a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">partition_by</span></span></code> property to the calculation."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">##! experimental</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;WN&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">dep_year</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">year</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">dep_month</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">month</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">year_change</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> - </span><span style=\"color: #795E26\">lag</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\">) {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">partition_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">dep_month</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">dep_year</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">dep_year</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">dep_month</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "This query modifies the window by adding a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">partition_by</span></span></code> clause on the month number, and an <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">order_by</span></span></code> on the year. This means each window contains only data for a given month number, and the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">lag</span></span></code> function grabs the value for <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">flight_count</span></span></code> of the prior year within that window."
      }
    ],
    "path": "/documentation/language/calculations_windows.malloynb"
  },
  {
    "titles": [
      "Calculations and Window Functions",
      "Field References in Calculations"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Because calculations operate logically on the output of the grouping/projecting/aggregating operations, field references behave differently inside a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">:</span></span></code> block. In particular, field references refer by default to output names from those operations."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">lower_carrier</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">lower</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">prev_carrier</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">lag</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">lower_carrier</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "In a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">group_by</span></span></code> or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">aggregate</span></span></code>, you cannot reference <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">lower_carrier</span></span></code> because it is not a field defined inside of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">flights</span></span></code>, but in <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">calculate</span></span></code>, you can."
      },
      {
        "type": "p",
        "text": "For a detailed explanation of the exact semantics, see the <a href=\"./eval_space\">evaluation space documentation</a>."
      }
    ],
    "path": "/documentation/language/calculations_windows.malloynb"
  },
  {
    "titles": [
      "Change Log"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "<em>Breaking changes indicated with *</em>"
      },
      {
        "type": "p",
        "text": "We will use this space to highlight major and/or breaking changes to Malloy."
      }
    ],
    "path": "/documentation/language/changelog.malloynb"
  },
  {
    "titles": [
      "Change Log",
      "Malloy 4.0 Preview (v0.0.40 - v0.0.86)"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "In this set of changes, several new syntactical constructs have been introduced, in some cases directly replacing existing syntaxes. The old syntaxes will be deprecated in version 4.0. For the time being, both sets of syntaxes are legal. To preview warnings (and eventually errors) that will be added in 4.0, you can include the <code>m4warnings</code> <a href=\"./tags\">compiler flag</a> in your source code: <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">##! m4warnings</span></span></code>."
      }
    ],
    "path": "/documentation/language/changelog.malloynb"
  },
  {
    "titles": [
      "Change Log",
      "Malloy 4.0 Preview (v0.0.40 - v0.0.86)",
      "Views"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "To resolve some confusion about the difference between \"source-level queries\" and \"model-level queries,\" source-level queries have been renamed to \"views.\" To define views in a source, use <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">:</span></span></code> instead of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">query</span><span style=\"color: #000000\">:</span></span></code>. The latter will be deprecated in 4.0. At the top level of a model, queries can still be defined and named with <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">query</span><span style=\"color: #000000\">:</span></span></code>."
      },
      {
        "type": "p",
        "text": "For more information about views, see the <a href=\"./views\">Views</a> section."
      }
    ],
    "path": "/documentation/language/changelog.malloynb"
  },
  {
    "titles": [
      "Change Log",
      "Malloy 4.0 Preview (v0.0.40 - v0.0.86)",
      "Connection Table Method"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "New syntax for defining sources based on tables, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;data/users.parquet&#39;</span><span style=\"color: #000000\">)</span></span></code> has been introduced. The old syntax, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;duckdb:data/users.parquet&#39;</span><span style=\"color: #000000\">)</span></span></code> still works for the time being, but will be deprecated in 4.0."
      },
      {
        "type": "p",
        "text": "See the <a href=\"./connections#table-connection-method\">Connections</a> section for more details."
      }
    ],
    "path": "/documentation/language/changelog.malloynb"
  },
  {
    "titles": [
      "Change Log",
      "Malloy 4.0 Preview (v0.0.40 - v0.0.86)",
      "SQL Source Method"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "New syntax for defining sources based on SQL queries, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #AF00DB\">sql</span><span style=\"color: #000000\">(&quot;&quot;&quot;</span><span style=\"color: #0000FF\">select</span><span style=\"color: #000000\"> * ... &quot;&quot;&quot;)</span></span></code>, has been introduced. The old syntax, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">sql</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">name</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> { </span><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">&quot;&quot;&quot;select * ...&quot;&quot;&quot;</span><span style=\"color: #000000\">; </span><span style=\"color: #AF00DB\">connection</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">&quot;duckdb&quot;</span><span style=\"color: #000000\"> }</span></span></code> still works for the time being, but will be deprecated in 4.0."
      },
      {
        "type": "p",
        "text": "This makes <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">from_sql</span></span></code> no longer necessary, and it will be deprecated with the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">sql</span><span style=\"color: #000000\">:</span></span></code> statement."
      },
      {
        "type": "p",
        "text": "See the <a href=\"./sql_sources\">SQL Sources</a> section for more details."
      }
    ],
    "path": "/documentation/language/changelog.malloynb"
  },
  {
    "titles": [
      "Change Log",
      "Malloy 4.0 Preview (v0.0.40 - v0.0.86)",
      "Source Extensions and Query Refinements"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Previously, there was one gesture used for source extensions and query refinements, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">source_or_query</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">extensions_or_refinements</span><span style=\"color: #000000\"> }</span></span></code>. Now there is new sepearate syntax for each: <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">some_source</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">source_extensions</span><span style=\"color: #000000\"> }</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">some_query</span><span style=\"color: #000000\"> + { </span><span style=\"color: #001080\">source_refinements</span><span style=\"color: #000000\"> }</span></span></code>. The old syntax still works for the time being, but will be deprecated in 4.0."
      },
      {
        "type": "p",
        "text": "This makes <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">from</span></span></code> no longer required, and it will be deprecated with the old extension/refinement syntax."
      },
      {
        "type": "p",
        "text": "See the <a href=\"./views#refining-views\">Query Refinement</a> and <a href=\"./source#source-extensions\">Source Extension</a> sections for more details."
      }
    ],
    "path": "/documentation/language/changelog.malloynb"
  },
  {
    "titles": [
      "Change Log",
      "Malloy 4.0 Preview (v0.0.40 - v0.0.86)",
      "Deprecation of Leading Arrows for Query References"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Previously in order to reference an existing query (e.g. to use as the source for another query), it was necessary to include a leading arrow: <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: -&gt; </span><span style=\"color: #001080\">some_query</span><span style=\"color: #000000\"> -&gt; { </span><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">: * }</span></span></code>. Now the leading arrow is no longer required, and will be deprecated in 4.0."
      }
    ],
    "path": "/documentation/language/changelog.malloynb"
  },
  {
    "titles": [
      "Change Log",
      "Malloy 4.0 Preview (v0.0.40 - v0.0.86)",
      "Addition of Leading Arrow for Queries Defined in Sources"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "An optional leading arrow can now be placed in query definitions inside of sources:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">##(docs) hidden</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&quot;flights.malloy&quot;</span></span></pre>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">my_source</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;some_table&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">my_query</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    ...</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/changelog.malloynb"
  },
  {
    "titles": [
      "Change Log",
      "Malloy 4.0 Preview (v0.0.40 - v0.0.86)",
      "Deprecation of The Filter Shortcut"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Previously you could use a shortcut syntax for filtering sources, queries, or measures, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">{? </span><span style=\"color: #001080\">condition</span><span style=\"color: #000000\"> }</span></span></code>. This will be deprecated in version 4.0."
      },
      {
        "type": "p",
        "text": "Instead of the shortcut, use <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">source_name</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">condition</span><span style=\"color: #000000\"> }</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">query_name</span><span style=\"color: #000000\"> + { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">condition</span><span style=\"color: #000000\"> }</span></span></code>, or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">measure_name</span><span style=\"color: #000000\"> { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">condition</span><span style=\"color: #000000\"> }</span></span></code>."
      }
    ],
    "path": "/documentation/language/changelog.malloynb"
  },
  {
    "titles": [
      "Change Log",
      "Malloy 4.0 Preview (v0.0.40 - v0.0.86)",
      "New Syntax for Source Extensions Defined in Queries"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "There is new syntax for specifying source extensions inside queries:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">query</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">my_query</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">some_source</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\">: {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">value</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">value</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "This will replace <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">declare</span><span style=\"color: #000000\">:</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">join_</span><span style=\"color: #000000\">*:</span></span></code> in queries, and they will be deprecated in 4.0."
      },
      {
        "type": "p",
        "text": "See the <a href=\"./source#source-extensions\">Source extensions</a> section for more details."
      }
    ],
    "path": "/documentation/language/changelog.malloynb"
  },
  {
    "titles": [
      "Change Log",
      "Malloy 4.0 Preview (v0.0.40 - v0.0.86)",
      "Run Statement"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "There is new syntax for specifying an unnamed query that should be runnable in the host application, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">by_carrier</span></span></code>. This will replace the old syntax, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">query</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">by_carrier</span></span></code>, which still works for the time being, but will be deprecated in 4.0. See the <a href=\"../language/statement#run-statements\">Run Statement</a> section for details."
      }
    ],
    "path": "/documentation/language/changelog.malloynb"
  },
  {
    "titles": [
      "Change Log",
      "v0.0.39"
    ],
    "paragraphs": [],
    "path": "/documentation/language/changelog.malloynb"
  },
  {
    "titles": [
      "Change Log",
      "v0.0.39",
      "*More strict expression types"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Previously, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">:</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">:</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">:</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">:</span></span></code>, etc. would all allow fields of the wrong expression type (dimension, measure, query). Now that is an error."
      }
    ],
    "path": "/documentation/language/changelog.malloynb"
  },
  {
    "titles": [
      "Change Log",
      "v0.0.39",
      "*Function argument typechecking"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Function arguments are now typechecked for a set of \"built-in\" functions. All unknown functions will error. See <a href=\"./functions\">the functions documentation</a> and <a href=\"./new_functions\">a detailed description of what changed</a>."
      }
    ],
    "path": "/documentation/language/changelog.malloynb"
  },
  {
    "titles": [
      "Change Log",
      "v0.0.39",
      "Forced function call syntax"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "For functions which are not \"built-in\", or to call the native SQL version of a function, there is special syntax:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #008000\">// Exclamation point indicates to not typecheck arguments and directly call the named SQL function</span></span>\n<span class=\"line\"><span style=\"color: #008000\">// Return type is by default the same as the first argument</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">cuberoot_value</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">cbrt</span><span style=\"color: #000000\">!(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #008000\">// A return type may be specified after the exclamation point</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">timestamp_value</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">timestamp_seconds</span><span style=\"color: #000000\">!</span><span style=\"color: #267F99\">timestamp</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">)</span></span></pre>"
      }
    ],
    "path": "/documentation/language/changelog.malloynb"
  },
  {
    "titles": [
      "Change Log",
      "v0.0.39",
      "Calculations (analytic functions / window functions)"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "There is a new keyword <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">:</span></span></code> which can appear in a query, for use with <a href=\"./functions#window-functions\">window functions</a>."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; { </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">prev_carrier</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">lag</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/changelog.malloynb"
  },
  {
    "titles": [
      "Change Log",
      "v0.0.39",
      "*New functions are in the global namespace"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "New functions are in the global namespace, which means that top level objects (SQL blocks, queries, sources) in a Malloy file cannot have the same name as a built-in function."
      }
    ],
    "path": "/documentation/language/changelog.malloynb"
  },
  {
    "titles": [
      "Change Log",
      "v0.0.10"
    ],
    "paragraphs": [],
    "path": "/documentation/language/changelog.malloynb"
  },
  {
    "titles": [
      "Change Log",
      "v0.0.10",
      "The apply operator is now ? and not :"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "In the transition from filters being with an array like syntax ..."
      },
      {
        "type": "p",
        "text": "sourceName :[ fieldName: value1|value2 ]"
      },
      {
        "type": "p",
        "text": "The use of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">:</span></span></code> as the apply operator became a readability problem ..."
      },
      {
        "type": "p",
        "text": "sourceName { where: fieldName: value1|value2 }"
      },
      {
        "type": "p",
        "text": "As of this release, use of the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">:</span></span></code> as an apply operator will generate a warning,\nand in a near future release it will be a compiler error. The correct\nsyntax for apply is now the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">?</span></span></code> operator. As in"
      },
      {
        "type": "p",
        "text": "sourceName { where: fieldName ? value1|value2 }"
      }
    ],
    "path": "/documentation/language/changelog.malloynb"
  },
  {
    "titles": [
      "Change Log",
      "0.0.9"
    ],
    "paragraphs": [],
    "path": "/documentation/language/changelog.malloynb"
  },
  {
    "titles": [
      "Change Log",
      "0.0.9",
      "Deprecation of brackets for lists of items"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Prior to version 0.0.9, lists of things were contained inside <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">[ ]</span></span></code>. Going forward, the brackets have been removed. Our hope is that this will be one less piece of punctuation to track, and will make it easier to change from a single item in a list to multiple without adding in brackets."
      },
      {
        "type": "p",
        "text": "For example, this syntax:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">query</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">) -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">top</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">10</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: [</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">faa_region</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  ]</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: [</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">count_public</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">() { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">fac_use</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;PU&#39;</span><span style=\"color: #000000\"> },</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">average_elevation</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">round</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">elevation</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">(),</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  ]</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: [</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">faa_region</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">&#39;ANM&#39;</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">&#39;ASW&#39;</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">&#39;AWP&#39;</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">&#39;AAL&#39;</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">&#39;ASO&#39;</span><span style=\"color: #000000\"> ,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">major</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;Y&#39;</span><span style=\"color: #000000\"> ,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">fac_type</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;AIRPORT&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  ]</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Is now written:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">query</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;data/airports.parquet&#39;</span><span style=\"color: #000000\">) -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">top</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">10</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">faa_region</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">count_public</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">() { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">fac_use</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;PU&#39;</span><span style=\"color: #000000\"> },</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">average_elevation</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">round</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">elevation</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">(),</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">faa_region</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">&#39;ANM&#39;</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">&#39;ASW&#39;</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">&#39;AWP&#39;</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">&#39;AAL&#39;</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">&#39;ASO&#39;</span><span style=\"color: #000000\"> ,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">major</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;Y&#39;</span><span style=\"color: #000000\"> ,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">fac_type</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;AIRPORT&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/changelog.malloynb"
  },
  {
    "titles": [
      "Connections"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "In Malloy, named connection objects are used to interact with a database, including fetching schemas for SQL queries and tables, as well as actually running queries."
      },
      {
        "type": "p",
        "text": "Connection objects are defined implicitly on their first use when referencing a table or SQL source:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #008000\">// This creates a model-level connection definition, `duckdb`</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">users</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/users.parquet&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">users</span><span style=\"color: #000000\"> -&gt; { </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">first_name</span><span style=\"color: #000000\">; </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\"> }</span></span></pre>"
      }
    ],
    "path": "/documentation/language/connections.malloynb"
  },
  {
    "titles": [
      "Connection Methods"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "There are currently two connection methods, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">()</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sql</span><span style=\"color: #000000\">()</span></span></code>."
      }
    ],
    "path": "/documentation/language/connections.malloynb"
  },
  {
    "titles": [
      "Connection Methods",
      "Table Connection Method"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">()</span></span></code> connection method is used to reference a table or view in a database. It accepts a single string representing a table. The exact semantics of how that string is resolved into a table schema depend on the database and application."
      },
      {
        "type": "p",
        "text": "In the official Malloy connection implementations, the behavior is as follows:"
      }
    ],
    "path": "/documentation/language/connections.malloynb"
  },
  {
    "titles": [
      "Connection Methods",
      "Table Connection Method",
      "BigQuery"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "In BigQuery, the string passed to the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">()</span></span></code> connection method can be a two- or three-segment path including the (optional) project ID, dataset ID, and table name, e.g. <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">bigquery</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;project-id.dataset-id.table-name&#39;</span><span style=\"color: #000000\">)</span></span></code> or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">bigquery</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;dataset-id.table-name&#39;</span><span style=\"color: #000000\">)</span></span></code>. If the project ID is left off, the default project ID for the connection will be used, or else the system default if none is set on the connection."
      }
    ],
    "path": "/documentation/language/connections.malloynb"
  },
  {
    "titles": [
      "Connection Methods",
      "Table Connection Method",
      "DuckDB"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "In DuckDB, the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">()</span></span></code> method accepts the path (relative to the Malloy file) of CSV, JSON, or Parquet file containing the table data, e.g. <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;data/users.csv&#39;</span><span style=\"color: #000000\">)</span></span></code> or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../../users.parquet&#39;</span><span style=\"color: #000000\">)</span></span></code>. URLs to such files (or APIs) are also allowed: see <a href=\"../patterns/apijson\">an example here</a>."
      }
    ],
    "path": "/documentation/language/connections.malloynb"
  },
  {
    "titles": [
      "Connection Methods",
      "Table Connection Method",
      "Postgres"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "In Postgres, the string passed to the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">()</span></span></code> connection method can be a two- or three-segment path including the (optional) database ID, schema name, and table name, e.g. <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">postgres</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;database-id.schema-name.table-name&#39;</span><span style=\"color: #000000\">)</span></span></code> or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">postgres</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;schema-name.table-name&#39;</span><span style=\"color: #000000\">)</span></span></code>. If the database ID is left off, the default database for the connection will be used, or else the system default if none is set on the connection."
      }
    ],
    "path": "/documentation/language/connections.malloynb"
  },
  {
    "titles": [
      "Connection Methods",
      "SQL Connection Method"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sql</span><span style=\"color: #000000\">()</span></span></code> connection method is used to define a source or query based on a SQL query. See the <a href=\"./sql_sources\">SQL Sources</a> section for more information."
      }
    ],
    "path": "/documentation/language/connections.malloynb"
  },
  {
    "titles": [
      "Data Types In Malloy"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Because Malloy writes SQL expressions, when queries are actually executed, all data will be in types understood by the SQL engine which is running the query."
      },
      {
        "type": "p",
        "text": "Malloy does have a set of data types and there is a mapping between the types of the SQL engine and the Malloy datatypes, mostly this mapping is invisible."
      }
    ],
    "path": "/documentation/language/datatypes.malloynb"
  },
  {
    "titles": [
      "Data Types In Malloy",
      "Number"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "An engine will have a large variety of storage formats for numeric data. Malloy doesn't distinguish between these, and simply folds them all into one type, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">number</span></span></code>."
      },
      {
        "type": "p",
        "text": "Although Malloy can use columns of any numberic type, there is no way to write a pure Malloy query to generate columns in a specific engine type."
      }
    ],
    "path": "/documentation/language/datatypes.malloynb"
  },
  {
    "titles": [
      "Data Types In Malloy",
      "Number",
      "Numeric Literals"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy has a fairly basic syntax for numeric literals"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #098658\">123</span></span></code>"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #098658\">123.4</span></span></code>"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #098658\">.4</span></span></code>"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #098658\">0.4</span></span></code>"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #098658\">123E4</span></span></code>"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #098658\">123E+4</span></span></code>"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #098658\">123E-4</span></span></code>"
      }
    ],
    "path": "/documentation/language/datatypes.malloynb"
  },
  {
    "titles": [
      "Data Types In Malloy",
      "String"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Strings in Malloy are wrapped in either single quotes (<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">&#39;</span></span></code>), double quotes (<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">&quot;</span></span></code>) or what we call the triple quote (<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">&quot;&quot;&quot;</span></span></code>)."
      },
      {
        "type": "p",
        "text": "A triple quote <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">string</span></span></code> can extend over more than one line, as in"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">my_poem</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&quot;&quot;&quot;</span></span>\n<span class=\"line\"><span style=\"color: #A31515\">  I wrote some new code in Malloy</span></span>\n<span class=\"line\"><span style=\"color: #A31515\">  and experienced boundless joy.</span></span>\n<span class=\"line\"><span style=\"color: #A31515\">  It worked right away,</span></span>\n<span class=\"line\"><span style=\"color: #A31515\">  so I just have to say</span></span>\n<span class=\"line\"><span style=\"color: #A31515\">  &#39;This language is more than a toy.&#39;</span></span>\n<span class=\"line\"><span style=\"color: #A31515\">&quot;&quot;&quot;</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Single and double quoted strings must be written on one line. They can contain a number of special\ncharacters through the <code>\\X</code> syntax."
      },
      {
        "type": "p",
        "text": "<code>\\b</code> - Backspace"
      },
      {
        "type": "p",
        "text": "<code>\\f</code> - Formfeed"
      },
      {
        "type": "p",
        "text": "<code>\\n</code> - Newline"
      },
      {
        "type": "p",
        "text": "<code>\\r</code> - Return"
      },
      {
        "type": "p",
        "text": "<code>\\t</code> - Tab"
      },
      {
        "type": "p",
        "text": "<code>\\'</code> - Single quote"
      },
      {
        "type": "p",
        "text": "<code>\\\"</code> - Double quote"
      }
    ],
    "path": "/documentation/language/datatypes.malloynb"
  },
  {
    "titles": [
      "Data Types In Malloy",
      "Boolean"
    ],
    "paragraphs": [],
    "path": "/documentation/language/datatypes.malloynb"
  },
  {
    "titles": [
      "Data Types In Malloy",
      "Boolean",
      "Boolean literals"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">true</span></span></code>"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">false</span></span></code>"
      }
    ],
    "path": "/documentation/language/datatypes.malloynb"
  },
  {
    "titles": [
      "Data Types In Malloy",
      "Boolean",
      "Boolean Comparison Nullability"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy has one interesting difference from most SQL engines in how it handles null values."
      },
      {
        "type": "p",
        "text": "For expressions which return a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">boolean</span></span></code>, e.g. <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">might_be_null</span><span style=\"color: #000000\"> &gt; </span><span style=\"color: #098658\">0</span></span></code>:"
      },
      {
        "type": "p",
        "text": "In Malloy, the result will only be <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">true</span></span></code> or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">false</span></span></code>"
      },
      {
        "type": "p",
        "text": "In SQL, the result is a boolean column where the value could be <code>TRUE</code>, <code>FALSE</code>, or <code>NULL</code>,"
      },
      {
        "type": "p",
        "text": "This is true for all the comparison operators (<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">&gt;</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">=</span></span></code>, etc.) as well as functions which return a boolean (e.g. <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">starts_with</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">is_inf</span></span></code>, etc.)."
      }
    ],
    "path": "/documentation/language/datatypes.malloynb"
  },
  {
    "titles": [
      "Data Types In Malloy",
      "Timestamp"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "A <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">timestamp</span></span></code> represents an instant in time."
      },
      {
        "type": "p",
        "text": "Malloy's approach to timezone related computations relating to timestamp data is explained in the <a href=\"timezones\">Timezones</a> section."
      }
    ],
    "path": "/documentation/language/datatypes.malloynb"
  },
  {
    "titles": [
      "Data Types In Malloy",
      "Timestamp",
      "Timestamp literals"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Timestamp literals are specified in Malloy with the <code>@</code> character. Seconds, subsecond resolution, and locale are optional."
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #098658\">@2001-02-03 04:05:06.001[America/Mexico_City]</span></span></code>"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #098658\">@2001-02-03 04:05:06.001</span></span></code>"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #098658\">@2001-02-03 04:05:06</span></span></code>"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #098658\">@2001-02-03 04:05</span></span></code>"
      },
      {
        "type": "p",
        "text": "In addition, in any of the above, a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">T</span></span></code> can be used instead of a space between the date and time portion of the timestamp string, as in"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #098658\">@2001-02-03T04:05:06.001</span></span></code>"
      },
      {
        "type": "p",
        "text": "A <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">date</span></span></code> literal, when used in an expression with a timestamp, also functions as a timestamp literal. That is"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">my_timestamp</span><span style=\"color: #000000\"> &gt; </span><span style=\"color: #098658\">@2003</span></span></code> is equivalent to <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">my_timestamp</span><span style=\"color: #000000\"> &gt; </span><span style=\"color: #098658\">@2003-01-01 00:00</span></span></code>"
      }
    ],
    "path": "/documentation/language/datatypes.malloynb"
  },
  {
    "titles": [
      "Data Types In Malloy",
      "Date"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "A <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">date</span></span></code> represents combination of year, month, and day into a single data item."
      }
    ],
    "path": "/documentation/language/datatypes.malloynb"
  },
  {
    "titles": [
      "Data Types In Malloy",
      "Date",
      "Date Literals"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Date literals are specified in Malloy with the <code>@</code> character. A literal can specify a date, a week, a month, a quarter or a year."
      },
      {
        "type": "p",
        "text": "Date: <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #098658\">@2001-02-03</span></span></code>"
      },
      {
        "type": "p",
        "text": "Month: <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #098658\">@2001-02</span></span></code>"
      },
      {
        "type": "p",
        "text": "Quarter: <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #098658\">@2001-Q2</span></span></code>"
      },
      {
        "type": "p",
        "text": "Year: <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #098658\">@2001</span></span></code>"
      },
      {
        "type": "p",
        "text": "Week: <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #098658\">@2001-02-04-WK</span></span></code> ( the sunday week containing 2001-02-04 )"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #098658\">@2001-02-03-WK</span></span></code> will generate an error because that day does not start a week. The week containing 2001-02-03 that would be <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #098658\">@2001-02-03</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">week</span></span></code>"
      }
    ],
    "path": "/documentation/language/datatypes.malloynb"
  },
  {
    "titles": [
      "Data Types In Malloy",
      "Arrays"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "A column in a table, or a dimension, or a measure, can be an array of values. In Malloy every element of an array is the same type, you cannot, for example, have an array which contains both a number and a string."
      }
    ],
    "path": "/documentation/language/datatypes.malloynb"
  },
  {
    "titles": [
      "Data Types In Malloy",
      "Arrays",
      "Array access"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Data in an array is accessed as if the array was a table joined into the query with a a field called <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">each</span></span></code> which contains the value of the array. This treatment of arrays like joins is different than the typical way of handling arrays, providing suite of functions to operatate on arrays which mimic the operations available to operate on tables. While you can still pass arrays as arguments to functions, the \"Malloy Way\" of computing with data in arrays is to treat them like a nested table."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">total_value</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">arrayName</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">each</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">avg_value</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">arrayName</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">each</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">min_value</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">arrayName</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">each</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">min</span><span style=\"color: #000000\">()</span></span></pre>"
      }
    ],
    "path": "/documentation/language/datatypes.malloynb"
  },
  {
    "titles": [
      "Data Types In Malloy",
      "Arrays",
      "Array Literal"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "An array literal is written as a comma separated list of values between a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">[</span></span></code> and a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">]</span></span></code>"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">west_coast</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> [</span><span style=\"color: #A31515\">&#39;CA&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39;OR&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39;WA&#39;</span><span style=\"color: #000000\">]</span></span></code>"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">even_digits</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> [</span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">4</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">6</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">8</span><span style=\"color: #000000\">]</span></span></code>"
      }
    ],
    "path": "/documentation/language/datatypes.malloynb"
  },
  {
    "titles": [
      "Data Types In Malloy",
      "Records and Repeated Records"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "These data types have various names in SQL dialects, \"Object\", and \"Structure\" are two common words. A record in malloy is a set of key value pairs."
      }
    ],
    "path": "/documentation/language/datatypes.malloynb"
  },
  {
    "titles": [
      "Data Types In Malloy",
      "Records and Repeated Records",
      "Record Literal"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">owner</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span><span style=\"color: #001080\">first_name</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;Marl&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">last_name</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;Sobyn&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">birthday</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">@1994-05-17</span><span style=\"color: #000000\">}</span></span></code>"
      },
      {
        "type": "p",
        "text": "The \"<em>name</em> <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">is</span></span></code>\" part of a record field can be left out if the value of the field is a dotted path, for example, these two record literals are identical"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">{</span><span style=\"color: #001080\">first_name</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">first_name</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">last_name</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">parent_join</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">last_name</span><span style=\"color: #000000\">}</span></span></code>"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">{</span><span style=\"color: #001080\">first_name</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">parent_join</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">last_name</span><span style=\"color: #000000\">}</span></span></code>"
      }
    ],
    "path": "/documentation/language/datatypes.malloynb"
  },
  {
    "titles": [
      "Data Types In Malloy",
      "Records and Repeated Records",
      "Record Access"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Data in a record is accesed with the dot (<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">.</span></span></code>) operator."
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">bigLastName</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">upper</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">person</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">last_name</span><span style=\"color: #000000\">)</span></span></code>"
      }
    ],
    "path": "/documentation/language/datatypes.malloynb"
  },
  {
    "titles": [
      "Data Types In Malloy",
      "Records and Repeated Records",
      "Repeated Record Literal"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "A repeated record is written as an array of records"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">pets</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> [</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  {</span><span style=\"color: #001080\">name</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;Rover&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;dog&#39;</span><span style=\"color: #000000\">},</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  {</span><span style=\"color: #001080\">name</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;Mister Stare&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;cat&#39;</span><span style=\"color: #000000\">},</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  {</span><span style=\"color: #001080\">name</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;Swimmy McSwimmerson&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;fish&#39;</span><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"><span style=\"color: #000000\">]</span></span></pre>"
      },
      {
        "type": "p",
        "text": "The names of each field can be omitted after the first record, for example, here is that same declaration written slightly more concisely:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">pets</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> [</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  {</span><span style=\"color: #001080\">name</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;Rover&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;dog&#39;</span><span style=\"color: #000000\">},</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  {</span><span style=\"color: #A31515\">&#39;Mister Stare&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39;cat&#39;</span><span style=\"color: #000000\">},</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  {</span><span style=\"color: #A31515\">&#39;Swimmy McSwimmerson&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39;fish&#39;</span><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"><span style=\"color: #000000\">]</span></span></pre>"
      },
      {
        "type": "p",
        "text": "There are a"
      }
    ],
    "path": "/documentation/language/datatypes.malloynb"
  },
  {
    "titles": [
      "Data Types In Malloy",
      "Records and Repeated Records",
      "Repeated record access"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Though the literal form of a repeated record looks like an array, the contents of a repeated record are accessed directly, (not using <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">.</span><span style=\"color: #001080\">each</span></span></code> as you would in an array). Accessing a field of a repeated record will unnest that record and join it into the query."
      }
    ],
    "path": "/documentation/language/datatypes.malloynb"
  },
  {
    "titles": [
      "Data Types In Malloy",
      "Unsupported SQL native data"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy may not have a corresponding data type for every data type which the SQL engine supports."
      },
      {
        "type": "p",
        "text": "Columns in sources which Malloy does not have a datatype for are considered \"unsupported.\" The following operations are legal on unsupported SQL native types and should allow data sets which contains data in these unknown types to still be useful in Malloy even if Malloy doesn't understand the data."
      },
      {
        "type": "p",
        "text": "Two expressions of the same type can be compared"
      },
      {
        "type": "p",
        "text": "An expression of unsupported SQL native type can be cast to a supported type"
      },
      {
        "type": "p",
        "text": "An unsupported SQL native type can be compared to <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">NULL</span></span></code>"
      }
    ],
    "path": "/documentation/language/datatypes.malloynb"
  },
  {
    "titles": [
      "Data Types In Malloy",
      "Intermediate Types"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The following types are not assignable to fields, and are\ntherefore considered <em>intermediate types</em>, in that they are\nprimarily used to represent part of a computation that\nyields a regular scalar type, often <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">boolean</span></span></code>."
      }
    ],
    "path": "/documentation/language/datatypes.malloynb"
  },
  {
    "titles": [
      "Data Types In Malloy",
      "Intermediate Types",
      "Regular Expressions"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Literal regular expressions are enclosed in single quotation\nmarks <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">&#39;</span></span></code> and preceded by either <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">/</span></span></code> or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">r</span></span></code>, e.g. <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #811F3F\">/&#39;.*&#39;</span></span></code> or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #811F3F\">r&#39;.*&#39;</span></span></code>. Both syntaxes are semantically equivalent."
      },
      {
        "type": "p",
        "text": "In the future, the literal regular expressions will likely\nbe simply slash-enclosed, e.g <code>/.*/</code>."
      },
      {
        "type": "p",
        "text": "Values of type <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">string</span></span></code> may be compared against regular\nexpressions using either the <a href=\"apply\">apply operator</a>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">name</span><span style=\"color: #000000\"> ? </span><span style=\"color: #811F3F\">r&#39;c.*&#39;</span></span></code> or the like operator, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">name</span><span style=\"color: #000000\"> ~ </span><span style=\"color: #811F3F\">r&#39;c.*&#39;</span></span></code>."
      }
    ],
    "path": "/documentation/language/datatypes.malloynb"
  },
  {
    "titles": [
      "Data Types In Malloy",
      "Intermediate Types",
      "Ranges"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "There are three types of ranges today: <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">number</span></span></code> ranges, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">date</span></span></code> ranges, and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">timestamp</span></span></code> ranges. The most basic ranges\nare of the form <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">start</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">to</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">end</span></span></code> and represent the range from <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">start</span></span></code> up to, but not including, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">end</span></span></code>, e.g. <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #098658\">10</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">to</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">20</span></span></code> or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #098658\">@2004-01</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">to</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">@2005-05</span></span></code>."
      },
      {
        "type": "p",
        "text": "Ranges may be used in conjunction with the <a href=\"apply\">apply operator</a> to test whether a value falls within a given range."
      }
    ],
    "path": "/documentation/language/datatypes.malloynb"
  },
  {
    "titles": [
      "Data Types In Malloy",
      "Intermediate Types",
      "Alternations and Partials"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "<em>Partials</em> represent a \"part of\" a comparison.\nSpecifically, a partial is a comparison missing its\nleft-hand side, and represents the condition of the\ncomparison yielding <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">true</span></span></code> if a given value were to be\nfilled in for that missing left-hand side. For example, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">&gt; </span><span style=\"color: #098658\">10</span></span></code> is a partial that represents the condition \"is greater\nthan ten.\" Likewise, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">!= </span><span style=\"color: #A31515\">&#39;CA&#39;</span></span></code> is a partial that represents the condition of not being equal to <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">&#39;CA&#39;</span></span></code>."
      },
      {
        "type": "p",
        "text": "<em>Alternations</em> are combinations of partials representing\neither the logical union (\"or\") or conjunction (\"and\") of\ntheir conditions. Alternations are represented using the\nunion alternation operator <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">|</span></span></code> and the conjunction\nalternation operator <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">&amp;</span></span></code>."
      },
      {
        "type": "p",
        "text": "For example, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">= </span><span style=\"color: #A31515\">&#39;CA&#39;</span><span style=\"color: #000000\"> | = </span><span style=\"color: #A31515\">&#39;NY&#39;</span></span></code> represents the condition of being equal to 'CA' or <em>alternatively</em> being equal to 'NY'. On the other hand, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">!= </span><span style=\"color: #A31515\">&#39;CA&#39;</span><span style=\"color: #000000\"> &amp; != </span><span style=\"color: #A31515\">&#39;NY&#39;</span></span></code> represents the condition of being not equal to 'CA' <em>as well as</em> being not equal to 'NY'."
      },
      {
        "type": "p",
        "text": "Scalar values, regular expressions, and\nranges may also be used in alternations, in which case the\ncondition is assumed to be that of equality, matching, and\ninclusion respectively."
      },
      {
        "type": "p",
        "text": "For example, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">&#39;CA&#39;</span><span style=\"color: #000000\"> | </span><span style=\"color: #811F3F\">r&#39;N.*&#39;</span></span></code> represents the condition of being equal to 'CA' or starting with 'N', and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #098658\">10</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">to</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">20</span><span style=\"color: #000000\"> | </span><span style=\"color: #098658\">20</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">to</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">30</span></span></code> represents the condition of being <em>either</em> between 10 and 20 <em>or</em> 20 and 30."
      },
      {
        "type": "p",
        "text": "Alternations and partials may be used in conjunction with the <a href=\"apply\">apply operator</a> to test whether a value meets the given condition."
      }
    ],
    "path": "/documentation/language/datatypes.malloynb"
  },
  {
    "titles": [
      "Data Types In Malloy",
      "Nullability"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Today, all Malloy types include the value <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">null</span></span></code>."
      }
    ],
    "path": "/documentation/language/datatypes.malloynb"
  },
  {
    "titles": [
      "Google Standard SQL (BigQuery)"
    ],
    "paragraphs": [],
    "path": "/documentation/language/dialect/bigquery.malloynb"
  },
  {
    "titles": [
      "Functions"
    ],
    "paragraphs": [],
    "path": "/documentation/language/dialect/bigquery.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Useful Functions not in the database function library"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-txt\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">string_agg_distinct</span></span>\n<span class=\"line\"><span style=\"color: #000000\">count_approx</span></span></pre>"
      }
    ],
    "path": "/documentation/language/dialect/bigquery.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Database Functions"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy code can, in addition to the <a href=\"../functions\">Malloy Standard Functions</a>, reference\nany of the listed functions here without needing to use <a href=\"../functions#raw-sql-functions\">Raw SQL Functions</a>."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-txt\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">date_from_unix_date</span></span>\n<span class=\"line\"><span style=\"color: #000000\">string_agg</span></span>\n<span class=\"line\"><span style=\"color: #000000\">repeat</span></span>\n<span class=\"line\"><span style=\"color: #000000\">reverse</span></span></pre>"
      }
    ],
    "path": "/documentation/language/dialect/bigquery.malloynb"
  },
  {
    "titles": [
      "Functions",
      "HyperLogLog Functions"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "In addition to the <a href=\"../hyperloglog\">Malloy Standard HLL Functions</a>, BigQuery supports\n<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">HLL_COUNT</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">MERGE</span></span></code>, which both merges sketches and estimates cardinality."
      },
      {
        "type": "p",
        "text": "See the <a href=\"https://cloud.google.com/bigquery/docs/reference/standard-sql/hll_functions\">BigQuery HyperLogLog Documentation</a>."
      }
    ],
    "path": "/documentation/language/dialect/bigquery.malloynb"
  },
  {
    "titles": [
      "External Resources"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "<a href=\"https://cloud.google.com/bigquery/docs/introduction-sql\">BigQuery SQL Reference</a>"
      }
    ],
    "path": "/documentation/language/dialect/bigquery.malloynb"
  },
  {
    "titles": [
      "DuckDB"
    ],
    "paragraphs": [],
    "path": "/documentation/language/dialect/duckdb.malloynb"
  },
  {
    "titles": [
      "Functions"
    ],
    "paragraphs": [],
    "path": "/documentation/language/dialect/duckdb.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Useful Functions not in the database function library"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-txt\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">count_approx</span></span>\n<span class=\"line\"><span style=\"color: #000000\">string_agg_distinct</span></span></pre>"
      }
    ],
    "path": "/documentation/language/dialect/duckdb.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Database Functions"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy code can, in addition to the <a href=\"../functions\">Malloy Standard Functions</a>, reference\nany of the listed functions here without needing to use <a href=\"../functions#raw-sql-functions\">Raw SQL Functions</a>."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-txt\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">list_extract</span></span>\n<span class=\"line\"><span style=\"color: #000000\">dayname</span></span>\n<span class=\"line\"><span style=\"color: #000000\">to_timestamp</span></span>\n<span class=\"line\"><span style=\"color: #000000\">string_agg</span></span>\n<span class=\"line\"><span style=\"color: #000000\">to_seconds</span></span>\n<span class=\"line\"><span style=\"color: #000000\">date_part</span></span>\n<span class=\"line\"><span style=\"color: #000000\">repeat</span></span>\n<span class=\"line\"><span style=\"color: #000000\">reverse</span></span></pre>"
      }
    ],
    "path": "/documentation/language/dialect/duckdb.malloynb"
  },
  {
    "titles": [
      "External Resources"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "<a href=\"https://duckdb.org/docs/\">DuckB Documentation</a>"
      }
    ],
    "path": "/documentation/language/dialect/duckdb.malloynb"
  },
  {
    "titles": [
      "MySQL"
    ],
    "paragraphs": [],
    "path": "/documentation/language/dialect/mysql.malloynb"
  },
  {
    "titles": [
      "Functions"
    ],
    "paragraphs": [],
    "path": "/documentation/language/dialect/mysql.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Useful Functions not in the database function library"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-txt\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">string_agg</span></span>\n<span class=\"line\"><span style=\"color: #000000\">string_agg_distinct</span></span></pre>"
      }
    ],
    "path": "/documentation/language/dialect/mysql.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Database Functions"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy code can, in addition to the <a href=\"../functions\">Malloy Standard Functions</a>, reference\nany of the listed functions here without needing to use <a href=\"../functions#raw-sql-functions\">Raw SQL Functions</a>."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-txt\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">repeat</span></span>\n<span class=\"line\"><span style=\"color: #000000\">reverse</span></span></pre>"
      }
    ],
    "path": "/documentation/language/dialect/mysql.malloynb"
  },
  {
    "titles": [
      "Errata"
    ],
    "paragraphs": [],
    "path": "/documentation/language/dialect/mysql.malloynb"
  },
  {
    "titles": [
      "Errata",
      "Boolean Filter Expressions"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Becase MySQL doesn't have a true boolean data type, a columns which contains boolean values\nwill be read as numeric by Malloy. This will make it impossible to use boolean <a href=\"../filter-expressions\">filter expressions</a>\nwithout explicitly casting the value to type boolean"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">presentAndNotAccountedFor</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">present</span><span style=\"color: #000000\">::</span><span style=\"color: #267F99\">boolean</span><span style=\"color: #000000\"> ~ </span><span style=\"color: #001080\">f</span><span style=\"color: #A31515\">&#39;true&#39;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">and</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">accountedFor</span><span style=\"color: #000000\">::</span><span style=\"color: #267F99\">boolean</span><span style=\"color: #000000\"> ~ </span><span style=\"color: #001080\">f</span><span style=\"color: #A31515\">&#39;false&#39;</span></span></pre>"
      }
    ],
    "path": "/documentation/language/dialect/mysql.malloynb"
  },
  {
    "titles": [
      "External Resources"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "<a href=\"https://dev.mysql.com/doc/\">MySQL Documentaion</a>"
      }
    ],
    "path": "/documentation/language/dialect/mysql.malloynb"
  },
  {
    "titles": [
      "PostgreSQL"
    ],
    "paragraphs": [],
    "path": "/documentation/language/dialect/postgres.malloynb"
  },
  {
    "titles": [
      "Functions"
    ],
    "paragraphs": [],
    "path": "/documentation/language/dialect/postgres.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Useful Functions not in the database function library"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-txt\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">string_agg_distinct</span></span></pre>"
      }
    ],
    "path": "/documentation/language/dialect/postgres.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Database Functions"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy code can, in addition to the <a href=\"../functions\">Malloy Standard Functions</a>, reference\nany of the listed functions here without needing to use <a href=\"../functions#raw-sql-functions\">Raw SQL Functions</a>."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-txt\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">string_agg</span></span>\n<span class=\"line\"><span style=\"color: #000000\">repeat</span></span>\n<span class=\"line\"><span style=\"color: #000000\">reverse</span></span></pre>"
      }
    ],
    "path": "/documentation/language/dialect/postgres.malloynb"
  },
  {
    "titles": [
      "External Resouces"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "<a href=\"https://www.postgresql.org/docs/\">PostgreSQL Documentation</a>"
      }
    ],
    "path": "/documentation/language/dialect/postgres.malloynb"
  },
  {
    "titles": [
      "Presto / Trino Dialect"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy supports Presto and Trino databases with two dialects which are closely related."
      }
    ],
    "path": "/documentation/language/dialect/presto-trino.malloynb"
  },
  {
    "titles": [
      "Functions"
    ],
    "paragraphs": [],
    "path": "/documentation/language/dialect/presto-trino.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Useful Functions not in the database function library"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-txt\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">hll_accumulate</span></span>\n<span class=\"line\"><span style=\"color: #000000\">hll_combine</span></span>\n<span class=\"line\"><span style=\"color: #000000\">hll_estimate</span></span>\n<span class=\"line\"><span style=\"color: #000000\">hll_export</span></span>\n<span class=\"line\"><span style=\"color: #000000\">hll_import</span></span>\n<span class=\"line\"><span style=\"color: #000000\">string_agg</span></span>\n<span class=\"line\"><span style=\"color: #000000\">string_agg_distinct</span></span>\n<span class=\"line\"><span style=\"color: #000000\">count_approx</span></span></pre>"
      }
    ],
    "path": "/documentation/language/dialect/presto-trino.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Database Functions"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy code written for these dialects can, in addition to the <a href=\"../functions\">Malloy Standard Functions</a>, reference\nany of the listed functions here without needing to use <a href=\"../functions#raw-sql-functions\">Raw SQL Functions</a>."
      },
      {
        "type": "p",
        "text": "Refer to the appropriate database documentaion for information on individual functions."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-txt\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">approx_percentile</span></span>\n<span class=\"line\"><span style=\"color: #000000\">arbitrary</span></span>\n<span class=\"line\"><span style=\"color: #000000\">array_distinct</span></span>\n<span class=\"line\"><span style=\"color: #000000\">array_except</span></span>\n<span class=\"line\"><span style=\"color: #000000\">array_intersect</span></span>\n<span class=\"line\"><span style=\"color: #000000\">array_join</span></span>\n<span class=\"line\"><span style=\"color: #000000\">array_max</span></span>\n<span class=\"line\"><span style=\"color: #000000\">array_min</span></span>\n<span class=\"line\"><span style=\"color: #000000\">array_normalize</span></span>\n<span class=\"line\"><span style=\"color: #000000\">array_remove</span></span>\n<span class=\"line\"><span style=\"color: #000000\">array_sort</span></span>\n<span class=\"line\"><span style=\"color: #000000\">array_split_into_chunks</span></span>\n<span class=\"line\"><span style=\"color: #000000\">array_union</span></span>\n<span class=\"line\"><span style=\"color: #000000\">arrays_overlap</span></span>\n<span class=\"line\"><span style=\"color: #000000\">bitwise_and</span></span>\n<span class=\"line\"><span style=\"color: #000000\">bitwise_and_agg</span></span>\n<span class=\"line\"><span style=\"color: #000000\">bitwise_or</span></span>\n<span class=\"line\"><span style=\"color: #000000\">bitwise_or_agg</span></span>\n<span class=\"line\"><span style=\"color: #000000\">bitwise_xor_agg</span></span>\n<span class=\"line\"><span style=\"color: #000000\">bool_and</span></span>\n<span class=\"line\"><span style=\"color: #000000\">bool_or</span></span>\n<span class=\"line\"><span style=\"color: #000000\">cardinality</span></span>\n<span class=\"line\"><span style=\"color: #000000\">combinations</span></span>\n<span class=\"line\"><span style=\"color: #000000\">contains</span></span>\n<span class=\"line\"><span style=\"color: #000000\">corr</span></span>\n<span class=\"line\"><span style=\"color: #000000\">date_format</span></span>\n<span class=\"line\"><span style=\"color: #000000\">date_parse</span></span>\n<span class=\"line\"><span style=\"color: #000000\">element_at</span></span>\n<span class=\"line\"><span style=\"color: #000000\">flatten</span></span>\n<span class=\"line\"><span style=\"color: #000000\">from_unixtime</span></span>\n<span class=\"line\"><span style=\"color: #000000\">json_extract_scalar</span></span>\n<span class=\"line\"><span style=\"color: #000000\">max_by</span></span>\n<span class=\"line\"><span style=\"color: #000000\">min_by</span></span>\n<span class=\"line\"><span style=\"color: #000000\">ngrams</span></span>\n<span class=\"line\"><span style=\"color: #000000\">percent_rank</span></span>\n<span class=\"line\"><span style=\"color: #000000\">regexp_like</span></span>\n<span class=\"line\"><span style=\"color: #000000\">regexp_replace</span></span>\n<span class=\"line\"><span style=\"color: #000000\">regexp_extract</span></span>\n<span class=\"line\"><span style=\"color: #000000\">repeat(STRING)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">reverse</span></span>\n<span class=\"line\"><span style=\"color: #000000\">sequence</span></span>\n<span class=\"line\"><span style=\"color: #000000\">shuffle</span></span>\n<span class=\"line\"><span style=\"color: #000000\">slice</span></span>\n<span class=\"line\"><span style=\"color: #000000\">split</span></span>\n<span class=\"line\"><span style=\"color: #000000\">split_part</span></span>\n<span class=\"line\"><span style=\"color: #000000\">to_unixtime</span></span>\n<span class=\"line\"><span style=\"color: #000000\">trim_array</span></span>\n<span class=\"line\"><span style=\"color: #000000\">url_extract_fragment</span></span>\n<span class=\"line\"><span style=\"color: #000000\">url_extract_host</span></span>\n<span class=\"line\"><span style=\"color: #000000\">url_extract_parameter</span></span>\n<span class=\"line\"><span style=\"color: #000000\">url_extract_path</span></span>\n<span class=\"line\"><span style=\"color: #000000\">url_extract_port</span></span>\n<span class=\"line\"><span style=\"color: #000000\">url_extract_protocol</span></span>\n<span class=\"line\"><span style=\"color: #000000\">url_extract_query</span></span>\n<span class=\"line\"><span style=\"color: #000000\">variance</span></span></pre>"
      }
    ],
    "path": "/documentation/language/dialect/presto-trino.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Presto Only"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The following functions are only available on Presto connections"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-txt\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">array_average</span></span>\n<span class=\"line\"><span style=\"color: #000000\">array_cum_sum</span></span>\n<span class=\"line\"><span style=\"color: #000000\">array_duplicates</span></span>\n<span class=\"line\"><span style=\"color: #000000\">array_intersect</span></span>\n<span class=\"line\"><span style=\"color: #000000\">array_has_duplicates</span></span>\n<span class=\"line\"><span style=\"color: #000000\">array_least_frequent</span></span>\n<span class=\"line\"><span style=\"color: #000000\">array_position array_sum</span></span>\n<span class=\"line\"><span style=\"color: #000000\">array_sort_desc</span></span>\n<span class=\"line\"><span style=\"color: #000000\">array_top_n</span></span>\n<span class=\"line\"><span style=\"color: #000000\">remove_nulls</span></span>\n<span class=\"line\"><span style=\"color: #000000\">reverse(ARRAY) </span></span></pre>"
      }
    ],
    "path": "/documentation/language/dialect/presto-trino.malloynb"
  },
  {
    "titles": [
      "External resources"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "<a href=\"https://prestodb.io/docs/current/\">Presto Documentation</a>"
      },
      {
        "type": "p",
        "text": "<a href=\"https://trino.io/docs/current/index.html\">Trino Documentation</a>"
      },
      {
        "type": "p",
        "text": "<a href=\"https://trino.io/docs/current/functions/hyperloglog.html\">Trino HyperLogLog Documentation</a>"
      }
    ],
    "path": "/documentation/language/dialect/presto-trino.malloynb"
  },
  {
    "titles": [
      "Snowflake"
    ],
    "paragraphs": [],
    "path": "/documentation/language/dialect/snowflake.malloynb"
  },
  {
    "titles": [
      "Functions"
    ],
    "paragraphs": [],
    "path": "/documentation/language/dialect/snowflake.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Useful Functions not in the database function library"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-txt\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">string_agg_distinct</span></span>\n<span class=\"line\"><span style=\"color: #000000\">string_agg</span></span></pre>"
      }
    ],
    "path": "/documentation/language/dialect/snowflake.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Database Functions"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy code can, in addition to the <a href=\"../functions\">Malloy Standard Functions</a>, reference\nany of the listed functions here without needing to use <a href=\"../functions#raw-sql-functions\">Raw SQL Functions</a>."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-txt\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">repeat</span></span>\n<span class=\"line\"><span style=\"color: #000000\">reverse</span></span></pre>"
      }
    ],
    "path": "/documentation/language/dialect/snowflake.malloynb"
  },
  {
    "titles": [
      "Functions",
      "HyperLogLog Functions"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "In addition to the <a href=\"../hyperloglog\">Malloy Standard HLL Functions</a>, Snowflake supports\n<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">HLL</span></span></code>, which both initializes a new HLL sketch, and estimates cardinality."
      },
      {
        "type": "p",
        "text": "See the <a href=\"https://docs.snowflake.com/en/user-guide/querying-approximate-cardinality\">Snowflake HyperLogLog Documentation</a>."
      }
    ],
    "path": "/documentation/language/dialect/snowflake.malloynb"
  },
  {
    "titles": [
      "External Resources"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "<a href=\"https://docs.snowflake.com/\">Snowflake Documentation</a>"
      }
    ],
    "path": "/documentation/language/dialect/snowflake.malloynb"
  },
  {
    "titles": [
      "Evaluation Spaces"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "All expressions in Malloy have an \"evaluation space\" which can be one of four values: <em>literal</em>, <em>constant</em>, <em>input</em>, and <em>output</em>."
      },
      {
        "type": "p",
        "text": "Functions may have constraints on what evaluation space particular arguments can be. For example:"
      },
      {
        "type": "p",
        "text": "In <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">lag</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">expr</span><span style=\"color: #000000\">)</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">expr</span></span></code> must be an output value."
      },
      {
        "type": "p",
        "text": "In <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">expr</span><span style=\"color: #000000\">)</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">expr</span></span></code> must be an input value."
      },
      {
        "type": "p",
        "text": "In <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">lag</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">expr</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">offset</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">default</span><span style=\"color: #000000\">)</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">default</span></span></code> must be a constant value."
      },
      {
        "type": "p",
        "text": "In <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">avg_moving</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">expr</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">preceding</span><span style=\"color: #000000\">)</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">preceding</span></span></code> must be a literal <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">number</span></span></code>."
      }
    ],
    "path": "/documentation/language/eval_space.malloynb"
  },
  {
    "titles": [
      "Evaluation Spaces",
      "Literals"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Literal expressions are any literal value that you can write in Malloy. These include literals of type <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">number</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">boolean</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">string</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">date</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">timestamp</span></span></code>, and even regular expressions. The following are all literals: <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #098658\">12</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">true</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">&#39;hello world&#39;</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #098658\">@2003</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #098658\">@2011-11-11 11:11:11</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #811F3F\">r&#39;.*&#39;</span></span></code>."
      },
      {
        "type": "p",
        "text": "Some functions require that particular arguments be <em>literals</em>. For example, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">avg_moving</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">expr</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">preceding</span><span style=\"color: #000000\">)</span></span></code> required that <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">preceding</span></span></code> be a literal <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">number</span></span></code>."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">##(docs) hidden</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&quot;flights.malloy&quot;</span></span></pre>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Second argument must be a literal</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">rolling_avg</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">avg_moving</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/eval_space.malloynb"
  },
  {
    "titles": [
      "Evaluation Spaces",
      "Constants"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Constant expressions are produced by operating on literals, e.g. <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> + </span><span style=\"color: #098658\">1</span></span></code> etc."
      },
      {
        "type": "p",
        "text": "Some functions require that particular arguments be <em>constants</em>. For example, the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">default</span></span></code> argument to <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">lag</span></span></code> must be constant:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Third argument must be a constant (or literal)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">prev_carrier1</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">lag</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;NO&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39; &#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39;VALUE&#39;</span><span style=\"color: #000000\">))</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">prev_carrier2</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">lag</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39;NO VALUE&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Currently, when constants are saved as dimensions, they become <em>input fields</em>, even though they are known to be constants. This may change in the future."
      }
    ],
    "path": "/documentation/language/eval_space.malloynb"
  },
  {
    "titles": [
      "Evaluation Spaces",
      "Inputs"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Input expressions are those that reference columns in a table or dimensions defined in a source. They represent data that exists inside the source table or that can be computed directly from a particular row of data."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "In the above query, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">carrier</span></span></code> is an input expression (in particular, an input field)."
      }
    ],
    "path": "/documentation/language/eval_space.malloynb"
  },
  {
    "titles": [
      "Evaluation Spaces",
      "Outputs"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Output expressions are those which reference columns in the output of a query or aggregate values. They represent values which can be produced from the source table. Dimensions are only <em>output</em> values when they are included in the query. Aggregate values are always output values, because they don't need to be included in the result table to be known."
      }
    ],
    "path": "/documentation/language/eval_space.malloynb"
  },
  {
    "titles": [
      "Evaluation Spaces",
      "Outputs",
      "Dimensional Outputs"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Any time a field is included in a query, it creates an <em>output field</em> with the same name:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">new_field</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "The above query defines <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">carrier</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">new_field</span></span></code>, and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">flight_count</span></span></code> as <em>output fields</em> of the query."
      },
      {
        "type": "p",
        "text": "When inside a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">:</span></span></code> statement, field references will by default use the <em>output field</em> with that name. There is often an <em>input field</em> with the same name, and in that case the output field will take precedence. In the following query, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span></code> creates an output field called <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">carrier</span></span></code>. In <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">lag</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\">)</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">carrier</span></span></code> refers to that output field (rather than the input field <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">carrier</span></span></code> defined in <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">flights</span></span></code>) because it appears inside a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">:</span></span></code> statement."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">prev_carrier</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">lag</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "In this next query, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">output_carrier</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">carrier</span></span></code> creates an output field called <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">output_carrier</span></span></code>, which is referenced in the subsequent line."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">output_carrier</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">prev_carrier</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">lag</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">output_carrier</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Here, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">prev_carrier</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">lag</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\">)</span></span></code> would result in an error, because <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">carrier</span></span></code> is an <em>input expression</em>, and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">lag</span></span></code> requires that its first argument be an output expression."
      }
    ],
    "path": "/documentation/language/eval_space.malloynb"
  },
  {
    "titles": [
      "Evaluation Spaces",
      "Outputs",
      "Aggregate Outputs"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "An aggregate value is always considered to be an output expression, even when it is a direct reference to a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">measure</span></span></code>."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">prev_carrier_flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">lag</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/eval_space.malloynb"
  },
  {
    "titles": [
      "Expressions"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Expressions in Malloy are much like expressions in any other language; they can have variables and operators and function calls in\nthe same syntax users are familiar with. However, Malloy also introduces several other kinds of expressions useful for the task of data analysis and transformation."
      }
    ],
    "path": "/documentation/language/expressions.malloynb"
  },
  {
    "titles": [
      "Expressions",
      "Identifiers"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Fields may be referenced by name, and fields in joins or nested structures can be accessed using a period (<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">.</span></span></code>) as in <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">item</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">item_property</span></span></code>"
      }
    ],
    "path": "/documentation/language/expressions.malloynb"
  },
  {
    "titles": [
      "Expressions",
      "Identifiers",
      "Escaping reserved keywords"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "If a column name in a table conflicts with a keyword in Malloy, use backquotes to quote the keyword. Back-quoted identifiers can also\ncontain spaces and any special characters the database supports in field names; <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">.</span></span></code>s in back-quoted identifiers are not currently supported."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #001080\">year_plus_one</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">`year`</span><span style=\"color: #000000\"> + </span><span style=\"color: #098658\">1</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #001080\">`name with spaces`</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #000000; font-style: italic\">some value</span></span></pre>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">##(docs) hidden</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&quot;flights.malloy&quot;</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; { </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">origin</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">county</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">not</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">null</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">origin</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_county</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\">  {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">origin</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">county</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">} -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_county</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">county</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">3</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Identifiers that share a name with a keyword in Malloy must be enclosed in back ticks <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">`</span></span></code>, e.g. <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">`year`</span></span></code>."
      }
    ],
    "path": "/documentation/language/expressions.malloynb"
  },
  {
    "titles": [
      "Expressions",
      "Mathematical Operators"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Typical mathematical operators <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">+</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">-</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">*</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">/</span></span></code>, and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">%</span></span></code> (modulo) work as expected, and parentheses may be used to override precedence, e.g. <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">six</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">10</span><span style=\"color: #000000\"> * (</span><span style=\"color: #098658\">3</span><span style=\"color: #000000\"> - </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">) / </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\"> + </span><span style=\"color: #098658\">1</span></span></code>."
      },
      {
        "type": "p",
        "text": "The unary minus / negation operator is also allowed, e.g. <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">value</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> -</span><span style=\"color: #001080\">cost</span></span></code>."
      }
    ],
    "path": "/documentation/language/expressions.malloynb"
  },
  {
    "titles": [
      "Expressions",
      "Logical Operators"
    ],
    "paragraphs": [],
    "path": "/documentation/language/expressions.malloynb"
  },
  {
    "titles": [
      "Expressions",
      "Logical Operators",
      "Comparison Operators"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Standard comparison operators <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">&gt;</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">&lt;</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">&gt;=</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">&lt;=</span></span></code>, and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">=</span></span></code> are available in Malloy. \"Not equals\" is expressed using the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">!=</span></span></code> operator."
      }
    ],
    "path": "/documentation/language/expressions.malloynb"
  },
  {
    "titles": [
      "Expressions",
      "Logical Operators",
      "Boolean Operators"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy includes the basic binary boolean operators <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">and</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">or</span></span></code>, as well as the unary <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">not</span></span></code> operator."
      }
    ],
    "path": "/documentation/language/expressions.malloynb"
  },
  {
    "titles": [
      "Expressions",
      "Functions"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Many functions available in SQL are available unchanged in Malloy. Malloy provides some compatibility transformations for known functions. Unknown functions may be called like <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">cbrt</span><span style=\"color: #000000\">!(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">)</span></span></code> or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">timestamp_seconds</span><span style=\"color: #000000\">!</span><span style=\"color: #795E26\">timestap</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">)</span></span></code> to specify a return type. For detailed information, as well as a full list of all available functions, see the <a href=\"./functions\">Functions</a> section."
      }
    ],
    "path": "/documentation/language/expressions.malloynb"
  },
  {
    "titles": [
      "Expressions",
      "Aggregation"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Aggregations may included in an expression to create <a href=\"fields#measures\">measures</a>, e.g. <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">distance</span><span style=\"color: #000000\">)</span></span></code>, or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">aircraft_models</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">seats</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">()</span></span></code>. For detailed information, see the <a href=\"aggregates\">Aggregates</a> section."
      }
    ],
    "path": "/documentation/language/expressions.malloynb"
  },
  {
    "titles": [
      "Expressions",
      "Filtered Expressions"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Aggregate expressions may be filtered, using the <a href=\"filters\">usual filter syntax</a>."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">distance_2003</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">distance</span><span style=\"color: #000000\">) { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\"> ? </span><span style=\"color: #098658\">@2003</span><span style=\"color: #000000\"> }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">ca_flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">() { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">origin</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">state</span><span style=\"color: #000000\"> ? </span><span style=\"color: #A31515\">&#39;CA&#39;</span><span style=\"color: #000000\"> }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/expressions.malloynb"
  },
  {
    "titles": [
      "Expressions",
      "Type Cast"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Type cast may be accomplished with the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">::</span></span></code> operator."
      },
      {
        "type": "p",
        "text": "Type casting may be accomplished with the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">::</span><span style=\"color: #001080\">type</span></span></code> syntax."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">distance_summary</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">total_distance</span><span style=\"color: #000000\">::</span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39; miles&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/expressions.malloynb"
  },
  {
    "titles": [
      "Expressions",
      "Safe Type Cast"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Safe Type cast may be accomplished with the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">:::</span></span></code> operator.  A safe type cast will return <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">null</span></span></code>\nif an error occurs during the cast operation. Safe Type Cast is particularly useful in loading data. Not all databases support safe type cast."
      },
      {
        "type": "p",
        "text": "Type casting may be accomplished with the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">:::</span><span style=\"color: #001080\">type</span></span></code> syntax."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">distance_summary</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">total_distance</span><span style=\"color: #000000\">:::</span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39; miles&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/expressions.malloynb"
  },
  {
    "titles": [
      "Expressions",
      "Casting to specific database types"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy has its own type system. A database engine needs to know for how each piece of data is stored, but Malloy only needs to worry about the underlying type (like string or numeric) of a piece of data. Sometimes, when writing a data transformation, it is important torefelct back to the SQL engine a particular datatype. Quoting the destination type will tell Malloy to use that specific type for the result."
      },
      {
        "type": "p",
        "text": "Note: If you cast an expression to an <a href=\"datatypes#unsupported-sql-native-data\">unsupported data type, there is a very limited set of operations in Malloy which can use that value</a>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        </span><span style=\"color: #001080\">dest</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">destination_code</span><span style=\"color: #000000\">::</span><span style=\"color: #A31515\">&quot;VARCHAR(3)&quot;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        </span><span style=\"color: #001080\">dist</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">distance</span><span style=\"color: #000000\">::</span><span style=\"color: #A31515\">&quot;smallint&quot;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">1</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/expressions.malloynb"
  },
  {
    "titles": [
      "Expressions",
      "Pick Expressions"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">pick</span></span></code> construction in Malloy is similar to <code>CASE</code> statements in SQL."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">pick</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;small&#39;</span><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">when</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">size</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #098658\">10</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">pick</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;medium&#39;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">when</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">size</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #098658\">20</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">else</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;large&#39;</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Pick expressions are also compatible with the <a href=\"#application\">apply operator</a> and partial comparisons."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">size</span><span style=\"color: #000000\"> ?</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">pick</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;small&#39;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">when</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #098658\">10</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">pick</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;medium&#39;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">when</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #098658\">20</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">else</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;large&#39;</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Pick can be used to \"clean\" data, combining similar dirty values into one clean value. In the following example, the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">pick</span></span></code> statement collects all the \"this actually\nshipped\" statuses, and because there is no <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">else</span></span></code>, leaves the other\nstatus values alone."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">shipping_status</span><span style=\"color: #000000\"> ?</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">pick</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;shipped&#39;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">when</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;will call&#39;</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">&#39;shipped&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">pick</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;ignore&#39;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">when</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;bad1&#39;</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">&#39;bad2&#39;</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">&#39;testing&#39;</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Another common kind of cleaning is to have a small set you want to group\nby and all other values are compressed into <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">null</span></span></code>. A <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">pick</span></span></code> clause with no value\npicks an applied value when the condition is met."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">status</span><span style=\"color: #000000\"> ?</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">pick</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">when</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;good&#39;</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">&#39;ok&#39;</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">&#39;fine&#39;</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">// leave these alone</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">else</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">                        </span><span style=\"color: #008000\">// ignore the rest</span></span></pre>"
      },
      {
        "type": "p",
        "text": "If you need to match on multiple fields and conditions, use a dimension."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">Facility_Type_State</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">pick</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;Cali Heli&#39;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">when</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">state</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;CA&#39;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">and</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">fac_type</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;HELIPORT&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">pick</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;Seaplane at SeaTac&#39;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">when</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">state</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;WA&#39;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">and</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">city</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;SEATTLE&#39;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">and</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">fac_type</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;SEAPLANE BASE&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">pick</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;Phoenix Ultra&#39;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">when</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">state</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;AZ&#39;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">and</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">fac_type</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;ULTRALIGHT&#39;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">and</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">city</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;PHOENIX&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">else</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;Not Needed&#39;</span></span></pre>"
      }
    ],
    "path": "/documentation/language/expressions.malloynb"
  },
  {
    "titles": [
      "Expressions",
      "Time Expressions"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy has built in constructs to simplify many time-related operations, which are described here."
      }
    ],
    "path": "/documentation/language/expressions.malloynb"
  },
  {
    "titles": [
      "Expressions",
      "Time Expressions",
      "Time Ranges"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "A time value can be compared to a range. If you <a href=\"#application\">apply</a> a time to a range, (for example, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">event_time</span><span style=\"color: #000000\"> ? </span><span style=\"color: #098658\">@2003</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">to</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">@2004</span></span></code>) that will check if the value is within the range. You can also use <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">=</span></span></code> to see if a time is with a range, or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">&lt;</span></span></code> to test for before the range it will be <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">&lt;</span></span></code>, or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">&gt;</span></span></code> for after the range."
      },
      {
        "type": "p",
        "text": "See <a href=\"time-ranges\">Time Ranges</a> for more details."
      }
    ],
    "path": "/documentation/language/expressions.malloynb"
  },
  {
    "titles": [
      "Expressions",
      "Time Expressions",
      "Time Truncation"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "To truncate a time value to a given timeframe, use the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">.</span></span></code> operator followed by the timeframe, e.g. <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">event_time</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">quarter</span></span></code> or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">now</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">year</span></span></code>. See <a href=\"timestamp-operations#truncation\">Timestamp Truncation</a> for details."
      },
      {
        "type": "p",
        "text": "A truncation made this way can also function as a range. The range begins\nat the moment of truncation and the duration is the timeframe unit\nused to specify the truncation, so for example <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">time</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">year</span></span></code>\nwould be a range covering the entire year which contains <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">time</span></span></code>."
      },
      {
        "type": "p",
        "text": "This is extremely useful with the <a href=\"#application\">apply operator</a>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">?</span></span></code>. To see if two events happen in the same calendar year, for example, the boolean expression in Malloy is <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">one_time</span><span style=\"color: #000000\"> ? </span><span style=\"color: #001080\">other_time</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">year</span></span></code>."
      }
    ],
    "path": "/documentation/language/expressions.malloynb"
  },
  {
    "titles": [
      "Expressions",
      "Time Expressions",
      "Time Extraction"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Another very common grouping for time related data is by particular components, and this extraction of a single component as an integer. In Malloy this gesture looks like <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">hour</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">event_time</span><span style=\"color: #000000\">)</span></span></code> or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">minute</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">event_time</span><span style=\"color: #000000\">)</span></span></code>. See <a href=\"timestamp-operations#extraction\">Timestamp extraction</a> for more details."
      }
    ],
    "path": "/documentation/language/expressions.malloynb"
  },
  {
    "titles": [
      "Expressions",
      "Time Expressions",
      "Interval extraction"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "To measure the difference between two times, pass a range expression to\none of the extraction functions."
      },
      {
        "type": "p",
        "text": "For more details see <a href=\"time-ranges#interval-measurement\">Interval Measurement</a>"
      }
    ],
    "path": "/documentation/language/expressions.malloynb"
  },
  {
    "titles": [
      "Expressions",
      "Time Expressions",
      "Time Literals"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Time literals are specified in Malloy with the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">@</span></span></code> character. A literal\nspecified this way has an implied duration which means a literal\ncan act like a range. See <a href=\"datatypes#timestamp-literals\">Timestamp literals</a> and <a href=\"datatypes#date-literals\">Date literals</a> for more details."
      },
      {
        "type": "p",
        "text": "In addition the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">@</span></span></code> based literal syntax, Malloy also has one built in time constant, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">now</span></span></code>, representing the current time."
      }
    ],
    "path": "/documentation/language/expressions.malloynb"
  },
  {
    "titles": [
      "Expressions",
      "Numeric Ranges"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "A numeric value can be compared to a range. If you <a href=\"#application\">apply</a> a number to a range, (for example, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">distance</span><span style=\"color: #000000\"> ? </span><span style=\"color: #098658\">10</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">to</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">20</span></span></code>) that will check if the value is within the range (left inclusive, right exclusive)."
      }
    ],
    "path": "/documentation/language/expressions.malloynb"
  },
  {
    "titles": [
      "Expressions",
      "Special Filter Expression Syntax"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "As filtering is an incredibly common operation in data analysis, Malloy has special syntax to make filter expressions succinct and powerful. In addition to regular comparison and boolean operators, Malloy includes <em>partial comparisons</em>, <em>alternation</em>, and <em>application</em>, as described below."
      }
    ],
    "path": "/documentation/language/expressions.malloynb"
  },
  {
    "titles": [
      "Expressions",
      "Special Filter Expression Syntax",
      "Partial Comparison"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Partial comparisons, or \"partials\" are written with a binary comparison operator followed by a value, e.g. <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">&gt; </span><span style=\"color: #098658\">42</span></span></code> or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">not</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">null</span></span></code>. These can be thought of as conditions-as-values, or as functions that return a boolean."
      }
    ],
    "path": "/documentation/language/expressions.malloynb"
  },
  {
    "titles": [
      "Expressions",
      "Special Filter Expression Syntax",
      "Alternation"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Conditions can be logically combined with the two alternation operators, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">&amp;</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">|</span></span></code>. These are different from <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">and</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">or</span></span></code> in that they operate on conditions which return boolean values, rather than boolean values directly."
      },
      {
        "type": "p",
        "text": "The <em>union alternation</em> operator <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">|</span></span></code> represents the logical union of two conditions. An expression like <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> | </span><span style=\"color: #001080\">y</span></span></code> can be read \"if either <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">x</span></span></code> or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">y</span></span></code>.\" For example <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">= </span><span style=\"color: #A31515\">&#39;CA&#39;</span><span style=\"color: #000000\"> | = </span><span style=\"color: #A31515\">&#39;NY&#39;</span></span></code> represents the condition \"is either CA or NY\"."
      },
      {
        "type": "p",
        "text": "The <em>conjunction alternation</em> operator <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">&amp;</span></span></code> represents the logical conjunction of two conditions. An expression like <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> &amp; </span><span style=\"color: #001080\">y</span></span></code> can be read \"if both <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">x</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">y</span></span></code>.\" For example, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">&gt; </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\"> &amp; &lt; </span><span style=\"color: #098658\">10</span></span></code> represents the condition \"is greater than 5 and less than 10\"."
      },
      {
        "type": "p",
        "text": "Values can be used directly with the alternation operators, in which case the operator is assumed to be <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">=</span></span></code>. For example, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">&#39;CA&#39;</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">&#39;NY&#39;</span></span></code> is equivalent to <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">= </span><span style=\"color: #A31515\">&#39;CA&#39;</span><span style=\"color: #000000\"> | = </span><span style=\"color: #A31515\">&#39;NY&#39;</span></span></code>."
      }
    ],
    "path": "/documentation/language/expressions.malloynb"
  },
  {
    "titles": [
      "Expressions",
      "Special Filter Expression Syntax",
      "Application"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The apply operator <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">?</span></span></code> \"applies\" a value to another value, condition, or computation. This is most often used with partial comparisons or alternations."
      },
      {
        "type": "p",
        "text": "Applying a value to a condition is like filling in the condition with the given value. For example, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">height</span><span style=\"color: #000000\"> ? &gt; </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\"> &amp; &lt; </span><span style=\"color: #098658\">10</span></span></code> is equivalent to <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">height</span><span style=\"color: #000000\"> &gt; </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">and</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">height</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #098658\">10</span></span></code>."
      },
      {
        "type": "p",
        "text": "Applying a value to another value applies a default comparison on the two values:"
      },
      {
        "type": "p",
        "text": "Values can be applied to <a href=\"#pick-expressions\">pick expressions</a> to make them more succinct."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">size</span><span style=\"color: #000000\"> ?</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">pick</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;small&#39;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">when</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #098658\">10</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">pick</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;medium&#39;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">when</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #098658\">20</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">else</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;large&#39;</span></span></pre>"
      }
    ],
    "path": "/documentation/language/expressions.malloynb"
  },
  {
    "titles": [
      "Expressions",
      "Special Filter Expression Syntax",
      "Null Operations"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy has the keyword <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">null</span></span></code> to represent the null value."
      },
      {
        "type": "p",
        "text": "To check to see if a value is null, Malloy uses the same <code>IS NULL</code> and <code>IS NOT NULL</code> operators as SQL."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">name_not_present</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">name</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">null</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">name_present</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">name</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">not</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">null</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Malloy also has the operator <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">??</span></span></code>, which in other languages is sometimes called the \"Nullish Coalescing\" operator, for providing a value to use in case an expression is null."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">name_cleaned</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">name</span><span style=\"color: #000000\"> ?? </span><span style=\"color: #A31515\">&#39;(No Name Provided)&#39;</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Malloy also protects the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">NOT</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">!=</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">~!</span></span></code> opertators, for more information refer to <a href=\"null-handling\">Expressions Involving NULL</a>"
      }
    ],
    "path": "/documentation/language/expressions.malloynb"
  },
  {
    "titles": [
      "Expressions",
      "Special Filter Expression Syntax",
      "Operator Precedence"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "From highest to lowest precedence, here are the Malloy operators"
      }
    ],
    "path": "/documentation/language/expressions.malloynb"
  },
  {
    "titles": [
      "Fields"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Fields constitute all kinds of data in Malloy. They\ncan represent dimensional attributes sourced directly from\ntables in a database, constant values to be used in later analysis, computed metrics derived from other fields, or even nested structures created from aggregating subqueries."
      }
    ],
    "path": "/documentation/language/fields.malloynb"
  },
  {
    "titles": [
      "Fields",
      "Defining Fields"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Fields defined in sources are reusable. A field is a <em>dimension</em>, <em>measure</em> or <em>view</em>, or <em>calculation</em>.  When these are used in a query, these fields are invoked with <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">:</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">:</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">:</span></span></code>, or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">:</span></span></code>.  Their definitions are syntactically identical whether defined in a source or a view (with the exception of calculations, which can only be defined in a view, and not in a source). In either case, they are defined using the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">is</span></span></code> keyword."
      },
      {
        "type": "p",
        "text": "<strong>In a source</strong>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">users</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/users.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">age_in_dog_years</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">age</span><span style=\"color: #000000\"> * </span><span style=\"color: #098658\">7</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "<strong>In a query</strong>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">users</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">age_in_dog_years</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">age</span><span style=\"color: #000000\"> * </span><span style=\"color: #098658\">7</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "The right hand side of this kind of definition can be any\nfield expression. See the <a href=\"expressions\">Expressions</a>\nsection for more information."
      },
      {
        "type": "p",
        "text": "Like dimensions and measures, views can also be defined as\npart of a source or in a query's view. When a view is used or defined in another view, it is known as a \"nested view\" and produces an \"aggregating\nsubquery.\" See the <a href=\"nesting\">Nesting</a> section for a\ndetailed discussion of nested views."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">##(docs) hidden</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&quot;flights.malloy&quot;</span></span></pre>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_month</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">departure_month</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">month</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">3</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/fields.malloynb"
  },
  {
    "titles": [
      "Fields",
      "Field Names"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Field names generally must start with a letter or underscore, and can only contain letters, numbers, and underscores. Field names which don't follow these rules, or which conflict with a Malloy keyword, must be enclosed in back ticks, e.g. <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\"> </span><span style=\"color: #001080\">`year`</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">year</span></span></code>."
      }
    ],
    "path": "/documentation/language/fields.malloynb"
  },
  {
    "titles": [
      "Fields",
      "Kinds of Fields"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy has four different kinds of fields: <em>dimensions</em>, <em>measures</em>, <em>views</em>, and <em>calculations</em>."
      }
    ],
    "path": "/documentation/language/fields.malloynb"
  },
  {
    "titles": [
      "Fields",
      "Kinds of Fields",
      "Dimensions"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Dimensions are fields representing scalar values. All fields\ninherited directly from a table are dimensions."
      },
      {
        "type": "p",
        "text": "Dimensions are defined using expressions that contain no\naggregate functions."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">users2</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/users.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">full_name</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">first_name</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39; &#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">last_name</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Dimensions may be used in both reductions and projections."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #008000\">// Show the top 10 full names by number of occurrences</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">users2</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">10</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">full_name</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">occurrences</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #008000\">// Show 10 users&#39; full names</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">users2</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">full_name</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">10</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/fields.malloynb"
  },
  {
    "titles": [
      "Fields",
      "Kinds of Fields",
      "Measures"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Measures are fields representing aggregated data over multiple records. Measures may not be used in projections (i.e., <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">:</span></span></code> queries), they can only be used in \"group by\" or \"aggregating\" queries."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights2</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #008000\">-- define the measure in the source:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">total_flight_time</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">flight_time</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights2</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #008000\">-- use the previously defined measure in a query:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">total_flight_time</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/fields.malloynb"
  },
  {
    "titles": [
      "Fields",
      "Kinds of Fields",
      "Views"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "A view is a query that has been saved to the semantic model. By adding a view to a Source, you are indicating that this is an important query for the dataset."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_carrier</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "A view can always begin with another view from the same source. In the following example, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">top_carriers</span></span></code> is a view that starts with the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">by_carrier</span></span></code> view, selects only the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">carrier</span></span></code> column, and sets a limit of 5 rows."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  ...</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">top_carriers</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">by_carrier</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">5</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Views are composable building blocks, which you can use for complex analysis. The following query nests two different views: the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">by_carrier</span></span></code> view computes <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">flight_count</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">destination_count</span></span></code> for each airline in the dataset. Nesting the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">by_manufacturer</span></span></code> view shows the aircraft count, broken out by manufacturer within each of the airlines."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">by_carrier</span><span style=\"color: #000000\"> + {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">5</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_manufacturer</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "See the <a href=\"nesting\">Nesting</a> section for more details about nested views."
      }
    ],
    "path": "/documentation/language/fields.malloynb"
  },
  {
    "titles": [
      "Fields",
      "Kinds of Fields",
      "Calculations (Window Functions)"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "<em>Calculations</em> are fields based off of groupings and aggregate values in a view, and therefore can only be created in a view with <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">:</span></span></code> and can not be predefined in a source. See the <a href=\"./calculations_windows\">Calculations and Window Functions</a> section for details."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count_rank</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">rank</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/fields.malloynb"
  },
  {
    "titles": [
      "Malloy Filter Expressions"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy includes specialized sub-languages for filtering <a href=\"#string-filter-expressions\">string</a>, <a href=\"#numeric-filter-expressions\">number</a>, <a href=\"#temporal-filter-expressions\">date</a>, <a href=\"#temporal-filter-expressions\">timestamp</a> or <a href=\"#boolean-filter-expressions\">boolean</a> data. There is a specialized language for each data type designed to create concise, powerful, and readable data filters."
      },
      {
        "type": "p",
        "text": "A filter expression is a special <a href=\"#more-about-f-strings\">\"f-string\"</a>, starting with <code>f'</code> and ending with <code>'</code>"
      },
      {
        "type": "p",
        "text": "A filter expression is applied to a value with the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">~</span></span></code> or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">!~</span></span></code> operators. The result of a filter expression comparison will be a boolean value.  Here are examples of a filter expressions in Malloy for each data type."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #001080\">is_primary_color</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">color</span><span style=\"color: #000000\"> ~ </span><span style=\"color: #001080\">f</span><span style=\"color: #A31515\">&#39;red,green,blue&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #001080\">one_digit</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">num_val</span><span style=\"color: #000000\"> ~ </span><span style=\"color: #001080\">f</span><span style=\"color: #A31515\">&#39;(1,9)&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #001080\">did_not_happen</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">have_pictures</span><span style=\"color: #000000\"> ~ </span><span style=\"color: #001080\">f</span><span style=\"color: #A31515\">&#39;false&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #001080\">happened_this_week</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">event_timestamp</span><span style=\"color: #000000\"> ~ </span><span style=\"color: #001080\">f</span><span style=\"color: #A31515\">&#39;this week&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #001080\">total_this_quarter</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">num_val</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">() { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">order_date</span><span style=\"color: #000000\"> ~ </span><span style=\"color: #001080\">f</span><span style=\"color: #A31515\">&#39;this quarter&#39;</span><span style=\"color: #000000\"> }</span></span></pre>"
      }
    ],
    "path": "/documentation/language/filter-expressions.malloynb"
  },
  {
    "titles": [
      "String Filter Expressions"
    ],
    "paragraphs": [],
    "path": "/documentation/language/filter-expressions.malloynb"
  },
  {
    "titles": [
      "String Filter Expressions",
      "Examples of String Filter Expressions"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The <code>\\</code> character is used to escape any special meaning"
      }
    ],
    "path": "/documentation/language/filter-expressions.malloynb"
  },
  {
    "titles": [
      "String Filter Expressions",
      "Negation in String Filter Expressions"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "A <code>-</code> before a string expression means \"not\""
      }
    ],
    "path": "/documentation/language/filter-expressions.malloynb"
  },
  {
    "titles": [
      "String Filter Expressions",
      "Combining String Filter Expressions"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "There are three seperators that can be used to combine string filter expressions: <code>,</code> (the comma operator), <code>;</code> (the 'and' operator), <code>|</code> (the 'or' operator)\nAlso groups of string clauses can use <code>(</code> and <code>)</code> for grouping."
      },
      {
        "type": "p",
        "text": "A string of clauses seperated by <code>,</code> will have all the positive matches or'd together (included), and all the negative matches anded (excluded)"
      },
      {
        "type": "p",
        "text": "White space at the beginning or end of a clause is ignored"
      },
      {
        "type": "p",
        "text": "You will need to use <code>\\</code> (backslash) to escape ..."
      },
      {
        "type": "p",
        "text": "Spaces at the beginning or end of a match"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">\\</span><span style=\"color: #0000FF\">null</span></span></code> or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">\\</span><span style=\"color: #001080\">empty</span></span></code>"
      },
      {
        "type": "p",
        "text": "The match charcacters <code>%</code> and <code>_</code>"
      },
      {
        "type": "p",
        "text": "Any of <code>,</code> <code>|</code> <code>;</code> </code>\\</code> <code>(</code> <code>)</code>"
      }
    ],
    "path": "/documentation/language/filter-expressions.malloynb"
  },
  {
    "titles": [
      "Numeric Filter Expressions"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "In <code>to</code> ranges the <code>()</code> characters indicate inclusion of the endpoints, and <code>[]</code> indicate exclusion."
      }
    ],
    "path": "/documentation/language/filter-expressions.malloynb"
  },
  {
    "titles": [
      "Numeric Filter Expressions",
      "Negation in Numeric Filter Expressions"
    ],
    "paragraphs": [],
    "path": "/documentation/language/filter-expressions.malloynb"
  },
  {
    "titles": [
      "Numeric Filter Expressions",
      "Combining Numeric Filter Expressions"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Numeric filters can be combined with <code>and</code> and <code>or</code> operators and grouped with <code>(</code> and <code>)</code>"
      },
      {
        "type": "p",
        "text": "Filters using <code>=</code> and <code>!=</code> can have a list of values separated by <code>,</code>"
      }
    ],
    "path": "/documentation/language/filter-expressions.malloynb"
  },
  {
    "titles": [
      "Temporal Filter Expressions"
    ],
    "paragraphs": [],
    "path": "/documentation/language/filter-expressions.malloynb"
  },
  {
    "titles": [
      "Temporal Filter Expressions",
      "Temporal Units"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy has a temporal filter language for operation on <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">date</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">timestamp</span></span></code> data. The first type of temporal filters are filters which describe a unit of time.\nExpressions which take a time extent can use <code>year</code>, <code>quarter</code>, <code>month</code>, <code>week</code>, <code>day</code>, <code>hour</code>, or <code>minute</code>, and any of those can have an <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">s</span></span></code> (as in <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">years</span></span></code> or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">days</span></span></code>)"
      }
    ],
    "path": "/documentation/language/filter-expressions.malloynb"
  },
  {
    "titles": [
      "Temporal Filter Expressions",
      "Temporal Units",
      "Temporal Literals"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "A literal is also a temporal unit, describing a period of time with a beginning and an implied duration."
      }
    ],
    "path": "/documentation/language/filter-expressions.malloynb"
  },
  {
    "titles": [
      "Temporal Filter Expressions",
      "Temporal Ranges"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "There are a other ways to describe a range, many of which start with a temporal unit. A range\nincludes the beginning, and extends up to, but not including the end."
      }
    ],
    "path": "/documentation/language/filter-expressions.malloynb"
  },
  {
    "titles": [
      "Temporal Filter Expressions",
      "Combining Temporal Filter Expressions"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Temporal filter expressions can be combined with <code>and</code> and <code>or</code> operators and grouped with <code>(</code> and <code>)</code>"
      }
    ],
    "path": "/documentation/language/filter-expressions.malloynb"
  },
  {
    "titles": [
      "Boolean Filter Expressions"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Because a boolean value might equal NULL, there are the following boolean filters."
      },
      {
        "type": "p",
        "text": "Boolean filters are negated with <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">not</span></span></code>. There are no combination or grouping operators."
      }
    ],
    "path": "/documentation/language/filter-expressions.malloynb"
  },
  {
    "titles": [
      "More About F-Strings"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Escaping is different inside of a f-string than it is inside of a normal string. The backslash character does escape, but it will also be part of the resulting string. In most other strings, in order for the string to contain a backlash you must write two backslashes.\nThis will only matter for <a href=\"#string-filter-expressions\">string filter expressions</a> which use <code>\\</code>."
      },
      {
        "type": "p",
        "text": "F-strings can also be written <code>f\"...\"</code> or <code>f`...`</code> if one of those quotation choices produces an easier to read expression"
      },
      {
        "type": "p",
        "text": "There are also tripled versions of each f-string, <code>f'''...'''</code>, <code>f\"\"\"...\"\"\"</code> and <code>f```...```</code>"
      },
      {
        "type": "p",
        "text": "<code>f\"Don't need to quote the apostrophe\"</code>"
      },
      {
        "type": "p",
        "text": "<code>f`Don't need to quote the \" either`</code>"
      },
      {
        "type": "p",
        "text": "<code>f'''Or here, can use ` ' and \" without quoting them'''</code>"
      }
    ],
    "path": "/documentation/language/filter-expressions.malloynb"
  },
  {
    "titles": [
      "Filters"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Filtering which data is used in a query is an incredibly important aspect of data analysis. Malloy makes it easy to target specific parts of a query to apply individual filters."
      }
    ],
    "path": "/documentation/language/filters.malloynb"
  },
  {
    "titles": [
      "Filters",
      "Filter Syntax"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Regardless of the placement of a filter, the syntax looks the same."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">{ </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">filter_one</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">filter_two</span><span style=\"color: #000000\"> }</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Each filter can be any expression of type <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">boolean</span></span></code>, whether that's a boolean field <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">is_commercial_flight</span></span></code>, a comparison <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">distance</span><span style=\"color: #000000\"> &gt; </span><span style=\"color: #098658\">1000</span></span></code>, or any of the other kinds of boolean expressions that Malloy supports. For examples see <a href=\"#examples-of-filter-expressions\">the table below</a>, or for detailed information on the kinds of expressions Malloy supports, see the <a href=\"expressions\">Expressions</a> section."
      },
      {
        "type": "p",
        "text": "The comma-separated list of filters are <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">and</span></span></code>ed together, so <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">y</span></span></code> is equivalent to <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">and</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">y</span></span></code>."
      }
    ],
    "path": "/documentation/language/filters.malloynb"
  },
  {
    "titles": [
      "Filters",
      "Filter Placement"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "A filter can be applied to the source of a query, to just one stage of a query, or even to a particular field or expression (measure or nested view)."
      }
    ],
    "path": "/documentation/language/filters.malloynb"
  },
  {
    "titles": [
      "Filters",
      "Filter Placement",
      "Filtering a Query's Source"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "When filtering a query's source, the filter applies to the whole query."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">##(docs) hidden</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&quot;flights.malloy&quot;</span></span></pre>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">distance</span><span style=\"color: #000000\"> &gt; </span><span style=\"color: #098658\">1000</span><span style=\"color: #000000\"> } -&gt; { </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> } </span></span></pre>"
      }
    ],
    "path": "/documentation/language/filters.malloynb"
  },
  {
    "titles": [
      "Filters",
      "Filter Placement",
      "Filtering in a Query Stage"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "A filter can also be applied to an individual query stage."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">} -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\"> ? </span><span style=\"color: #A31515\">&#39;UA&#39;</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">&#39;AA&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/filters.malloynb"
  },
  {
    "titles": [
      "Filters",
      "Filter Placement",
      "Filtering Aggregate Calculations"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Any measure can be filtered by adding a where clause."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">ca_flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">origin</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">state</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;CA&#39;</span><span style=\"color: #000000\"> }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">ny_flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">() { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">origin</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">state</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;NY&#39;</span><span style=\"color: #000000\"> }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">avg_km_from_ca</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">distance</span><span style=\"color: #000000\"> / </span><span style=\"color: #098658\">0.621371</span><span style=\"color: #000000\">) { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">origin</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">state</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;CA&#39;</span><span style=\"color: #000000\"> }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/filters.malloynb"
  },
  {
    "titles": [
      "Filters",
      "Filter Placement",
      "Filtering Measures"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Even complex measures can be filtered.  A common use case is to create a filtered\nmeasure and then create that as a percent of total."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #008000\">// add a couple of measures to the `flights` source</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">my_flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">delayed_flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">dep_delay</span><span style=\"color: #000000\"> &gt; </span><span style=\"color: #098658\">30</span><span style=\"color: #000000\"> }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">percent_delayed</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">delayed_flights</span><span style=\"color: #000000\"> / </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">my_flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">ca_flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">origin</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">state</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;CA&#39;</span><span style=\"color: #000000\"> }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">ca_delayed_flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">delayed_flights</span><span style=\"color: #000000\"> { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">origin</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">state</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;CA&#39;</span><span style=\"color: #000000\"> }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">ca_percent_delayed</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">percent_delayed</span><span style=\"color: #000000\"> { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">origin</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">state</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;CA&#39;</span><span style=\"color: #000000\"> }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">ny_flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">origin</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">state</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;NY&#39;</span><span style=\"color: #000000\"> }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">ny_delayed_flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">delayed_flights</span><span style=\"color: #000000\"> { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">origin</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">state</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;NY&#39;</span><span style=\"color: #000000\"> }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">ny_percent_delayed</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">percent_delayed</span><span style=\"color: #000000\"> { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">origin</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">state</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;NY&#39;</span><span style=\"color: #000000\"> }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/filters.malloynb"
  },
  {
    "titles": [
      "Filters",
      "Filter Placement",
      "Filtering Nested Views"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Nested views can also be filtered using <a href=\"./views#refining-views\">refinement</a>."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">my_flights2</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">delayed_flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">dep_delay</span><span style=\"color: #000000\"> &gt; </span><span style=\"color: #098658\">30</span><span style=\"color: #000000\"> }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">delay_stats</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">delayed_flights</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">percent_delayed</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">delayed_flights</span><span style=\"color: #000000\"> / </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">my_flights2</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">ca_stats</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">delay_stats</span><span style=\"color: #000000\"> + { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">origin</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">state</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;CA&#39;</span><span style=\"color: #000000\"> }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">ny_stats</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">delay_stats</span><span style=\"color: #000000\"> + { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">origin</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">state</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;NY&#39;</span><span style=\"color: #000000\"> }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/filters.malloynb"
  },
  {
    "titles": [
      "Filters",
      "Filtering null values"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "To check to see if a value is <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">null</span></span></code>, use <code>IS NULL</code> or <code>IS NOT NULL</code>."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">name_not_present</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">name</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">null</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">name_present</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">name</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">not</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">null</span></span></pre>"
      }
    ],
    "path": "/documentation/language/filters.malloynb"
  },
  {
    "titles": [
      "Filters",
      "Common Patterns in Filters"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "This section describes some of the more common patterns used in filter expressions. For a more detailed description of the possible kinds of expressions, see the <a href=\"expressions\">Expressions</a> section."
      }
    ],
    "path": "/documentation/language/filters.malloynb"
  },
  {
    "titles": [
      "Filters",
      "Common Patterns in Filters",
      "Comparisons"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "All the usual comparison operators behave as expected, and are some of the most common kinds of filters."
      }
    ],
    "path": "/documentation/language/filters.malloynb"
  },
  {
    "titles": [
      "Filters",
      "Common Patterns in Filters",
      "Combining Filters"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Filters can be logically combined using <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">and</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">or</span></span></code>, and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">not</span></span></code>."
      }
    ],
    "path": "/documentation/language/filters.malloynb"
  },
  {
    "titles": [
      "Filters",
      "Common Patterns in Filters",
      "Ranges"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "A range of numeric or time values can be constructed\nwith the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">to</span></span></code>operator, e.g. <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #098658\">10</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">to</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">100</span></span></code>. The <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">~</span></span></code> operator will check to\nsee if a value is within a range."
      }
    ],
    "path": "/documentation/language/filters.malloynb"
  },
  {
    "titles": [
      "Filters",
      "Common Patterns in Filters",
      "String \"Like\" Matching"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "When comparing strings, the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">=</span></span></code> operator checks for pure equality, whereas the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">~</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">!~</span></span></code> operators, <code>LIKE</code> and <code>NOT LIKE</code>."
      },
      {
        "type": "p",
        "text": "In the right hand (pattern) string, the following syntax is used:"
      },
      {
        "type": "p",
        "text": "A percent sign <code>%</code> matches any number of characters"
      },
      {
        "type": "p",
        "text": "An underscore <code>_</code> matches a single character"
      }
    ],
    "path": "/documentation/language/filters.malloynb"
  },
  {
    "titles": [
      "Filters",
      "Common Patterns in Filters",
      "Regular Expressions"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "When the right hand side of a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">~</span></span></code> or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">!~</span></span></code> operator is a regular expression,\nMalloy checks whether the left hand side matches that regular expression. In Standard SQL, Malloy uses the <code>REGEXP_COMPARE</code> function."
      }
    ],
    "path": "/documentation/language/filters.malloynb"
  },
  {
    "titles": [
      "Filters",
      "Common Patterns in Filters",
      "Alternation"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Checking equality against multiple possible values is extremely common, and can be achieved succinctly using the <a href=\"expressions#application\">apply operator</a> and <a href=\"expressions#alternation\">alternation</a>."
      }
    ],
    "path": "/documentation/language/filters.malloynb"
  },
  {
    "titles": [
      "Filters",
      "Examples of Filter Expressions"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Use this table as a quick reference for common types of filter expressions."
      }
    ],
    "path": "/documentation/language/filters.malloynb"
  },
  {
    "titles": [
      "Functions"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy has a standard set of functions available at all times. These include scalar functions (e.g. <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">concat</span></span></code>), aggregate functions (e.g. <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">stddev</span></span></code>), and analytic (or \"window\") functions (e.g. <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">lag</span></span></code>)."
      },
      {
        "type": "p",
        "text": "These functions are defined in Malloy in order to provide basic typechecking of arguments and return types, as well as <em>some</em> compatibility transformations. Perfect compatibility across all dialects for all functions is not guaranteed, and specific differences are noted on a case-by-case basis."
      },
      {
        "type": "p",
        "text": "For quick function lookup, see the <a href=\"#all-functions\">alphebetized table of all available functions</a>."
      },
      {
        "type": "p",
        "text": "Note: the behavior of functions changed in v0.0.39. For more information, see <a href=\"./new_functions\">a description of that change</a>."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">##(docs) hidden</span></span>\n<span class=\"line\"><span style=\"color: #0451A5\">## renderer_legacy</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&quot;flights.malloy&quot;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">empty</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #AF00DB\">sql</span><span style=\"color: #000000\">(&quot;&quot;&quot;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">SELECT</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  &quot;&quot;&quot;) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Syntax"
    ],
    "paragraphs": [],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Syntax",
      "Built-In Functions"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Functions that are \"built-in\" to Malloy can be called the usual way with the name of the function, an open parenthesis, a comma separated list of Malloy expressions, and a close parenthesis, e.g. <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\">upper</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">first</span><span style=\"color: #000000\">), </span><span style=\"color: #A31515\">&#39; &#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #795E26\">upper</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">last</span><span style=\"color: #000000\">))</span></span></code>."
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Syntax",
      "Raw SQL Functions"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Functions that are <em>not</em> built in may be called in the same way, but with an <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">!</span></span></code> in between the function name and argument list: <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">sinh</span><span style=\"color: #000000\">!(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">)</span></span></code>. In this case, Malloy assumes the return type of the function is the same as that of the first argument (or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">number</span></span></code> if there are no arguments). When this is not correct, the return type can be specified after the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">!</span></span></code>, e.g. <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">hash</span><span style=\"color: #000000\">!</span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">username</span><span style=\"color: #000000\">)</span></span></code>."
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Function Documentation"
    ],
    "paragraphs": [],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "String Functions"
    ],
    "paragraphs": [],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "String Functions",
      "concat"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">, ...)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Concatenates multiple values together, casting non-<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">string</span></span></code> values to <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">string</span></span></code>. The exact behavior of string casting may depend on the dialect."
      },
      {
        "type": "p",
        "text": "If no values are given, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">concat</span></span></code> returns the empty string."
      },
      {
        "type": "p",
        "text": "Behavior for <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">null</span></span></code> depends on dialect: in BigQuery, if any argument is <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">null</span></span></code>, the result is <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">null</span></span></code>; in DuckDB and Postgres, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">null</span></span></code> is treated as an empty string."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">empty</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e1</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;foo&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39;bar&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e2</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e4</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;Date: &#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">@2021-01-23</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e3</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "String Functions",
      "lower"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">lower</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Returns a string like <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">value</span></span></code> but with all alphabetic characters in lowercase."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">empty</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">e1</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">lower</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;FOO&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "String Functions",
      "upper"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">upper</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Returns a string like <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">value</span></span></code> but with all alphabetic characters in uppercase."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">empty</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">e1</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">upper</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;foo&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "String Functions",
      "strpos"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-txt\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">strpos(test_string, search_string)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Returns the 1-based position of the first occurrence of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">search_string</span></span></code> in <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">test_string</span></span></code>, or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #098658\">0</span></span></code> if <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">search_string</span></span></code> is not found."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">empty</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e1</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">strpos</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;abc&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39;b&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e2</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">strpos</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;abc&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39;d&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e3</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">strpos</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;abc&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e4</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">strpos</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39;a&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "String Functions",
      "starts_with"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">starts_with</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">prefix</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Returns <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">true</span></span></code> if <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">value</span></span></code> begins with <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">prefix</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">false</span></span></code> otherwise. If either <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">value</span></span></code> or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">prefix</span></span></code> is <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">null</span></span></code>, the result is <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">false</span></span></code> (unlike in SQL, where it would be <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">null</span></span></code>)."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">empty</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e1</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">starts_with</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;abc&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39;a&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e2</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">starts_with</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;abc&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39;b&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e3</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">starts_with</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;abc&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e4</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">starts_with</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39;a&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "String Functions",
      "ends_with"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">ends_with</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">suffix</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Returns <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">true</span></span></code> if <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">value</span></span></code> ends with <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">prefix</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">false</span></span></code> otherwise. If either <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">value</span></span></code> or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">suffix</span></span></code> is <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">null</span></span></code>, the result is <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">false</span></span></code> (unlike in SQL, where it would be <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">null</span></span></code>)."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">empty</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e1</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">ends_with</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;abc&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39;c&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e2</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">ends_with</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;abc&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39;b&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e3</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">ends_with</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;abc&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e4</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">ends_with</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39;a&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "String Functions",
      "trim"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">trim</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #795E26\">trim</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">trim_characters</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Returns a string with leading and trailing characters in <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">trim_characters</span></span></code> (or whitespace, if <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">trim_characters</span></span></code> is unspecified) removed."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">empty</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e1</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">trim</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;  keep this  &#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e2</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">trim</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;_ _keep_this_ _&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39;_ &#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e3</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">trim</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39; keep everything &#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39;&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e4</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">trim</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;null example&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e5</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">trim</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39; _&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "String Functions",
      "ltrim"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">ltrim</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #795E26\">ltrim</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">trim_characters</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Like <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">trim</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">trim_characters</span><span style=\"color: #000000\">)</span></span></code> but only removes leading characters."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">empty</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e1</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">ltrim</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;  keep this -&gt;  &#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e2</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">ltrim</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;_ _keep_this -&gt; _ _&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39;_ &#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e3</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">ltrim</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39; keep everything &#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39;&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e4</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">ltrim</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;null example&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e5</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">ltrim</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39; _&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "String Functions",
      "rtrim"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">rtrim</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #795E26\">rtrim</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">trim_characters</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Like <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">trim</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">trim_characters</span><span style=\"color: #000000\">)</span></span></code> but only removes trailing characters."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">empty</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e1</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">rtrim</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;  &lt;- keep this  &#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e2</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">rtrim</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;_ _ &lt;- keep_this _ _&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39;_ &#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e3</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">rtrim</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39; keep everything &#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39;&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e4</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">rtrim</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;null example&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e5</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">rtrim</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39; _&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "String Functions",
      "substr"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">substr</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">position</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #795E26\">substr</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">position</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">length</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Returns a substring of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">value</span></span></code> starting at the 1-based index <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">position</span></span></code>. If <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">length</span></span></code> is specified, the returned string will be at most <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">length</span></span></code> characters long; otherwise the returned string will extend to the end of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">value</span></span></code>. Negative values of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">position</span></span></code> index the starting value from the end of the string (with <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">-</span><span style=\"color: #098658\">1</span></span></code> for the last character of the string). A <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">position</span></span></code> of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #098658\">0</span></span></code> is equivalent to a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">position</span></span></code> of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #098658\">1</span></span></code>."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">empty</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e1</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">substr</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;123456789&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e2</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">substr</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;123456789&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e3</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">substr</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;123456789&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e4</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">substr</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;123456789&#39;</span><span style=\"color: #000000\">, -</span><span style=\"color: #098658\">4</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e5</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">substr</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;123456789&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e6</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">substr</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;123456789&#39;</span><span style=\"color: #000000\">, -</span><span style=\"color: #098658\">5</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e7</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">substr</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;123456789&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e8</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">substr</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;123456789&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e9</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">substr</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "String Functions",
      "regexp_extract"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">regexp_extract</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">pattern</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Returns the first substring of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">value</span></span></code> which matches <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">pattern</span></span></code>. Returns <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">null</span></span></code> if there is no matching substring."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">empty</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e1</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">regexp_extract</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;the Malloy language&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #811F3F\">r&#39;M....y&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e2</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">regexp_extract</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;the SQL language&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #811F3F\">r&#39;M....y&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e3</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">regexp_extract</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;the null language&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e4</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">regexp_extract</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">, </span><span style=\"color: #811F3F\">r&#39;nothing&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "String Functions",
      "replace"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">replace</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">pattern</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">replacement</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Returns a copy of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">value</span></span></code> with all occurrences of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">pattern</span></span></code> replaced with <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">replacement</span></span></code>."
      },
      {
        "type": "p",
        "text": "If <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">pattern</span></span></code> is empty, no replacement occurs and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">value</span></span></code> is returned unchanged."
      },
      {
        "type": "p",
        "text": "If <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">pattern</span></span></code> is a regular expression, parenthesized capturing groups can be included in the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">replacement</span></span></code> string with <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">&#39;</span><span style=\"color: #EE0000\">\\\\</span><span style=\"color: #A31515\">1&#39;</span></span></code> to <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">&#39;</span><span style=\"color: #EE0000\">\\\\</span><span style=\"color: #A31515\">9&#39;</span></span></code>. In BigQuery and DuckDB, the full matched string can be referenced with <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">&#39;</span><span style=\"color: #EE0000\">\\\\</span><span style=\"color: #A31515\">0&#39;</span></span></code>."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">empty</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e1</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">replace</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;the SQL language&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39;SQL&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39;Malloy&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e2</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">replace</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;the SQL language&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #811F3F\">r&#39;S.L&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39;Malloy&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e3</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">replace</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;SQL SQL SQL&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39;SQL&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39;Malloy&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e4</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">replace</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;SQL SQL SQL&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #811F3F\">r&#39;S.L&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39;Malloy&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e5</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">replace</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39;SQL&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39;Malloy&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e6</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">replace</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;the null language&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39;Malloy&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e7</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">replace</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;the null language&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39;SQL&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e8</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">replace</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;the language&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39;&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39;Malloy&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e9</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">replace</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;axbxc&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #811F3F\">r&#39;(a).(b).(c)&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39;</span><span style=\"color: #EE0000\">\\\\</span><span style=\"color: #A31515\">0 - </span><span style=\"color: #EE0000\">\\\\</span><span style=\"color: #A31515\">1 - </span><span style=\"color: #EE0000\">\\\\</span><span style=\"color: #A31515\">2 - </span><span style=\"color: #EE0000\">\\\\</span><span style=\"color: #A31515\">3&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "String Functions",
      "length"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">length</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Returns the number of characters in <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">value</span></span></code>."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">empty</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e1</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">length</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;Malloy&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e2</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">length</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e3</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">length</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;𝔐𝔞𝔩𝔩𝔬𝔶&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e4</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">length</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "String Functions",
      "byte_length"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">byte_length</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Returns the number of bytes in the unicode encoding of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">value</span></span></code>."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">empty</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e1</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">byte_length</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;Malloy&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e2</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">byte_length</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e3</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">byte_length</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;𝔐𝔞𝔩𝔩𝔬𝔶&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e4</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">byte_length</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "String Functions",
      "chr"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">chr</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Returns a unicode code point <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">value</span></span></code> and returns a string containing the character with the matching code point. If <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">value</span></span></code> is 0, returns an empty string <em>not</em> a string containing the null character."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">empty</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e1</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">chr</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">65</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e2</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">chr</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">255</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e3</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">chr</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e4</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">chr</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Returns an error if <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">value</span></span></code> is not a valid unicode code point."
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "String Functions",
      "ascii"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">ascii</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Returns the ASCII code point of the first character of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">value</span></span></code>. If <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">value</span></span></code> is empty, returns 0."
      },
      {
        "type": "p",
        "text": "In BigQuery, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">ascii</span></span></code> errors if the first character of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">value</span></span></code> is not representable in ASCII. In Postgres and DuckDB, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">ascii</span></span></code> returns the Unicode code point of the first character."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">empty</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e1</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">ascii</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;Malloy&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e2</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">ascii</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e3</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">ascii</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "String Functions",
      "unicode"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">unicode</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Returns the Unicode code point of the first character of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">value</span></span></code>. If <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">value</span></span></code> is empty, returns 0."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">empty</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e1</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">unicode</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;Malloy&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e2</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">unicode</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;𝔐𝔞𝔩𝔩𝔬𝔶&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e3</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">unicode</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e4</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">unicode</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "String Functions",
      "repeat"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">repeat</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">num_repetitions</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Return a string consisting of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">value</span></span></code> repeated <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">num_repetitions</span></span></code> times."
      },
      {
        "type": "p",
        "text": "Undefined behavior if <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">num_repetitions</span></span></code> is negative or a non-integer."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">empty</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e1</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">repeat</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;(A)&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e2</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">repeat</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;(A)&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e3</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">repeat</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;(A)&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e4</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">repeat</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e5</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">repeat</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e6</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">repeat</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;(A)&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "String Functions",
      "reverse"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">reverse</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Return a copy of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">value</span></span></code> with the characters in reverse order."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">empty</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e1</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">reverse</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;Malloy&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e2</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">reverse</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;𝔶𝔬𝔩𝔩𝔞𝔐&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e3</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">reverse</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;racecar&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e4</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">reverse</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e5</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">reverse</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Numeric Functions"
    ],
    "paragraphs": [],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Numeric Functions",
      "round"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">round</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #795E26\">round</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">precision</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Round <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">value</span></span></code> to the nearest integer, or if <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">precision</span></span></code> is specified, round to <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">precision</span></span></code> decimal places right of the decimal. If <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">precision</span></span></code> is negative, round to a precision that many places to the left of the decimal. Halfway cases are rounded away from zero."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">empty</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e1</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">round</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">1.49</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e2</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">round</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">1.51</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e3</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">round</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">1.5</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e4</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">round</span><span style=\"color: #000000\">(-</span><span style=\"color: #098658\">1.5</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e5</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">round</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">1.5</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e6</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">round</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">1.551</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e7</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">round</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">14.12</span><span style=\"color: #000000\">, -</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e8</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">round</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">1.4</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e9</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">round</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Numeric Functions",
      "trunc"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">trunc</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #795E26\">trunc</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">precision</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Truncate <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">value</span></span></code> to an integer, or if <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">precision</span></span></code> is specified, truncate after that many decimal places. If <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">precision</span></span></code> is negative, truncate to that many decimal places to the left of the decimal point. Similar to <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">round</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">precision</span><span style=\"color: #000000\">)</span></span></code> but always rounds toward zero."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">empty</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e1</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">trunc</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">1.49</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e2</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">trunc</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">1.51</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e3</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">trunc</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">1.5</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e4</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">trunc</span><span style=\"color: #000000\">(-</span><span style=\"color: #098658\">1.5</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e5</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">trunc</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">1.5</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e6</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">trunc</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">1.551</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e7</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">trunc</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">19.999</span><span style=\"color: #000000\">, -</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e8</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">trunc</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">1.4</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e9</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">trunc</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Numeric Functions",
      "floor"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">floor</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Round <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">value</span></span></code> down to the greatest integer not larger than <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">value</span></span></code>."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">empty</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">floor</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">1.0</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">floor</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">1.9</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">floor</span><span style=\"color: #000000\">(-</span><span style=\"color: #098658\">1.1</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">d</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">floor</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Numeric Functions",
      "ceil"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">ceil</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Round <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">value</span></span></code> up to the smallest integer not less than <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">value</span></span></code>."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">empty</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">ceil</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">1.0</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">ceil</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">1.1</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">ceil</span><span style=\"color: #000000\">(-</span><span style=\"color: #098658\">1.9</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">d</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">ceil</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Numeric Functions",
      "cos"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">cos</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">angle</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Computes the cosine of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">angle</span></span></code> where <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">angle</span></span></code> is specified in radians."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">empty</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">cos</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">cos</span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\">pi</span><span style=\"color: #000000\">())</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">cos</span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\">pi</span><span style=\"color: #000000\">() / </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">d</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">cos</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Numeric Functions",
      "acos"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">acos</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Computes the principal value of the inverse cosine of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">value</span></span></code>. The return value is in the range [0,π]. Generates an error if <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">value</span></span></code> is a value outside of the range [-1, 1]."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">empty</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">acos</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">acos</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">acos</span><span style=\"color: #000000\">(-</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">d</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">acos</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Numeric Functions",
      "sin"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">sin</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">angle</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Computes the sine of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">angle</span></span></code> where <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">angle</span></span></code> is specified in radians."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">empty</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">sin</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">sin</span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\">pi</span><span style=\"color: #000000\">())</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">sin</span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\">pi</span><span style=\"color: #000000\">() / </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">d</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">sin</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Numeric Functions",
      "asin"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">asin</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Computes the principal value of the inverse sine of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">value</span></span></code>. The return value is in the range [-π/2,π/2]. Generates an error if <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">value</span></span></code> is outside of the range [-1, 1]."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">empty</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">asin</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">asin</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">asin</span><span style=\"color: #000000\">(-</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">d</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">asin</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Numeric Functions",
      "tan"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">tan</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">angle</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Computes the tangent of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">angle</span></span></code> where <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">angle</span></span></code> is specified in radians."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">empty</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">tan</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">tan</span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\">pi</span><span style=\"color: #000000\">())</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">tan</span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\">pi</span><span style=\"color: #000000\">() / </span><span style=\"color: #098658\">4</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">d</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">tan</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">3</span><span style=\"color: #000000\"> * </span><span style=\"color: #795E26\">pi</span><span style=\"color: #000000\">() / </span><span style=\"color: #098658\">4</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">tan</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Numeric Functions",
      "atan"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">atan</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Computes the principal value of the inverse tangent of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">value</span></span></code>. The return value is in the range [-π/2,π/2]."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">empty</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">atan</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">atan</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">atan</span><span style=\"color: #000000\">(-</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">d</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">atan</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Numeric Functions",
      "atan2"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">atan2</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Calculates the principal value of the inverse tangent of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> / </span><span style=\"color: #001080\">y</span></span></code> using the signs of the two arguments to determine the quadrant. The return value is in the range [-π,π]."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">empty</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">atan2</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">atan2</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">atan2</span><span style=\"color: #000000\">(-</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">d</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">atan2</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, -</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">atan2</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">f</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">atan2</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Numeric Functions",
      "sqrt"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">sqrt</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Computes the square root of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">value</span></span></code>. Generates an error if <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">value</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #098658\">0</span></span></code>."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">empty</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">sqrt</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">9</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">sqrt</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">sqrt</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Numeric Functions",
      "pow"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">pow</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">base</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">exponent</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Returns <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">base</span></span></code> raised to the power of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">exponent</span></span></code>."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">empty</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">pow</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">pow</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">100</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">pow</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">10</span><span style=\"color: #000000\">, -</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">d</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">pow</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">10</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">pow</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">f</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">pow</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Generates an error if <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">base</span></span></code> is 0 and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">exponent</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #098658\">0</span></span></code>."
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Numeric Functions",
      "abs"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">abs</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Returns the absolute value of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">value</span></span></code>."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">empty</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">abs</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">100</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">abs</span><span style=\"color: #000000\">(-</span><span style=\"color: #098658\">100</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">abs</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">d</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">abs</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Numeric Functions",
      "sign"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">sign</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Returns <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">-</span><span style=\"color: #098658\">1</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #098658\">0</span></span></code>, or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #098658\">1</span></span></code> for negative, zero and positive arguments respectively. For floating point arguments, this function does not distinguish between positive and negative zero."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">empty</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">sign</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">100</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">sign</span><span style=\"color: #000000\">(-</span><span style=\"color: #098658\">100</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">sign</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">d</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">sign</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Numeric Functions",
      "is_inf"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">is_inf</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Returns <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">true</span></span></code> if <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">value</span></span></code> is infinite (positive or negative), <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">false</span></span></code> otherwise. Unlike in SQL, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">is_inf</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">) = </span><span style=\"color: #0000FF\">false</span></span></code> (not <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">null</span></span></code>)."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">empty</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">is_inf</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">100</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">is_inf</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;inf&#39;</span><span style=\"color: #000000\">::</span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">is_inf</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;-inf&#39;</span><span style=\"color: #000000\">::</span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">d</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">is_inf</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;NaN&#39;</span><span style=\"color: #000000\">::</span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">is_inf</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Numeric Functions",
      "is_nan"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">is_nan</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Returns <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">true</span></span></code> if <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">value</span></span></code> is <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">NaN</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">false</span></span></code> otherwise. Unlike in SQL, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">is_nan</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">) = </span><span style=\"color: #0000FF\">false</span></span></code> (not <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">null</span></span></code>)."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">empty</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">is_nan</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">100</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">is_nan</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;NaN&#39;</span><span style=\"color: #000000\">::</span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">is_nan</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;inf&#39;</span><span style=\"color: #000000\">::</span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">d</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">is_nan</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Numeric Functions",
      "div"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">div</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">dividend</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">divisor</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Returns the (truncated) integer part of the division of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">dividend</span></span></code> by <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">divisor</span></span></code>. Division by zero returns an error."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">empty</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">div</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">9</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">a2</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">trunc</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">9</span><span style=\"color: #000000\"> / </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">div</span><span style=\"color: #000000\">(-</span><span style=\"color: #098658\">9</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">div</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">10</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">d</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">div</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">div</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Numeric Functions",
      "rand"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">rand</span><span style=\"color: #000000\">()</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Returns a random number in the range [0, 1)."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">empty</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">rand</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">rand</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">rand</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Numeric Functions",
      "pi"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">pi</span><span style=\"color: #000000\">()</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Returns the value of π."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">empty</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">pi</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">pi</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Numeric Functions",
      "log"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">base</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Returns the logarithm of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">value</span></span></code> with the specified <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">base</span></span></code>. Note that <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">base</span></span></code> is required. Errors if <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">value</span><span style=\"color: #000000\"> &lt;= </span><span style=\"color: #098658\">0</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">base</span><span style=\"color: #000000\"> &lt;= </span><span style=\"color: #098658\">0</span></span></code>, or if <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">base</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1</span></span></code>."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">empty</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">10</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">10</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">100</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">10</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">32</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">d</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">10</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Numeric Functions",
      "ln"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">ln</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Returns the natural log (log base <em>e</em>) of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">value</span></span></code>. Equivalent to <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">, </span><span style=\"color: #795E26\">exp</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">))</span></span></code>. Errors if <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">value</span><span style=\"color: #000000\"> &lt;= </span><span style=\"color: #098658\">0</span></span></code>."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">empty</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">ln</span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\">exp</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">))</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">ln</span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\">exp</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">))</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">ln</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">100</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">d</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">ln</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Numeric Functions",
      "exp"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">exp</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">power</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Returns <em>e</em> (Euler's number) raised to the given <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">power</span></span></code>."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">empty</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">exp</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">exp</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Interval Functions"
    ],
    "paragraphs": [],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Interval Functions",
      "seconds"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">seconds</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">interval</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Calculate the number of seconds in <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">interval</span></span></code>."
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Interval Functions",
      "minutes"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">minutes</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">interval</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Calculate the number of minutes in <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">interval</span></span></code>."
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Interval Functions",
      "hours"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">hours</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">interval</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Calculate the number of hours in <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">interval</span></span></code>."
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Interval Functions",
      "days"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">days</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">interval</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Calculate the number of days in <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">interval</span></span></code>."
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Interval Functions",
      "weeks"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">weeks</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">interval</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Calculate the number of weeks in <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">interval</span></span></code>. Note: this function does not currently work."
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Interval Functions",
      "months"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">months</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">interval</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Calculate the number of months in <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">interval</span></span></code>. Note: this function does not currently work."
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Interval Functions",
      "quarters"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">quarters</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">interval</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Calculate the number of quarters in <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">interval</span></span></code>. Note: this function does not currently work."
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Interval Functions",
      "years"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">years</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">interval</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Calculate the number of years in <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">interval</span></span></code>. Note: this function does not currently work."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">empty</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">seconds</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">now</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">to</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">now</span><span style=\"color: #000000\"> + </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">second</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">minutes</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">now</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">to</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">now</span><span style=\"color: #000000\"> + </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">minute</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">hours</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">now</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">to</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">now</span><span style=\"color: #000000\"> + </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">hour</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">d</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">days</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">now</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">to</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">now</span><span style=\"color: #000000\"> + </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">day</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// e is weeks(now::date to now::date + 1 week)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// f is months(now::date to now::date + 1 month)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// g is quarters(now::date to now::date + 1 quarter)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// h is years(now::date to now::date + 1 year)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Date and Timestamp Functions"
    ],
    "paragraphs": [],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Date and Timestamp Functions",
      "day_of_year"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">day_of_year</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">moment</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Returns the day of the year (from 1 to 365) of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">moment</span></span></code>."
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Date and Timestamp Functions",
      "day"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">day</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">moment</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Returns the day of the month (from 1 to 31) of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">moment</span></span></code>."
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Date and Timestamp Functions",
      "day_of_week"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">day_of_week</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">moment</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Returns the day of the week (from 1 to 7) of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">moment</span></span></code>, where 1 represents Sunday."
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Date and Timestamp Functions",
      "week"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">week</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">moment</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Returns the week of the year (from 1 to 53) of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">moment</span></span></code>."
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Date and Timestamp Functions",
      "month"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">month</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">moment</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Returns the month of the year (from 1 to 12) of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">moment</span></span></code>."
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Date and Timestamp Functions",
      "quarter"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">quarter</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">moment</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Returns the quarter of the year (from 1 to 53) of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">moment</span></span></code>."
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Date and Timestamp Functions",
      "year"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">year</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">moment</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Returns the year of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">moment</span></span></code>."
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Date and Timestamp Functions",
      "hour"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">hour</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">time</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Returns the hour of the day (from 0 to 23) of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">time</span></span></code>."
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Date and Timestamp Functions",
      "minute"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">minute</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">time</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Returns the minute of the hour (from 0 to 59) of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">time</span></span></code>."
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Date and Timestamp Functions",
      "second"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">second</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">time</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Returns the second of the minute (from 0 to 59) of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">time</span></span></code>."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">empty</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> { </span><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">@2023-12-31 23:59:59</span><span style=\"color: #000000\"> } -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">doy</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">day_of_year</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">dom</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">day</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">dow</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">day_of_week</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">woy</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">week</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">moy</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">month</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">qoy</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">quarter</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">yyy</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">year</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">hod</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">hour</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">moh</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">minute</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">som</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">second</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Other Functions"
    ],
    "paragraphs": [],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Other Functions",
      "greatest"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">greatest</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">, ...)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Returns the greatest value of all arguments, supporting, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">number</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">string</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">date</span></span></code>, and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">timestamp</span></span></code>. Returns <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">null</span></span></code> if any argument is <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">null</span></span></code>."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">empty</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">greatest</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">8</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">greatest</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;z&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39;b&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39;f&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">greatest</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">@2003-11-03</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">@2001-10-21</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">d</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">greatest</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">@2003-11-03 11:25</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">@2003-11-03 11:24</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">greatest</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">100</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">99</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Other Functions",
      "least"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">least</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">, ...)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Returns the least value of all arguments, supporting, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">number</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">string</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">date</span></span></code>, and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">timestamp</span></span></code>. Returns <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">null</span></span></code> if any argument is <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">null</span></span></code>."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">empty</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">least</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">8</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">least</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;z&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39;b&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39;f&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">least</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">@2003-11-03</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">@2001-10-21</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">d</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">least</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">@2003-11-03 11:25</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">@2003-11-03 11:24</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">e</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">least</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">100</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">99</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Other Functions",
      "ifnull"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">ifnull</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">default</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Return <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">value</span></span></code> unless it is <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">null</span></span></code>, or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">default</span></span></code> otherwise."
      },
      {
        "type": "p",
        "text": "Note: it is more idiomatic in Malloy to use <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">??</span></span></code>, the null-coalescing operator."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">empty</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">a_sql</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">ifnull</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">a_malloy</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\"> ?? </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">     </span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Other Functions",
      "coalesce"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">coalesce</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">, ...)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Return the first <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">value</span></span></code> which is not <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">null</span></span></code>, or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">null</span></span></code> if all <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">value</span></span></code>s are <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">null</span></span></code>. Essentially the same as <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">ifnull</span></span></code> but allowing more than two arguments."
      },
      {
        "type": "p",
        "text": "Note: it is more idiomatic in Malloy to use <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">??</span></span></code>, the null-coalescing operator."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">empty</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">a_sql</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">coalesce</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">a_malloy</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\"> ?? </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> ?? </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">   </span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Other Functions",
      "nullif"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">nullif</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">condition</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Equivalent to the SQL <code>NULLIF</code> function: returns <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">value</span></span></code> unless <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">value</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">condition</span></span></code>, in which case it returns <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">null</span></span></code>."
      },
      {
        "type": "p",
        "text": "Note: the use of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">nullif</span></span></code> is not idiomatic to Malloy; use <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">pick</span></span></code> statements instead, as they are more flexible."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">empty</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> { </span><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">value</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> } -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">a_sql</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">nullif</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">a_malloy</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">value</span><span style=\"color: #000000\"> ? </span><span style=\"color: #0000FF\">pick</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">when</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">2</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">b_malloy</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">value</span><span style=\"color: #000000\"> ? </span><span style=\"color: #0000FF\">pick</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">when</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #098658\">2</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "There are many functions which are useful in SQL which are not part of Malloy for a variety of reasons including a) there is a different way to do it in Malloy, b) it is not generalizable to other dialects, c) it just hasn't been added yet. Some of the more common ones are listed here."
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Other Functions",
      "IFNULL, COALESCE"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Neither <code>IFNULL</code> nor <code>COALESCE</code> is available in Malloy, because Malloy has a specific coalescing operator: <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">??</span></span></code>."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">empty</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\"> ?? </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">      </span><span style=\"color: #008000\">// same as IFNULL(NULL, 1)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\"> ?? </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> ?? </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">// same as COALESCE(NULL, 1, 2)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Other Functions",
      "NULLIF"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The <code>NULLIF</code> SQL function is not available in Malloy, because the same thing is expressible in a more Malloy-like way, using a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">pick</span></span></code> statement. This is also more flexible, as the pick statement allows for partial comparisons."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">empty</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> { </span><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">value</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> } -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">value</span><span style=\"color: #000000\"> ? </span><span style=\"color: #0000FF\">pick</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">when</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">   </span><span style=\"color: #008000\">// same as NULLIF(value, 2)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">value</span><span style=\"color: #000000\"> ? </span><span style=\"color: #0000FF\">pick</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">when</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">// same as CASE NULL WHEN value &lt; 2 ELSE value END</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Aggregate Functions"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy has several \"native\" aggregate functions, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">sum</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">avg</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">max</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">min</span></span></code>, and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">count</span></span></code>, as well as \"non-native\" aggregate functions, which currently only includes <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">stddev</span></span></code>. All of these support <a href=\"../language/aggregates#aggregate-locality\">aggregate locality</a> and <a href=\"https://help.looker.com/hc/en-us/articles/360023722974-A-Simple-Explanation-of-Symmetric-Aggregates-or-Why-On-Earth-Does-My-SQL-Look-Like-That-\">symmetric aggregate</a> handling."
      },
      {
        "type": "p",
        "text": "Note: Aggregate locality is currently not supported in BigQuery for <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">stddev</span></span></code>."
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Aggregate Functions",
      "stddev"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">stddev</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Returns the standard deviation of values of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">value</span></span></code> across all rows."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">dep_delay_avg</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">dep_delay</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">dep_delay_stddev</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">stddev</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">dep_delay</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">dep_delay_avg</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">asc</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Ungrouped Aggregate Functions"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy has two <a href=\"./ungrouped-aggregates\">ungrouped aggregate functions</a>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">all</span><span style=\"color: #000000\">()</span></span></code>, and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">exclude</span><span style=\"color: #000000\">()</span></span></code>, which allow you to control which dimensional values are included in the grouping while calculating a particular aggregate expression."
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Window Functions"
    ],
    "paragraphs": [],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Window Functions",
      "Syntax"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Window functions can only appear in a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">:</span></span></code> statement:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">prev_carrier</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">lag</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "For more detailed information, see the <a href=\"./calculations_windows\">Calculations and Window Functions</a> section."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;CA&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">carrier2</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">prev_carrier</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">lag</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "In the above example, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">carrier</span></span></code> in the <em>output</em> refers to the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;CA&#39;</span></span></code>, whereas <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">carrier</span></span></code> in the <em>input</em> refers to the column in <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">flights</span></span></code>. Inside a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">group_by</span></span></code> it is not possible to reference an output field, so <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">carrier2</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">carrier</span></span></code> refers to the column <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">carrier</span></span></code>. In the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">prev_carrier</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">lag</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\">)</span></span></code>, however, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">carrier</span></span></code> refers to the <em>output</em> field, i.e. <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;CA&#39;</span></span></code>."
      },
      {
        "type": "p",
        "text": "Most arguments to analytic functions are <em>required</em> to be output fields or aggregate fields (see specific requirements below)."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ERROR: Parameter 1 (&#39;value&#39;) of lag must be literal, constant, or output, but received input</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">prev_carrier</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">lag</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Window Functions",
      "row_number"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">row_number</span><span style=\"color: #000000\">()</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Returns the row number of the current result row after grouping and aggregating."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">row</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">row_number</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Window Functions",
      "rank"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">rank</span><span style=\"color: #000000\">()</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Returns the rank according to the query ordering, with values having equal ordering value getting equal rank."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count_bucket</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">round</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\">, -</span><span style=\"color: #098658\">6</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count_bucket</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">desc</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count_rank</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">rank</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Window Functions",
      "lag"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">lag</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">expr</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #795E26\">lag</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">expr</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">offset</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #795E26\">lag</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">expr</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">offset</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">default</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Returns the value of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">expr</span></span></code> for the previous row. If <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">offset</span></span></code> is specified, returns the value of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">expr</span></span></code> for the row <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">offset</span></span></code> rows before the current row. Returns <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">default</span></span></code> (or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">null</span></span></code> if unspecified) when the referenced row doesn't exist."
      },
      {
        "type": "p",
        "text": "Generates an error if <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">offset</span></span></code> is <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">null</span></span></code>, negative, or not an integer."
      },
      {
        "type": "p",
        "text": "The value of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">offset</span></span></code> must be a <em>constant</em>."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">prev_carrier</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">lag</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">prev_prev_carrier</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">lag</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">prev_carrier_or_none</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">lag</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39;NONE&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Window Functions",
      "lead"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">lead</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">expr</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #795E26\">lead</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">expr</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">offset</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #795E26\">lead</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">expr</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">offset</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">default</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Returns the value of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">expr</span></span></code> for the next row. If <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">offset</span></span></code> is specified, returns the value of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">expr</span></span></code> for the row <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">offset</span></span></code> rows after the current row. Returns <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">default</span></span></code> (or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">null</span></span></code> if unspecified) when the referenced row doesn't exist."
      },
      {
        "type": "p",
        "text": "Generates an error if <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">offset</span></span></code> is <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">null</span></span></code>, negative, or not an integer."
      },
      {
        "type": "p",
        "text": "The value of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">offset</span></span></code> must be a <em>constant</em>."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; { </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">} -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">next_carrier</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">lead</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">next_next_carrier</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">lead</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">next_carrier_or_none</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">lead</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39;NONE&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Window Functions",
      "first_value"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">first_value</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">expr</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Returns the first value of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">expr</span></span></code> across all rows (i.e. the value for the first row)."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">first_carrier</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">first_value</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Window Functions",
      "last_value"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">last_value</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">expr</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Returns the last value of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">expr</span></span></code> across all rows (i.e. the value for the last row)."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; { </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">} -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">last_carrier</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">last_value</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Window Functions",
      "min_cumulative"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">min_cumulative</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">expr</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Returns the minimum value of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">expr</span></span></code> among rows from the first row to the current row."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">asc</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">min_cumulative_flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">min_cumulative</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Window Functions",
      "max_cumulative"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">max_cumulative</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">expr</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Returns the maximum value of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">expr</span></span></code> among rows from the first row to the current row."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">asc</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">max_cumulative_flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">max_cumulative</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Window Functions",
      "sum_cumulative"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">sum_cumulative</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">expr</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Returns the cumulative sum of values of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">expr</span></span></code> from the first row to the current row."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">asc</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">sum_cumulative_flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">sum_cumulative</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Window Functions",
      "min_window"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">min_window</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">expr</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Returns the minimum of all values of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">expr</span></span></code> across all rows."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">min_flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">min_window</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Window Functions",
      "max_window"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">max_window</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">expr</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Returns the maximum of all values of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">expr</span></span></code> across all rows."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">max_flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">max_window</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Window Functions",
      "sum_window"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">sum_window</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">expr</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Returns the sum of all values of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">expr</span></span></code> across all rows."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">total_flight_count1</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">sum_window</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">total_flight_count2</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">all</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Window Functions",
      "avg_moving"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">avg_moving</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">expr</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">preceding</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #795E26\">avg_moving</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">expr</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">preceding</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">following</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Produces a moving average (or 'rolling average') of values of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">expr</span></span></code> among rows between <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">preceding</span></span></code> rows before the current row and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">following</span></span></code> rows after the current row (or the current row if <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">following</span></span></code> is not specified)."
      },
      {
        "type": "p",
        "text": "Both <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">preceding</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">following</span></span></code> must be <em>literals</em>."
      },
      {
        "type": "p",
        "text": "Note: <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">avg_moving</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">)</span></span></code> means that the average is computed over 4 rows (the current row and 3 preceding)."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier_analysis</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">yr</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">year</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">yr</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">asc</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">three_year_avg</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">avg_moving</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">three_year_avg_centered</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">avg_moving</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "Functions",
      "Window Functions",
      "All Functions"
    ],
    "paragraphs": [],
    "path": "/documentation/language/functions.malloynb"
  },
  {
    "titles": [
      "HyperLogLog Algorithm Overview"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The HyperLogLog algorithm is a probabilistic cardinality estimator used to approximate the number\nof distinct elements in a multiset. It is particularly useful for large data sets where counting the\nexact cardinality is impractical due to memory constraints."
      }
    ],
    "path": "/documentation/language/hyperloglog.malloynb"
  },
  {
    "titles": [
      "HyperLogLog Algorithm Overview",
      "Key Features and Operations"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Memory Efficiency: HyperLogLog uses significantly less memory than exact cardinality calculation methods, making it suitable for large data sets."
      },
      {
        "type": "p",
        "text": "Accuracy: The algorithm provides a typical accuracy (standard error) of 2% for cardinalities over 10^9 using only 1.5 kB of memory."
      },
      {
        "type": "p",
        "text": "Functions:"
      },
      {
        "type": "p",
        "text": "<a href=\"#hll_accumulate\">hll_accumulate</a> (add): Add new elements to the set.  Initializes the counter."
      },
      {
        "type": "p",
        "text": "<a href=\"#hll_estimate\">hll_estimate</a> (count): Obtain the cardinality of the set."
      },
      {
        "type": "p",
        "text": "<a href=\"#hll_combine\">hll_combine</a> (merge): Obtain the union of two sets."
      },
      {
        "type": "p",
        "text": "<a href=\"#hll_export\">hll_export</a>: Export the HLL Sketch to a persistent, dialect-specific format."
      },
      {
        "type": "p",
        "text": "<a href=\"#hll_import\">hll_import</a>: Import an HLL Sketch from a persistent, dialect-specific format."
      }
    ],
    "path": "/documentation/language/hyperloglog.malloynb"
  },
  {
    "titles": [
      "HyperLogLog Algorithm Overview",
      "Data Structure"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The HyperLogLog algorithm uses an array M of m counters (or \"registers\") initialized to 0. This array is called the HyperLogLog sketch of the multiset S.  See the <a href=\"https://en.wikipedia.org/wiki/HyperLogLog\">Wikipedia article</a> for further details."
      }
    ],
    "path": "/documentation/language/hyperloglog.malloynb"
  },
  {
    "titles": [
      "HyperLogLog Algorithm Overview",
      "Using HyperLogLog in Malloy Schemas and Queries"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "In Malloy, you can use the HyperLogLog algorithm to efficiently estimate the cardinality of large data sets. By incorporating HyperLogLog into your schemas and queries, you can gain insights into the distinct elements of your data without sacrificing performance or memory."
      }
    ],
    "path": "/documentation/language/hyperloglog.malloynb"
  },
  {
    "titles": [
      "HyperLogLog Algorithm Overview",
      "Using HyperLogLog in Malloy Schemas and Queries",
      "Supported Databases"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy HyperLogLog functions <em>can only be used with the following databases</em>:"
      },
      {
        "type": "p",
        "text": "<strong>Presto-Trino</strong> See the <a href=\"dialect/presto-trino\">Malloy Presto-Trino Page</a>."
      },
      {
        "type": "p",
        "text": "<strong>BigQuery</strong>.  See the <a href=\"dialect/bigquery\">Malloy BigQuery Page</a>."
      },
      {
        "type": "p",
        "text": "<strong>Snowflake</strong>.  See the <a href=\"dialect/snowflake\">Malloy Snowflake Page</a>."
      }
    ],
    "path": "/documentation/language/hyperloglog.malloynb"
  },
  {
    "titles": [
      "HyperLogLog Algorithm Overview",
      "HLL Functions"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The Malloy language supports the following HyperLogLog functions."
      }
    ],
    "path": "/documentation/language/hyperloglog.malloynb"
  },
  {
    "titles": [
      "HyperLogLog Algorithm Overview",
      "HLL Functions",
      "hll_accumulate"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-txt\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">run: flights -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    group_by:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        dep_date is dep_time::date</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        carrier, origin, destination</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    aggregate:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        flight_count is count()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        aircraft_count_hll is hll_accumulate(tail_num)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">} -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    group_by:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        dep_date</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    aggregate:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        flight_count is flight_count.sum()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        aircraft_count is hll_estimate(hll_combine(aircraft_count_hll))</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Add new elements to the set.  Initializes the counter."
      }
    ],
    "path": "/documentation/language/hyperloglog.malloynb"
  },
  {
    "titles": [
      "HyperLogLog Algorithm Overview",
      "HLL Functions",
      "hll_estimate"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Returns an estimate of the number of distinct elements in the data set.  See the previous example."
      }
    ],
    "path": "/documentation/language/hyperloglog.malloynb"
  },
  {
    "titles": [
      "HyperLogLog Algorithm Overview",
      "HLL Functions",
      "hll_combine"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Merges HLL++ sketches of the same underlying type into a new sketch.  See the previous example."
      }
    ],
    "path": "/documentation/language/hyperloglog.malloynb"
  },
  {
    "titles": [
      "HyperLogLog Algorithm Overview",
      "HLL Functions",
      "hll_export"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-txt\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">run: flights -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    group_by:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        dep_date is dep_time::date</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        carrier, origin, destination</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    aggregate:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        flight_count is count()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        aircraft_count_hll_persist is hll_export(hll_accumulate(tail_num))</span></span>\n<span class=\"line\"><span style=\"color: #000000\">} -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    group_by:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        dep_date</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    aggregate:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        flight_count is flight_count.sum()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        aircraft_count is hll_estimate(hll_combine(hll_import(aircraft_count_hll_persist)))</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Exports the HLL Sketch to a persistent format.  The output type is database-specific."
      }
    ],
    "path": "/documentation/language/hyperloglog.malloynb"
  },
  {
    "titles": [
      "HyperLogLog Algorithm Overview",
      "HLL Functions",
      "hll_import"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Imports an HLL Sketch from a persistent, database-specific format.  See the previous example."
      }
    ],
    "path": "/documentation/language/hyperloglog.malloynb"
  },
  {
    "titles": [
      "Imports"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "In order to reuse or extend a source from another file, you can include all the\nexported sources from another file using <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&quot;path/to/some/file.malloy&quot;</span></span></code>."
      },
      {
        "type": "p",
        "text": "For example, if you wanted to create a file <code>flights_by_carrier.malloy</code> with a query from the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">flights</span></span></code> source, you could write:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&quot;flights.malloy&quot;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; { </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\">; </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\">; </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> }</span></span></pre>"
      }
    ],
    "path": "/documentation/language/imports.malloynb"
  },
  {
    "titles": [
      "Imports",
      "Import Locations"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Imported files may be specified with relative or absolute URLs."
      }
    ],
    "path": "/documentation/language/imports.malloynb"
  },
  {
    "titles": [
      "Imports",
      "Selective Imports"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The default is to import all objects from the referenced file. You can also use <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">{} </span><span style=\"color: #001080\">from</span></span></code> to select (and optionally rename) specific objects to be imported."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">spaceports</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> } </span><span style=\"color: #001080\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&quot;airports.malloy&quot;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> -&gt; { </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">() }</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">spaceports</span><span style=\"color: #000000\"> -&gt; { </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">spaceport_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">() }</span></span></pre>"
      }
    ],
    "path": "/documentation/language/imports.malloynb"
  },
  {
    "titles": [
      "Joins"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Joins in Malloy differ from SQL joins.  When two sources are joined,\nMalloy retains the graph nature and hierarchy of the the data relationships. This is unlike\nSQL, which flattens everything into a single table space."
      },
      {
        "type": "p",
        "text": "<a href=\"aggregates\">Aggregate calculations</a> navigate this graph to deduce\nthe locality of computation, so they are always computed correctly regardless of join pattern, avoiding the fan and chasm traps."
      },
      {
        "type": "p",
        "text": "In Malloy, syntaxes for join are:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #000000; font-style: italic\">source name</span><span style=\"color: #000000\"> [</span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #000000; font-style: italic\">source</span><span style=\"color: #000000\">] </span><span style=\"color: #AF00DB\">on</span><span style=\"color: #000000\"> </span><span style=\"color: #000000; font-style: italic\">boolean expression</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #000000; font-style: italic\">source name</span><span style=\"color: #000000\"> [</span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #000000; font-style: italic\">source</span><span style=\"color: #000000\">] </span><span style=\"color: #AF00DB\">with</span><span style=\"color: #000000\"> </span><span style=\"color: #000000; font-style: italic\">foreign key expression</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">join_many</span><span style=\"color: #000000\">: </span><span style=\"color: #000000; font-style: italic\">source name</span><span style=\"color: #000000\"> [</span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #000000; font-style: italic\">source</span><span style=\"color: #000000\">] </span><span style=\"color: #AF00DB\">on</span><span style=\"color: #000000\"> </span><span style=\"color: #000000; font-style: italic\">boolean expression</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">join_cross</span><span style=\"color: #000000\">: </span><span style=\"color: #000000; font-style: italic\">source name</span><span style=\"color: #000000\"> [</span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #000000; font-style: italic\">source</span><span style=\"color: #000000\">] [</span><span style=\"color: #AF00DB\">on</span><span style=\"color: #000000\"> </span><span style=\"color: #000000; font-style: italic\">boolean expression</span><span style=\"color: #000000\">]</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Examples of the above, with <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">orders</span></span></code> as the implied source:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">users</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;data/users.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">on</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">user_id</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">users</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">id</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">users</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">on</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">user_id</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">users</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">id</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">users</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">with</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">user_id</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">join_many</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">order_items</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">on</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">order_items</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">id</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">id</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">join_cross</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">order_items2</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;data/order_items.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">on</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">user_id</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">order_items2</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">user_id</span></span></pre>"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">:</span></span></code> - the table we are joining has one row for each row in the source table."
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">join_many</span><span style=\"color: #000000\">:</span></span></code> - the table we are joining has many rows for each row in the source table"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">join_cross</span><span style=\"color: #000000\">:</span></span></code> - the join is a cross product and there will be many rows in each side of the join."
      },
      {
        "type": "p",
        "text": "Malloy's joins are left outer joins by default.\nSince Malloy deals in graphs, some SQL Join types don't make sense (<code>RIGHT JOIN</code>, for example)."
      }
    ],
    "path": "/documentation/language/join.malloynb"
  },
  {
    "titles": [
      "Joins",
      "Join Types"
    ],
    "paragraphs": [],
    "path": "/documentation/language/join.malloynb"
  },
  {
    "titles": [
      "Joins",
      "Join Types",
      "Foreign Key to Primary Key"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The easiest, most error-proof way to perform a join is using the following syntax:"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #000000; font-style: italic\">source</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">with</span><span style=\"color: #000000\"> </span><span style=\"color: #000000; font-style: italic\">foreign key</span></span></code>"
      },
      {
        "type": "p",
        "text": "To join based on a foreign key through the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">primary_key</span></span></code> of a joined source, use <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">with</span></span></code> to specify an expression, which could be as simple as a field name in the source. This expression is matched against the declared <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">primary_key</span></span></code> of the joined source. Sources without a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">primary_key</span></span></code> cannot use <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">with</span></span></code> joins."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">users</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/users.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">primary_key</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">id</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">order_items</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/order_items.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">users</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">with</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">user_id</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "This is simply a shortcut, when joining based on the primary key of a joined source. It is exactly equivalent to the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">on</span></span></code> join written like this."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">order_items</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/order_items.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">users</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">on</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">user_id</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">users</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">id</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/join.malloynb"
  },
  {
    "titles": [
      "Joins",
      "Naming Joined Sources"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "If no alias is specified using <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">is</span></span></code>, the name of the join will be the name of the source being joined."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/carriers.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">primary_key</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">code</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">with</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "To give the joined source a different name within the context source, use <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">is</span></span></code> to alias it."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">primary_key</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">code</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights2</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">origin_airport</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">with</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">origin</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/join.malloynb"
  },
  {
    "titles": [
      "Joins",
      "In-line Joins"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Sources do not need to be modeled before they are used in a join, though the join must be named using <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">is</span></span></code>."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights3</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/carriers.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> { </span><span style=\"color: #AF00DB\">primary_key</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">code</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">with</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/join.malloynb"
  },
  {
    "titles": [
      "Joins",
      "Using Fields from Joined Sources"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "When a source is joined in, its fields become nested within the parent source. Fields from joined sources can be referenced using <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">.</span></span></code>:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights3</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">nickname</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Measures defined in joined sources may be used in addition to dimensions."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">destination</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">carrier_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/join.malloynb"
  },
  {
    "titles": [
      "Joins",
      "Join Example"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "This example demonstrates the definition of several different joins in a model and their use in a query.\nEntire subtrees of data can be joined.  In the example below, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">aircraft</span></span></code> joins <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">aircraft_models</span></span></code>, and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">flights</span></span></code>\njoins <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">aircraft</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">airports</span></span></code>. The tree nature of the join relationship\nretained."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">aircraft</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">aircraft_models</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">manufacturer</span></span></pre>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">aircraft_models</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/aircraft_models.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">primary_key</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">aircraft_model_code</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">aircraft_model_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #008000\">/* Individual airplanes */</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">aircraft</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/aircraft.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">primary_key</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">tail_num</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">aircraft_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">aircraft_models</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">with</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">aircraft_model_code</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #008000\">/* The airports that the aircraft fly to and from */</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports2</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">primary_key</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">code</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights4</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">origin_airport</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">airports2</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">with</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">origin</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">destination_airport</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">airports2</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">with</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">destination</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">aircraft</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">with</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">tail_num</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights4</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">aircraft</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">aircraft_models</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">manufacturer</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">aircraft_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">aircraft</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">aircraft_model_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">aircraft</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">aircraft_models</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "For more examples and how to reason about aggregation across joins, review the <a href=\"aggregates\">Aggregates</a> section."
      }
    ],
    "path": "/documentation/language/join.malloynb"
  },
  {
    "titles": [
      "Joins",
      "Inner Joins"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Inner join are essentially left joins with an additional condition that the parent table has matches in the joined table. The example below functions logically as an <code>INNER JOIN</code>, returning only users that have at least one row in the orders table, and only orders that have an associated user."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">users4</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/users.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">join_many</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">orders</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/order_items.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">on</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">id</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">orders</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">user_id</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">orders</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">user_id</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">not</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">null</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/join.malloynb"
  },
  {
    "titles": [
      "Joins",
      "Joins from Queries"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Queries may be used as a source for joins, either as-is or extended. They may be referenced by name (as in the example below) or written in-line."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">query</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">aircraft_facts</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">tail_num</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">lifetime_flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">lifetime_distance</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">distance</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights5</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">aircraft_facts</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">on</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">tail_num</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">aircraft_facts</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">tail_num</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights5</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">top_aircraft</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">tail_num</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">aircraft_facts</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">lifetime_flights</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">5</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">lifetime_flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">desc</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/join.malloynb"
  },
  {
    "titles": [
      "4.0 Messages FAQ"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "There are a few places where Malloy 4.0 will require existing code to change. In the transitional period, both the 4.0 and Pre-4.0 syntax is accepted, and a warning will be generated for Pre-4.0 constructs, to give users guidance in changing their code. Once 4.0 fully releases, these will be errors and not warnings."
      },
      {
        "type": "p",
        "text": "This is a list of all the 4.0 compatibility messages, with examples code showing how to transform existing code for Malloy 4.0."
      }
    ],
    "path": "/documentation/language/m4warnings.malloynb"
  },
  {
    "titles": [
      "4.0 Messages FAQ",
      "Extend a source with <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">extend</span></span></code>"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Creating a new source by adding new propertied to an existing source is called <em>extension</em> in Malloy. There have been three different ways to express extension of a source, now only the form <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000; font-style: italic\">source</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> { </span><span style=\"color: #000000; font-style: italic\">extensions</span><span style=\"color: #000000\"> }</span></span></code> is accepted."
      }
    ],
    "path": "/documentation/language/m4warnings.malloynb"
  },
  {
    "titles": [
      "4.0 Messages FAQ",
      "Refine a query with <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">+</span></span></code>"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Creating a new query by adding properties to an existing query is called <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">refinement</span></span></code> in Malloy. There have been three different ways to express refinements, now only the form <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000; font-style: italic\">query</span><span style=\"color: #000000\"> + { </span><span style=\"color: #000000; font-style: italic\">refinements</span><span style=\"color: #000000\"> }</span></span></code>  is accepted."
      }
    ],
    "path": "/documentation/language/m4warnings.malloynb"
  },
  {
    "titles": [
      "4.0 Messages FAQ",
      "Sources contain views"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The object inside a source which can be used to build a query is now called a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">:</span></span></code>, it used to be called a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">query</span><span style=\"color: #000000\">:</span></span></code>"
      }
    ],
    "path": "/documentation/language/m4warnings.malloynb"
  },
  {
    "titles": [
      "4.0 Messages FAQ",
      "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">:</span></span></code> instead of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">project</span><span style=\"color: #000000\">:</span></span></code>"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">project</span><span style=\"color: #000000\">:</span></span></code> keyword has been renamed to <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">:</span></span></code>."
      }
    ],
    "path": "/documentation/language/m4warnings.malloynb"
  },
  {
    "titles": [
      "4.0 Messages FAQ",
      "New syntax for <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">(*)</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\">distinct</span><span style=\"color: #000000\">)</span></span></code>"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The SQL syntax for distinct counts <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\">distinct</span><span style=\"color: #000000\"> </span><span style=\"color: #000000; font-style: italic\">expression</span><span style=\"color: #000000\">)</span></span></code> is deprecated in favor of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">(</span><span style=\"color: #000000; font-style: italic\">expression</span><span style=\"color: #000000\">)</span></span></code>."
      },
      {
        "type": "p",
        "text": "The SQL syntax for counting the records of a table <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">(*)</span></span></code> is deprecated in favor of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span></code>."
      }
    ],
    "path": "/documentation/language/m4warnings.malloynb"
  },
  {
    "titles": [
      "4.0 Messages FAQ",
      "{? } deprecated"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The old filter shortcut syntax <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">{? </span><span style=\"color: #000000; font-style: italic\">condition</span><span style=\"color: #000000\"> }</span></span></code> is deprecated. Use the more explicit <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">{ </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #000000; font-style: italic\">condition</span><span style=\"color: #000000\"> }</span></span></code> syntax instead."
      }
    ],
    "path": "/documentation/language/m4warnings.malloynb"
  },
  {
    "titles": [
      "4.0 Messages FAQ",
      "Nesting Malloy in SQL with %{}% is now %{}"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Query interpolation in SQL strings should use <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">}</span></span></code> to end the interpolation rather than <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">}%</span></span></code>."
      }
    ],
    "path": "/documentation/language/m4warnings.malloynb"
  },
  {
    "titles": [
      "4.0 Messages FAQ",
      "-> no longer begins a named query or view"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "It used to be necessary to use an arrow (<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">-&gt;</span></span></code>) to base a new source or query off of an existing query. This is no longer necessary."
      },
      {
        "type": "p",
        "text": "A leading <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">-&gt;</span></span></code> operator no longer signifies the beginning of a query pipeline."
      }
    ],
    "path": "/documentation/language/m4warnings.malloynb"
  },
  {
    "titles": [
      "4.0 Messages FAQ",
      "SQL and tables are accessed through the connection"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "When referencing a SQL table, the connection name should now be specified <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">connection_name</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;table_path&#39;</span><span style=\"color: #000000\">)</span></span></code> instead of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;connection_name:table_path&#39;</span><span style=\"color: #000000\">)</span></span></code>."
      },
      {
        "type": "p",
        "text": "Prior to Malloy 4.0, SQL blocks were declared using <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">sql</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">sql_block</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> ...</span></span></code> and used with <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">from_sql</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">sql_block</span><span style=\"color: #000000\">) ...</span></span></code>. Now, SQL blocks are created with the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">connection_name</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sql</span><span style=\"color: #000000\">(...)</span></span></code> syntax and can be used as sources directly."
      },
      {
        "type": "p",
        "text": "Prior to Malloy 4.0, SQL blocks were declared using <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">sql</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">sql_block</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> ...</span></span></code>. Now, SQL blocks are created with the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">connection_name</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sql</span><span style=\"color: #000000\">(...)</span></span></code> syntax."
      }
    ],
    "path": "/documentation/language/m4warnings.malloynb"
  },
  {
    "titles": [
      "4.0 Messages FAQ",
      "Queries can be used as a source without <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">from</span><span style=\"color: #000000\">()</span></span></code>"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Prior to Malloy 4.0, the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">from</span><span style=\"color: #000000\">()</span></span></code> function was required to convert a query into a source. Now a query can be used directly anywhere where a source is needed."
      }
    ],
    "path": "/documentation/language/m4warnings.malloynb"
  },
  {
    "titles": [
      "4.0 Messages FAQ",
      "Extensions to view objects move to an <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\">: {}</span></span></code> section"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "When the ability to extend the source of a query operation was first introduced, the extensions were written alongside the query. Now those extensions should be written in an <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000; font-style: italic\">extend:</span></span></code> block inside the query."
      },
      {
        "type": "p",
        "text": "On the fly joins in queries should now be specified in an <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\">:</span></span></code> block."
      },
      {
        "type": "p",
        "text": "The <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">declare</span><span style=\"color: #000000\">:</span></span></code> keyword has been deprecated, and should be replaced with <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">:</span></span></code> or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">:</span></span></code>. If the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">declare</span><span style=\"color: #000000\">:</span></span></code> is used inside a query, it also needs to be put into an <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\">:</span></span></code> block."
      }
    ],
    "path": "/documentation/language/m4warnings.malloynb"
  },
  {
    "titles": [
      "4.0 Messages FAQ",
      "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">top</span><span style=\"color: #000000\">:</span></span></code> ... <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">by</span></span></code> removed"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Previously, you could specify an ordering field in the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">top</span><span style=\"color: #000000\">:</span></span></code> specification. Now you should use <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">:</span></span></code> explicitly."
      }
    ],
    "path": "/documentation/language/m4warnings.malloynb"
  },
  {
    "titles": [
      "4.0 Messages FAQ",
      "Write nameless queries with <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">:</span></span></code>"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">query</span><span style=\"color: #000000\">:</span></span></code> should now only be used to declare a query with a name. To run a query without naming it, use <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">:</span></span></code>."
      }
    ],
    "path": "/documentation/language/m4warnings.malloynb"
  },
  {
    "titles": [
      "Nested Views"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Nested views are views included in other views. When a nested view is used in a query, it generates an <em>aggregating subquery</em>, which produces a subtable per row in the view in which it is embedded. The term <em>nested query</em> is often used to refer to a query which uses a nested view."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">##(docs) hidden</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&quot;airports.malloy&quot;</span></span></pre>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> -&gt; {  </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_facility</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">fac_type</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/nesting.malloynb"
  },
  {
    "titles": [
      "Nested Views",
      "Nesting Nested Views"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Aggregating subqueries can be nested infinitely, meaning that a nested view can contain another nested view."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">top_5_counties</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">5</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">county</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_facility</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">fac_type</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/nesting.malloynb"
  },
  {
    "titles": [
      "Nested Views",
      "Filtering Nested Views"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Filters can be applied at any level within nested views."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span><span style=\"color: #000000\"> ? </span><span style=\"color: #A31515\">&#39;CA&#39;</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">&#39;NY&#39;</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">&#39;MN&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">top_5_counties</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">5</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">county</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">major_facilities</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\">  {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">major</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;Y&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">name</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">code</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39; - &#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">full_name</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_facility</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\">  {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">fac_type</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/nesting.malloynb"
  },
  {
    "titles": [
      "Nested Views",
      "Nesting Named Views"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Any views defined in a source can be used by name in a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">:</span></span></code> clause or a query."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports_with_views</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_facility</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">fac_type</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">major_facilities</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">major</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;Y&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">name</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">code</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39; - &#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">full_name</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">top_5_counties</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">5</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">county</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">major_facilities</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">by_facility</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports_with_views</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">top_5_counties</span></span></pre>"
      }
    ],
    "path": "/documentation/language/nesting.malloynb"
  },
  {
    "titles": [
      "Functions Changes in v0.0.39"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "In Malloy version 0.0.39, treatment of functions changed dramatically."
      }
    ],
    "path": "/documentation/language/new_functions.malloynb"
  },
  {
    "titles": [
      "Functions Changes in v0.0.39",
      "The Old Way (\"SQL Functions\")"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Prior to v0.0.39:"
      },
      {
        "type": "p",
        "text": "The Malloy return type was inferred to be the same as the first argument's type, except in special cases where the type was known."
      },
      {
        "type": "p",
        "text": "Sources and other top-level model objects could have the same name as functions."
      },
      {
        "type": "p",
        "text": "Any function call of the form <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">SOME_NAME</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">arg1</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">arg2</span><span style=\"color: #000000\">, ..., </span><span style=\"color: #001080\">argN</span><span style=\"color: #000000\">)</span></span></code> was translated directly into SQL as-is."
      },
      {
        "type": "p",
        "text": "If the dialect had no function called <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">SOME_NAME</span></span></code> a dialect SQL error would be generated."
      },
      {
        "type": "p",
        "text": "There was no way to tell Malloy that the return type was different than the inferred type, except to cast the result, e.g. <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">TIMESTAMP_SECONDS</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">num_seconds</span><span style=\"color: #000000\">)::</span><span style=\"color: #267F99\">timestamp</span></span></code>."
      },
      {
        "type": "p",
        "text": "Arguments were not typechecked, meaning you could call <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">SIN</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;seven&#39;</span><span style=\"color: #000000\">)</span></span></code> or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">BYTE_LENGTH</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">42</span><span style=\"color: #000000\">)</span></span></code>."
      }
    ],
    "path": "/documentation/language/new_functions.malloynb"
  },
  {
    "titles": [
      "Functions Changes in v0.0.39",
      "The New Way (\"Malloy Functions\")"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Starting in v0.0.39:"
      },
      {
        "type": "p",
        "text": "Return types of all Malloy functions are known."
      },
      {
        "type": "p",
        "text": "Sources and other top-level model objects can not have the same name as functions."
      },
      {
        "type": "p",
        "text": "Some functions, such as <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">sin</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">)</span></span></code> are translated to SQL as-is."
      },
      {
        "type": "p",
        "text": "Function arguments are typechecked, making <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">sin</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;seven&#39;</span><span style=\"color: #000000\">)</span></span></code> an error, 'No matching overload for function sin(string).'"
      },
      {
        "type": "p",
        "text": "There is a <a href=\"./functions#all-functions\">list of \"built-in\" functions available in Malloy</a>."
      },
      {
        "type": "p",
        "text": "Functions not known to Malloy may be called like <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">cbrt</span><span style=\"color: #000000\">!(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">)</span></span></code> or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">timestamp_seconds</span><span style=\"color: #000000\">!</span><span style=\"color: #267F99\">timestamp</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">)</span></span></code>, the latter form instructing Malloy that the function call yields a value of type <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">timestamp</span></span></code>. When called in this way, functions are translated into SQL as-is, and the return type is inferred to be the same as the first argument (or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">number</span></span></code> if there are no arguments) unless specified."
      },
      {
        "type": "p",
        "text": "Other functions are translated with compatibility transformations; e.g. <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">starts_with</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">val</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39;prefix&#39;</span><span style=\"color: #000000\">)</span></span></code> is translated into SQL as <code>COALESCE(STARTS_WITH(val, 'prefix'), FALSE)</code> to abide by Malloy's guarantees about nullability of boolean comparisons; or, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">base</span><span style=\"color: #000000\">)</span></span></code> in Postgres is translated to <code>LOG(base, value)</code> so that Malloy has a consistent argument order across dialects. See the <a href=\"./functions\">function documentation</a> for specifics on a function-by-function basis."
      }
    ],
    "path": "/documentation/language/new_functions.malloynb"
  },
  {
    "titles": [
      "Expressions Involving NULL"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy and SQL use a \"NULL tainting\" approoach to null values in computation. Many computation which include a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">null</span></span></code> produce a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">null</span></span></code> result."
      }
    ],
    "path": "/documentation/language/null-handling.malloynb"
  },
  {
    "titles": [
      "Expressions Involving NULL",
      "Malloy and NULL"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "For most operations, missing or null-valued data can still be used in a computation\nand the \"NULL tainting\", along with treating <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">null</span></span></code> as a \"false-ish\" value, mostly works. For example <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">y</span></span></code> results in <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">null</span></span></code> if either value is null, and the \"false-ish\"\ntreatment of NULL means that comparison is meaningful, even if some of the values are <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">null</span></span></code>."
      },
      {
        "type": "p",
        "text": "However, the boolean output of a negated boolean operation, when null tainted,\nis not useful, and SQL programmers have to protect any use of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">NOT</span></span></code> or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">!=</span></span></code>\nin order for the result to be correct."
      },
      {
        "type": "p",
        "text": "Malloy avoids this by coalescing the output of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">NOT</span></span></code> to produce the much more useful truth table ..."
      }
    ],
    "path": "/documentation/language/null-handling.malloynb"
  },
  {
    "titles": [
      "Expressions Involving NULL",
      "Malloy and NULL",
      "Inequality"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Similarly <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">!=</span></span></code> equality produces a nonsensical result when some of the values are null."
      },
      {
        "type": "p",
        "text": "Malloy also protects the inequality comparison with a coalesce, to give the much more useful truth table ..."
      }
    ],
    "path": "/documentation/language/null-handling.malloynb"
  },
  {
    "titles": [
      "Ordering and Limiting"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Often when querying data the amount of data returned to look at is much smaller than the full result set, so the ordering of the data makes a big difference in what you actually see. To make things easier, Malloy has some smart defaults in the way it presents data.  For the most part, you don't have to think too much about it, but in order to understand it, this document will show you how Malloy makes decisions about what to show you."
      }
    ],
    "path": "/documentation/language/order_by.malloynb"
  },
  {
    "titles": [
      "Ordering and Limiting",
      "Implicit Ordering"
    ],
    "paragraphs": [],
    "path": "/documentation/language/order_by.malloynb"
  },
  {
    "titles": [
      "Ordering and Limiting",
      "Implicit Ordering",
      "Rule 1: Newest first"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "If a query stage has a <a href=\"fields#dimensions\">dimensional</a> column that represents a point in time, it is usually the most\nimportant concept in the query.  Because the most recent data is usually the most relevant, Malloy sorts the newest data first."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">##(docs) hidden</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&quot;flights.malloy&quot;</span></span></pre>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">dep_month</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">month</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/order_by.malloynb"
  },
  {
    "titles": [
      "Ordering and Limiting",
      "Implicit Ordering",
      "Rule 2: Largest first"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "If there is a <a href=\"fields#measures\">measure</a> involved, Malloy sorts larger values first."
      },
      {
        "type": "p",
        "text": "In the following example, Rule 1 doesn't apply, so the default behavior is to sort by first aggregate, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">flight_count</span></span></code> with the largest values first."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/order_by.malloynb"
  },
  {
    "titles": [
      "Ordering and Limiting",
      "Explicit Ordering"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "You can be explicit about result ordering by using the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">order_by</span></span></code> clause."
      },
      {
        "type": "p",
        "text": "In the following example, the results are ordered by <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">carrier</span></span></code> in reverse alphabetical order."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">desc</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Like in SQL, Malloy's <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">order_by</span></span></code> always defaults to ascending order when <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">desc</span></span></code> is omitted. This is true for any column of any type. In the example below,\nthe results are ordered by <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">carrier</span></span></code> in alphabetical order."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Malloy also supports lists of items (using commas or line breaks) in the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span></span></code> clause. Malloy will sort by the first entry first, then by the second within the first, etc."
      },
      {
        "type": "p",
        "text": "You cannot have multiple <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">:</span></span></code> clauses within a query. When an <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span></span></code> is applied in a refinement, it will fully override whatever the previous ordering was."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #008000\">// This query will only be ordered by total_distance and carrier due to the refinement.</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_num</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">flight_num</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">desc</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">total_distance</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">desc</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">total_distance</span></span>\n<span class=\"line\"><span style=\"color: #000000\">} + {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">total_distance</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/order_by.malloynb"
  },
  {
    "titles": [
      "Ordering and Limiting",
      "Limiting"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "In Malloy, you can limit the number of results returned using <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #000000; font-style: italic\">integer literal</span></span></code> or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">top</span><span style=\"color: #000000\">: </span><span style=\"color: #000000; font-style: italic\">integer literal</span></span></code>.  Both are provided for readability."
      },
      {
        "type": "p",
        "text": "In the example below, the results are limited to 2 rows, which are sorted by <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">dep_month</span></span></code> with newest results first (due to Rule 1)."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">2</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">dep_month</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">month</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/order_by.malloynb"
  },
  {
    "titles": [
      "Queries"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The basic syntax for a query in Malloy consists of a <a href=\"./source\">source</a> and a <a href=\"./views\">view</a> consisting of one or more <em>stages</em> separated by <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">-&gt;</span></span></code>. The shape of the data defined in the original source is transformed by each stage."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">##(docs) hidden</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&quot;flights.malloy&quot;</span></span></pre>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; { </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/query.malloynb"
  },
  {
    "titles": [
      "Queries",
      "Sources"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Every query begins with a source, which can be thought of as a table with an associated collection of calculations and join relationships. The most common kind of source is a table source, e.g. <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;flights.csv&#39;</span><span style=\"color: #000000\">)</span></span></code>; see the <a href=\"./source\">Sources</a> section for more information on creating and extending sources."
      },
      {
        "type": "p",
        "text": "Generally, ad-hoc queries will use one of these kinds of sources directly:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) -&gt; { </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">total_flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">() </span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "However, as analysis becomes more involved, it is often useful to define reusable computations in a named source, then use that named source as the basis for queries."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights2</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> { </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">() </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">total_distance</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">distance</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights2</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">total_distance</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "It is also sometimes useful to define a query and then later use that query as the source for another query:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">query</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights_by_carrier</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights_by_carrier</span><span style=\"color: #000000\"> -&gt; { </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/query.malloynb"
  },
  {
    "titles": [
      "Queries",
      "Views"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "A view defines a transformation (or series of transformations) to perform on a source. In a query, everything after the first <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">-&gt;</span></span></code> is a view."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #008000\">//   source  -&gt; view</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; { </span><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">: * }</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Views can be defined in a <a href=\"./source#source-extensions\">source extension</a> to enable reusability and nesting. You can always copy and paste the view of a query into the definition of the source of that query (or an extension of that source)."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights3</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_carrier2</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> { </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights3</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">by_carrier2</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Queries that reference a view by name can add additional stages after those defined in the view."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights3</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">by_carrier2</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">1</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/query.malloynb"
  },
  {
    "titles": [
      "Queries",
      "Refinements, Query partials and Shorthand"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Query blocks write be written in parts, those parts can be either views in the source and combined with the refinement operator <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">+</span></span></code>"
      },
      {
        "type": "p",
        "text": "The query below"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">10</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "can be written as below.  Each of the parts of a query can be separated into a 'partial query'."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  {</span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  + {</span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  + {</span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">10</span><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "The query can also be written as:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  + </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  + {</span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">10</span><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "In the query above, the refinement operator <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">+</span></span></code> combines the parameters of a query so the query can be built from parts.  Measure, dimension and views declared in the source can also be used.  Referencing dimension <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">carrier</span></span></code> expands to a partial of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">{</span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">}</span></span></code>. Referencing measure <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">flight_count</span></span></code> expands to a partial query of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">{</span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\">}</span></span></code>"
      },
      {
        "type": "p",
        "text": "For more information about defining, reusing, nesting, and refining views, see the <a href=\"views\">Views</a> section."
      }
    ],
    "path": "/documentation/language/query.malloynb"
  },
  {
    "titles": [
      "Sources"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Sources, and in particular, <a href=\"#source-extensions\">extended sources</a>, are Malloy's primary unit of reusability for defining computations, join relationships, and queries."
      },
      {
        "type": "p",
        "text": "Malloy separates queries into a data source and a <em>view</em> on that data. A <em>source</em> can be thought of as a table and a collection extensions that are relevant to that table, including measures (aggregate functions), dimensions (scalar calculations), view definitions, and join relationships to other sources."
      },
      {
        "type": "p",
        "text": "A source can be any of the following:"
      },
      {
        "type": "p",
        "text": "A source can be used directly in a query:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Or, more commonly, it can be declared with a name so that it can be reused:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; { </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">() }</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Any of these kinds of sources can be <a href=\"#source-extensions\">extended</a> to add reusable definitions or other modifications."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights2</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/source.malloynb"
  },
  {
    "titles": [
      "Sources",
      "Sources from Tables or Views"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "A source can be created from a SQL table or SQL view from a connected database."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights3</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "When defining a source in this way, all the columns from\nthe source table are available for use in field definitions\nor views against the source."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights3</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Columns from the source table are available</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">origin</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">3</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/source.malloynb"
  },
  {
    "titles": [
      "Sources",
      "Sources from Malloy Queries"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "In Malloy, every query has an associated output schema, so it can be used as a source for other queries."
      },
      {
        "type": "p",
        "text": "For example, in this model we define a query <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">flights_by_carrier</span></span></code>:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">query</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights_by_carrier</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">lifetime_flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "And here, we use the query <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">flights_by_carrier</span></span></code> as a source:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights_by_carrier</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">lifetime_flights_bucketed</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">round</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">lifetime_flights</span><span style=\"color: #000000\">, -</span><span style=\"color: #098658\">4</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">lifetime_flights</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">3</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "We can also explicitly define the query as a source, which is useful when adding reusable computations:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier_facts</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">flights_by_carrier</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">lifetime_flights_bucketed</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">round</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">lifetime_flights</span><span style=\"color: #000000\">, -</span><span style=\"color: #098658\">4</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier_facts</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">lifetime_flights_bucketed</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">lifetime_flights</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">3</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Here we referenced the query name <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">flights_by_carrier</span></span></code>, but we can also define a source by writing a query inline and then <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">extend</span></span></code>ing it:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier_facts2</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">lifetime_flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">} </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">lifetime_flights_bucketed</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">round</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">lifetime_flights</span><span style=\"color: #000000\">, -</span><span style=\"color: #098658\">4</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier_facts2</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">lifetime_flights_bucketed</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">lifetime_flights</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">3</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/source.malloynb"
  },
  {
    "titles": [
      "Sources",
      "Sources from SQL Queries"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Sources can be created from a SQL query, e.g."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">limited_users</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #AF00DB\">sql</span><span style=\"color: #000000\">(&quot;&quot;&quot;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">SELECT</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    first_name,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    last_name,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    gender</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">FROM</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;../data/users.parquet&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">LIMIT</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">100</span></span>\n<span class=\"line\"><span style=\"color: #000000\">&quot;&quot;&quot;)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">limited_users</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">first_name</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">user_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Like with <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;data/users.parquet&#39;</span><span style=\"color: #000000\">)</span></span></code>, Malloy fetches the schema from the database to make columns of the resulting table accessible in computations."
      }
    ],
    "path": "/documentation/language/source.malloynb"
  },
  {
    "titles": [
      "Sources",
      "Source Extensions"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Any source can be extended to add filters, specify a primary key, add fields and joins, rename fields, or limit which fields are available."
      },
      {
        "type": "p",
        "text": "Extensions are often added when defining a source for the first time:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights5</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "An existing source can also be extended, then given a new name or used in a query."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights6</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights_ext</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">flights6</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights6</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> { </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">total_distance</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">distance</span><span style=\"color: #000000\">) </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\"># percent</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">percent_distance</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">total_distance</span><span style=\"color: #000000\"> / </span><span style=\"color: #795E26\">all</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">total_distance</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">} -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">total_distance</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">percent_distance</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "The following subsections document the various kinds of source extensions."
      }
    ],
    "path": "/documentation/language/source.malloynb"
  },
  {
    "titles": [
      "Sources",
      "Source Extensions",
      "Adding Fields"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Fields—dimensions, measures, and views—may be defined as\npart of a source extension, allowing for them to be used in any\nquery against the source, or in other fields within that source."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports2</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">has_control_tower</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">cntl_twr</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;Y&#39;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">average_elevation</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">elevation</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">average_elevation_by_control_tower</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">has_control_tower</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">average_elevation</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports2</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">average_elevation_by_control_tower</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">2</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "For more information about fields and how to define them, see the <a href=\"./fields\">Fields</a> section, or for information on views specifically, see the <a href=\"./views\">Views</a> section."
      }
    ],
    "path": "/documentation/language/source.malloynb"
  },
  {
    "titles": [
      "Sources",
      "Source Extensions",
      "Filtering Sources"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Filters can be added as a source extension with a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">:</span></span></code> clause. These filters apply to any query against the source."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights7</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">long_sfo_flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">flights7</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">origin</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;SFO&#39;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">and</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">distance</span><span style=\"color: #000000\"> &gt; </span><span style=\"color: #098658\">1000</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">long_sfo_flights</span><span style=\"color: #000000\"> -&gt; { </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">destination</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/source.malloynb"
  },
  {
    "titles": [
      "Sources",
      "Source Extensions",
      "Primary Keys"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "To be used in <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">with</span></span></code>-style joins to other sources, a source must\nhave a primary key specified as an extension."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/carriers.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">primary_key</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">code</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/source.malloynb"
  },
  {
    "titles": [
      "Sources",
      "Source Extensions",
      "Joins"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "When sources are joined as part of their definition, queries can reference fields in the joined sources without having to specify the join relationship each time."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carriers2</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/carriers.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">primary_key</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">code</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights9</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">with</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights9</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">nickname</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">3</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "See the <a href=\"join\">Joins</a> section for more information on working with joins."
      }
    ],
    "path": "/documentation/language/source.malloynb"
  },
  {
    "titles": [
      "Sources",
      "Source Extensions",
      "Renaming Fields"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Fields from a source may be renamed in the context of the\nnew source. This is useful when the original name is not descriptive, or has a different meaning in the new context."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports5</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">rename</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">facility_type</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">fac_type</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/source.malloynb"
  },
  {
    "titles": [
      "Sources",
      "Source Extensions",
      "Limiting Access to Fields"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The list of fields available in a source  can be limited. This can be done either by <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">accept</span></span></code>ing a list of fields to include (in which case any other field from the source is excluded, i.e. an \"allow list\") or by <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">except</span></span></code>ing a list of fields to exclude (any other field is included, i.e. a \"deny list\"). These cannot be used in conjunction with one another."
      },
      {
        "type": "p",
        "text": "In this example, we define <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">airports</span></span></code> to <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">extend</span></span></code> the <code>airports.parquet</code> table, but we limit the included columns to only <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">id</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">code</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">city</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">state</span></span></code>, and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">elevation</span></span></code>."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports6</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">accept</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">id</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">code</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">city</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">state</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">elevation</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Here, we do the same, but instead of specifying which columns to include, we specify to include all columns except <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">c_ldg_rts</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">aero_cht</span></span></code>, and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">cntl_twr</span></span></code>."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports7</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">except</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">c_ldg_rts</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">aero_cht</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">cntl_twr</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/source.malloynb"
  },
  {
    "titles": [
      "SQL Blocks"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Sometimes it is useful to add SQL statements into a Malloy file. You can do so by using the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">sql</span><span style=\"color: #000000\">:</span></span></code> keyword.\nAn SQL statement has two properties."
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">:</span></span></code> -- Has a string value which is bracketed with triple quotes <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">&quot;&quot;&quot;</span></span></code>"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">connection</span><span style=\"color: #000000\">:</span></span></code> -- A string value which is the name of the connection\n<em>(if not specified the default connection will be used)</em>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #AF00DB\">sql</span><span style=\"color: #000000\">(&quot;&quot;&quot;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">SELECT</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      first_name,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      last_name,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      gender</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">FROM</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;../data/users.parquet&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">LIMIT</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">10</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  &quot;&quot;&quot;)</span></span></pre>"
      }
    ],
    "path": "/documentation/language/sql_blocks.malloynb"
  },
  {
    "titles": [
      "SQL Blocks",
      "Sources from SQL Blocks"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Sources can be created from a SQL block, e.g."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">limited_users</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #AF00DB\">sql</span><span style=\"color: #000000\">(&quot;&quot;&quot;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">SELECT</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      first_name,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      last_name,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      gender</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">FROM</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;../data/users.parquet&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">LIMIT</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">10</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  &quot;&quot;&quot;) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">user_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">limited_users</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">user_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/sql_blocks.malloynb"
  },
  {
    "titles": [
      "SQL Blocks",
      "Embedding Malloy queries in an SQL block ( Turducken )"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy queries can be embedded in SQL blocks as well. When <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">%{</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">}</span></span></code> appear inside the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">&quot;&quot;&quot;</span></span></code> string of a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">:</span></span></code> statement, the Malloy query between the brackets is compiled and replaced with the <code>SELECT</code> statement generated from the query."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">users</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/users.parquet&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #AF00DB\">sql</span><span style=\"color: #000000\">(&quot;&quot;&quot;</span></span>\n<span class=\"line\"><span style=\"color: #008000\">-- BEGIN MALLOY QUERY</span></span>\n<span class=\"line\"><span style=\"color: #000000\">%{</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #001080\">users</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">10</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">first_name</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">last_name</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">gender</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">n_with_this_name</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"><span style=\"color: #008000\">-- END MALLOY QUERY</span></span>\n<span class=\"line\"><span style=\"color: #000000\">&quot;&quot;&quot;)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "> <em>We have referred to this feature the <a href=\"https://en.wikipedia.org/wiki/Turducken\">\"Turducken\"</a> because you then take the SQL block and wrap it in an SQL source. It isn't the perfect name for infinte nesting, but it is amusing...</em>"
      }
    ],
    "path": "/documentation/language/sql_blocks.malloynb"
  },
  {
    "titles": [
      "SQL Sources"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "<em>SQL sources, introduced in Malloy version 0.56, replace the previous method of including SQL queries in a Malloy model, <a href=\"./sql_blocks\">SQL blocks</a>.</em>"
      },
      {
        "type": "p",
        "text": "Sometimes it can be useful to base Malloy models off of SQL queries. You can do so by using the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sql</span><span style=\"color: #000000\">()</span></span></code> <a href=\"./connections#connection-methods\">connection method</a>."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">my_sql_source</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #AF00DB\">sql</span><span style=\"color: #000000\">(&quot;&quot;&quot;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">SELECT</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    first_name,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    last_name,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    gender</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">FROM</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;../data/users.parquet&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">LIMIT</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">10</span></span>\n<span class=\"line\"><span style=\"color: #000000\">&quot;&quot;&quot;)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "These SQL sources can be used any place a table source can be used:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">my_sql_source</span><span style=\"color: #000000\"> -&gt; { </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">first_name</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">user_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Unlike other kinds of sources, SQL sources can be used like a query in some cases."
      },
      {
        "type": "p",
        "text": "They can be run directly:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sql</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&quot;select 1 as one&quot;</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "And they can also be defined as a query:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">query</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">my_sql_query</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sql</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&quot;select 1 as one&quot;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">my_sql_query</span></span></pre>"
      },
      {
        "type": "p",
        "text": "<em>Note: you can only run a SQL source as a query when it is defined as a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">query</span><span style=\"color: #000000\">:</span></span></code> or included directly in a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">:</span></span></code> statement.</em>"
      }
    ],
    "path": "/documentation/language/sql_sources.malloynb"
  },
  {
    "titles": [
      "SQL Sources",
      "Extending SQL Sources"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Like other kinds of source, SQL sources can be extended to add reusable computations."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">limited_users</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #AF00DB\">sql</span><span style=\"color: #000000\">(&quot;&quot;&quot;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">SELECT</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    first_name,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    last_name,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    gender</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">FROM</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;../data/users.parquet&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">LIMIT</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">10</span></span>\n<span class=\"line\"><span style=\"color: #000000\">&quot;&quot;&quot;) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">user_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">limited_users</span><span style=\"color: #000000\"> -&gt; { </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">user_count</span><span style=\"color: #000000\"> }</span></span></pre>"
      }
    ],
    "path": "/documentation/language/sql_sources.malloynb"
  },
  {
    "titles": [
      "SQL Sources",
      "Embedding Malloy Queries in an SQL Block (A.K.A. \"Turducken\")"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy queries can be embedded in SQL blocks as well. When <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">%{</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">}</span></span></code> appear inside a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">&quot;&quot;&quot;</span></span></code> quoted (but not a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">&quot;</span></span></code> or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">&#39;</span></span></code> quoted) string of an SQL source, the Malloy query between the brackets is compiled and replaced with the <code>SELECT</code> statement generated from the query."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">users</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/users.parquet&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">malloy_in_sql_query</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #AF00DB\">sql</span><span style=\"color: #000000\">(&quot;&quot;&quot;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">SELECT</span><span style=\"color: #000000\"> * </span><span style=\"color: #0000FF\">FROM</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  (%{ </span><span style=\"color: #008000\">// Malloy query starts with the %{</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">users</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">10</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">first_name</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">last_name</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">gender</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">n_with_this_name</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  })  </span><span style=\"color: #008000\">-- Malloy query ends after the }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">WHERE</span><span style=\"color: #000000\"> n_with_this_name &gt; </span><span style=\"color: #098658\">10</span></span>\n<span class=\"line\"><span style=\"color: #000000\">&quot;&quot;&quot;)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">malloy_in_sql_query</span><span style=\"color: #000000\"> -&gt; { </span><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">: * }</span></span></pre>"
      },
      {
        "type": "p",
        "text": "<em>We have referred to this feature as <a href=\"https://en.wikipedia.org/wiki/Turducken\">\"Turducken\"</a> because you then take the SQL block and wrap it in an SQL source. It isn't the perfect name for infinite nesting, but it is amusing</em>"
      }
    ],
    "path": "/documentation/language/sql_sources.malloynb"
  },
  {
    "titles": [
      "Models"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy recognizes modeling as a key aspect of data analytics and provides tools that allow for modularity and reusability of definitions. Whereas in SQL, queries generally define all metrics inline, requiring useful snippets to be saved and managed separately, in Malloy,\n<em>dimensions</em>, <em>measures</em>, and <em>views</em> can be saved and attached to a modeled source, which itself is defined as part of a Malloy document, often referred to as a <em>model</em>."
      },
      {
        "type": "p",
        "text": "A Malloy document is a collection of <a href=\"#statements\">statements</a>, <a href=\"#comments\">comments</a>, and <a href=\"#tags\">tags</a>. Statements can be separated with an optional semi-colon for clarity, which helps readability when statements appear on the same line."
      }
    ],
    "path": "/documentation/language/statement.malloynb"
  },
  {
    "titles": [
      "Models",
      "Statements"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "There are four kinds of statements that can appear in a Malloy model:"
      },
      {
        "type": "p",
        "text": "<a href=\"#import-statements\">Import Statements</a>"
      },
      {
        "type": "p",
        "text": "<a href=\"#query-statements\">Query Statements</a>"
      },
      {
        "type": "p",
        "text": "<a href=\"#source-statements\">Source Statements</a>"
      },
      {
        "type": "p",
        "text": "<a href=\"#run-statements\">Run Statements</a>"
      }
    ],
    "path": "/documentation/language/statement.malloynb"
  },
  {
    "titles": [
      "Models",
      "Statements",
      "Import Statements"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Import statements allow you to import sources from another <code>.malloy</code> file."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&quot;flights.malloy&quot;</span></span></pre>"
      },
      {
        "type": "p",
        "text": "See the <a href=\"imports\">Imports</a> section for more information."
      }
    ],
    "path": "/documentation/language/statement.malloynb"
  },
  {
    "titles": [
      "Models",
      "Statements",
      "Query Statements"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "A query statement defines a query as a named entity within a model, allowing it to be reused as the basis for other queries."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">query</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights_by_carrier</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "See the <a href=\"query\">Queries</a> section for more information on queries."
      }
    ],
    "path": "/documentation/language/statement.malloynb"
  },
  {
    "titles": [
      "Models",
      "Statements",
      "Source Statements"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "In Malloy, a source is the basic unit of reusability for calculations, join relationships, and queries, and can be thought of as a table and a collection of computations and relationships which are relevant to that table."
      },
      {
        "type": "p",
        "text": "A source statement defines a source as a reusable part of the model."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights2</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">distance_km</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">distance</span><span style=\"color: #000000\"> * </span><span style=\"color: #098658\">1.609344</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_carrier</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "See the <a href=\"source\">Sources</a> section for more information on sources."
      }
    ],
    "path": "/documentation/language/statement.malloynb"
  },
  {
    "titles": [
      "Models",
      "Statements",
      "Run Statements"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Run statements allow you to write queries in a model without naming them, or to indicate to the host application that a particular query should be run. You'll see run statements all over the documentation, usually followed by the results of running that query."
      },
      {
        "type": "p",
        "text": "Any query can be run by including it in a run statement."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights2</span><span style=\"color: #000000\"> -&gt; { </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">origin</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">destination_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">destination</span><span style=\"color: #000000\">) </span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "See the <a href=\"query\">Queries</a> section for more information on queries."
      }
    ],
    "path": "/documentation/language/statement.malloynb"
  },
  {
    "titles": [
      "Models",
      "Comments"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Comments in Malloy can be written with <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #008000\">--</span></span></code> (as in SQL) or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #008000\">//</span></span></code>. A comment continues until the end of the line."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #008000\">// This is a comment</span></span>\n<span class=\"line\"><span style=\"color: #008000\">-- This is also a comment</span></span></pre>"
      }
    ],
    "path": "/documentation/language/statement.malloynb"
  },
  {
    "titles": [
      "Models",
      "Tags"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Tags are a general-purpose feature of Malloy that allow arbitrary metadata to be attached to various Malloy objects (queries, sources, fields, etc.). One use case for tagging is to attach rendering information to a query:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\"># json</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights2</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">2</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "For more information about the rendering tags used in the Malloy rendering library, see the <a href=\"../visualizations/overview\">Visualizations</a> section."
      },
      {
        "type": "p",
        "text": "For more information about tag semantics, see the <a href=\"./tags\">Tags</a> section."
      }
    ],
    "path": "/documentation/language/statement.malloynb"
  },
  {
    "titles": [
      "Annotation"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Annotations are text strings collected with objects as a file is compiled. Annotations are intended to be a generally useful method for connecting meta-data about a model with the source code for a model."
      },
      {
        "type": "p",
        "text": "Annotations are strings of text in the model beginning with either <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">#</span></span></code> or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">##</span></span></code> and immediately followed by some character(s) which define the \"space\" of the annotation."
      },
      {
        "type": "p",
        "text": "Annotations which start <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">##</span></span></code> are collected with the file or \"model\" and annotations which only have one <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">#</span></span></code> are associated with the object being defined. An annotation starts at the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">#</span></span></code> character and continues to the end of the line."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #008000\">// This is an annotation that applies to the entire model. The `!` prefix means it is a compiler annotation.</span></span>\n<span class=\"line\"><span style=\"color: #A31515\">##! experimental.parameters</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #008000\">// This is an annotation on a single view.</span></span>\n<span class=\"line\"><span style=\"color: #008000\">// The ` ` (space) prefix means it is a renderer annotation </span></span>\n<span class=\"line\"><span style=\"color: #0451A5\"># bar_chart</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">how_many</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">things</span><span style=\"color: #000000\"> -&gt; { </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">total_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">() }</span></span></pre>"
      },
      {
        "type": "p",
        "text": "An object annotation which happens before a definition list is distributed to each member of the list, but each member can also have their own unique annotations"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #008000\">// Every measure in the list will render as a currency, but only &#39;pct&#39; will render as a percent</span></span>\n<span class=\"line\"><span style=\"color: #0451A5\"># currency</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #001080\">max_x</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">max</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\"># percent</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #001080\">pct</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">) / </span><span style=\"color: #795E26\">all</span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">))</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #001080\">min_x</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">min</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">)</span></span></pre>"
      }
    ],
    "path": "/documentation/language/tags.malloynb"
  },
  {
    "titles": [
      "Tags"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The primary use of annotations in Malloy is for tags, which are simply a subset of the annotations strings which will be interpreted in simple programming language for setting key/value properties."
      },
      {
        "type": "p",
        "text": "Tags are a general-purpose feature of Malloy that allow arbitrary metadata to be attached to various Malloy objects (queries, sources, fields, etc.). These are used by the Malloy rendering library within VSCode to decide how fields and queries should be rendered, but they can be parsed and interpreted differently in other applications."
      }
    ],
    "path": "/documentation/language/tags.malloynb"
  },
  {
    "titles": [
      "Tags",
      "Tag Prefixes"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The design of annotations is that the characters immediately following the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">#</span></span></code> in an annotation will be available to applications to be able to add different types of annotations. Malloy itself uses the following annotation prefixes"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">##!</span></span></code> The malloy compiler uses these annotations as tags specifying compiler options"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #008000\">#&quot;</span></span></code>  and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">##&quot;</span></span></code> Reserved for future documentation annotations"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">#(docs)</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">##(docs)</span></span></code> Used by the malloy documentation site"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\"># </span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\">## </span></span></code> with a space as a prefix (e.g. <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\"># percent</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\">## bar_chart.size</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">xl</span></span></code>) The Malloy VSCode extension parses these as tags and uses these tags to render results"
      }
    ],
    "path": "/documentation/language/tags.malloynb"
  },
  {
    "titles": [
      "Tags",
      "Renderer Tags"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Annotations which do not start with <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\"># </span></span></code> or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\">## </span></span></code> are not parsed as renderer tags, though an application may decide to parse annotations with some other prefix as as tags."
      },
      {
        "type": "p",
        "text": "None of these are render tags, even though they use the tag property language."
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">##! disableWarnings</span></span></code> tags are parsed by the compiler and interpreted as compiler flags"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">#(myApp) custom=&quot;application&quot; values=&quot;here&quot;</span></span></code> something like this could be used by an app to write custom tags"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">#bar_chart</span></span></code> without a space after the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">#</span></span></code> is not a render tag, it is a tag using an unrecognized <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">bar_chart</span></span></code> prefix"
      },
      {
        "type": "p",
        "text": "For a thorough list of available Renderer Tags, refer to the <a href=\"https://github.com/malloydata/malloy/blob/main/packages/malloy-render/docs/renderer_tags_overview.md\">Render Tags Documentation</a> in the Malloy GitHub project."
      }
    ],
    "path": "/documentation/language/tags.malloynb"
  },
  {
    "titles": [
      "Tags",
      "Tag Property Language"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "A quick overview of the syntax of properties and values in the Malloy Tag Language used by the renderer."
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">tName</span></span></code>"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">tName</span><span style=\"color: #000000\">=</span><span style=\"color: #001080\">tVal</span></span></code>"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">-</span><span style=\"color: #001080\">tName</span></span></code> unset the property tName"
      },
      {
        "type": "p",
        "text": "Sets the property tName to exist, and have the value <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">tVal</span></span></code>"
      },
      {
        "type": "p",
        "text": "You can also use quotes to assign values as as <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\"># name</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">&quot;John</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">J.</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">Johnson&quot;</span></span></code>"
      },
      {
        "type": "p",
        "text": "To assign a property name which needs quoting, use <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">`my long property name`</span><span style=\"color: #000000\">=</span><span style=\"color: #001080\">red</span></span></code>"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">tName</span><span style=\"color: #000000\">=[</span><span style=\"color: #001080\">val1</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">val2</span><span style=\"color: #000000\">]</span></span></code> The value of a property can be a list of values"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">tName</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">p1</span><span style=\"color: #000000\">=</span><span style=\"color: #001080\">v1</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">p2</span><span style=\"color: #000000\">=</span><span style=\"color: #001080\">v2</span><span style=\"color: #000000\"> }</span></span></code> <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">tName</span></span></code> is a collection of sub properties"
      },
      {
        "type": "p",
        "text": "Sets the property <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">tName</span></span></code> to exist, but with no value"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">&quot;</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">&#39;</span></span></code> can be used to quote strings"
      },
      {
        "type": "p",
        "text": "( for example <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\"># hidden</span></span></code> could mean to set a property called <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">hidden</span></span></code> on an object )"
      },
      {
        "type": "p",
        "text": "( for example <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\"># color</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">red</span></span></code> set set the color property to te string <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">red</span></span></code>)"
      },
      {
        "type": "p",
        "text": "An example might look like <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">barchart</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">bgColor</span><span style=\"color: #000000\">=</span><span style=\"color: #001080\">white</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">fgColor</span><span style=\"color: #000000\">=</span><span style=\"color: #001080\">red</span><span style=\"color: #000000\"> }</span></span></code>"
      },
      {
        "type": "p",
        "text": "( <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">-</span><span style=\"color: #001080\">hidden</span></span></code> to remove the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">hidden</span></span></code> property from and object)"
      }
    ],
    "path": "/documentation/language/tags.malloynb"
  },
  {
    "titles": [
      "Tags",
      "Tag Property Language",
      "Advanced Property Syntax"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">tName</span><span style=\"color: #000000\">=</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">p1</span><span style=\"color: #000000\">=</span><span style=\"color: #001080\">v1</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">p2</span><span style=\"color: #000000\">=</span><span style=\"color: #001080\">v2</span><span style=\"color: #000000\"> }</span></span></code> It is possible for a property have both a top level value\nand a list of sub properties with values."
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">tName</span><span style=\"color: #000000\">=</span><span style=\"color: #001080\">value</span></span></code> Assign new value to tName but delete any existing properties"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">tName</span><span style=\"color: #000000\">={ </span><span style=\"color: #001080\">p1</span><span style=\"color: #000000\">=</span><span style=\"color: #001080\">v1</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">p2</span><span style=\"color: #000000\">=</span><span style=\"color: #001080\">v2</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">p3</span><span style=\"color: #000000\"> }</span></span></code> Assign new properties to tName, but delete any existing value."
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">tName</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">p1</span><span style=\"color: #000000\">=</span><span style=\"color: #001080\">v1</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">p2</span><span style=\"color: #000000\">=</span><span style=\"color: #001080\">v2</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">p3</span><span style=\"color: #000000\"> }</span></span></code> Add properties to existing properties of tName, preserve value"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">tName</span><span style=\"color: #000000\">=...{ </span><span style=\"color: #001080\">p1</span><span style=\"color: #000000\">=</span><span style=\"color: #001080\">v1</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">p2</span><span style=\"color: #000000\">=</span><span style=\"color: #001080\">v2</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">p3</span><span style=\"color: #000000\"> }</span></span></code> Assign new properties to tName, but keep the existing value"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">tName</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">p1</span><span style=\"color: #000000\">=</span><span style=\"color: #001080\">value</span></span></code> Assign a value to one specific property of tName, value of tName and other properties are preserved."
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">tName</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">p1</span><span style=\"color: #000000\">=</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">pp1</span><span style=\"color: #000000\">=</span><span style=\"color: #001080\">v1</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">pp2</span><span style=\"color: #000000\">=</span><span style=\"color: #001080\">v2</span><span style=\"color: #000000\"> }</span></span></code> The value of a property can also have properties"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">tName</span><span style=\"color: #000000\">=</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\"> {...}</span></span></code> Assign a new value to <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">tName</span></span></code> but do not erase the sub properties like <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">tName</span><span style=\"color: #000000\">=</span><span style=\"color: #001080\">value</span></span></code> would"
      }
    ],
    "path": "/documentation/language/tags.malloynb"
  },
  {
    "titles": [
      "Malloy time range expressions"
    ],
    "paragraphs": [],
    "path": "/documentation/language/time-ranges.malloynb"
  },
  {
    "titles": [
      "Malloy time range expressions",
      "Range expressions"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "There are two forms of range expressions"
      },
      {
        "type": "p",
        "text": "<em>expr</em> <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">to</span></span></code> <em>expr</em> ( <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #098658\">@2001</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">to</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">@2003</span></span></code>)"
      },
      {
        "type": "p",
        "text": "<em>expr</em> <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">for</span></span></code> <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">N</span></span></code> <em>units</em> ( <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">now</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">for</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">15</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">minutes</span></span></code> )"
      },
      {
        "type": "p",
        "text": "A timestamp can be compared to a range. If the time stamp is within\nthe range it will be <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">=</span></span></code>. Before the range it will be <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">&lt;</span></span></code> and after\nthe range it will be <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">&gt;</span></span></code>. If you <a href=\"apply\">apply</a> a range, (for example, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">eventDate</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">@2003</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">to</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">@2004</span></span></code>) that will also check if the value is within the range."
      }
    ],
    "path": "/documentation/language/time-ranges.malloynb"
  },
  {
    "titles": [
      "Malloy time range expressions",
      "Range shortcuts"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Because grouping and filtering by specific time ranges is such a common operation for a data transformation task, Malloy has a number of expressive short cuts. The full power of the underlying SQL engine is also available for any type of truncation or extraction not supported by these shortcuts."
      },
      {
        "type": "p",
        "text": "Malloy supports two time-related types, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">timestamp</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">date</span></span></code>.\nBoth of these can be used with these techniques, though the exact\ntruncations or extractions available will vary depending on the\ndata type (e.g. it would make no sense to attempt to truncate a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">date</span></span></code> object by <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">minute</span></span></code>)."
      }
    ],
    "path": "/documentation/language/time-ranges.malloynb"
  },
  {
    "titles": [
      "Malloy time range expressions",
      "Range shortcuts",
      "Literals as ranges"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Any time literal with resolution larger than seconds will function as a range, for duration of the units in which the literal is expressed. This works with year, quarter, month, week, day, hour and minute resolution literals."
      }
    ],
    "path": "/documentation/language/time-ranges.malloynb"
  },
  {
    "titles": [
      "Malloy time range expressions",
      "Range shortcuts",
      "Truncations as ranges"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "A truncation can also function as a range. The range begins\nat the moment of truncation and the duration is the timeframe unit\nused to specify the truncation, so for example <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">eventDate</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">year</span></span></code>\nwould be a range covering the entire year which contains <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">eventDate</span></span></code>"
      },
      {
        "type": "p",
        "text": "This is extremely useful with the <a href=\"apply\">Apply operator</a>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">?</span></span></code>. To see if two events happen in the same calendar year, for example, the boolean expression in Malloy could be <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">oneEvent</span><span style=\"color: #000000\"> ? </span><span style=\"color: #001080\">otherEvent</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">year</span></span></code>"
      }
    ],
    "path": "/documentation/language/time-ranges.malloynb"
  },
  {
    "titles": [
      "Malloy time range expressions",
      "Interval Measurement"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "To measure the difference between two times, pass a range expression to\none of the extraction functions, which work time timestmap or date based data."
      },
      {
        "type": "p",
        "text": "The extractions compute the difference in seconds of the endpoints,\nand use fixed ratios to convert to larger units than seconds."
      },
      {
        "type": "p",
        "text": "If you are using date based data, you can also measure intervals in larger units."
      },
      {
        "type": "p",
        "text": "These will return a negative number if t1 is later than t2."
      }
    ],
    "path": "/documentation/language/time-ranges.malloynb"
  },
  {
    "titles": [
      "Timestamp Operations"
    ],
    "paragraphs": [],
    "path": "/documentation/language/timestamp-operations.malloynb"
  },
  {
    "titles": [
      "Timestamp Operations",
      "Truncation"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "For truncation to a time unit (timeframe), use the period (<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">.</span></span></code>) operator followed by the desired timeframe."
      },
      {
        "type": "p",
        "text": "See <a href=\"timezones\">Timezones</a> for information on how truncation interacts with timezones."
      }
    ],
    "path": "/documentation/language/timestamp-operations.malloynb"
  },
  {
    "titles": [
      "Timestamp Operations",
      "Extraction"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "To extract an integer from a component of a timestamp, malloy uses the time unit (timeframe) in the form of a funtion call."
      },
      {
        "type": "p",
        "text": "The \"Result\" column uses a value of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #098658\">@2021-08-06 00:55:05</span></span></code> for <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">expr</span></span></code>."
      },
      {
        "type": "p",
        "text": "See <a href=\"timezones\">Timezones</a> for information on how extraction interacts with timezones."
      }
    ],
    "path": "/documentation/language/timestamp-operations.malloynb"
  },
  {
    "titles": [
      "Timezones in Malloy"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "NOTE: While full timezone support exists in the calculation component of\nMalloy, the support in the rendering components is not yet present.  It is\nbest to avoid the use of the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">timezone</span><span style=\"color: #000000\">:</span></span></code> keyword at this time."
      },
      {
        "type": "p",
        "text": "A timestamp represents a moment in time which does not change, however we often describe the moments in time relative to a timezone."
      },
      {
        "type": "p",
        "text": "Without any timezone specification, all timestamps in Malloy are described as being in the \"UTC\" or zero-offset timezone."
      },
      {
        "type": "p",
        "text": "A source or a query can specify a timezone with a locale name. When that is specified, the Malloy description of a timestamp which you would access through <a href=\"expressions#time-truncation\">truncation</a> or <a href=\"expressions#time-extraction\">extraction</a>, chnages."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">   </span><span style=\"color: #AF00DB\">timezone</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">&#39;America/Mexico_City&#39;</span></span></pre>"
      }
    ],
    "path": "/documentation/language/timezones.malloynb"
  },
  {
    "titles": [
      "Timezones in Malloy",
      "Literals"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Timestamp literals without a timezone are assumed to be in the active timezone"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">query</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">showMe</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">emptySource</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">showMeVal</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">hours</span><span style=\"color: #000000\">(</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #098658\">@2021-01-01 00:00</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #0000FF\">to</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #098658\">@2021-01-01 00:00:00</span><span style=\"color: #000000\"> [</span><span style=\"color: #001080\">UTC</span><span style=\"color: #000000\">]</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    )</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Without a timezone specification, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">showMeVal</span></span></code> will be 0. Change it to"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">query</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">showMe</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">emptySource</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">timezone</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">&#39;America/Mexico_City&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">showMeVal</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">hours</span><span style=\"color: #000000\">(</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #098658\">@2021-01-01 00:00</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #0000FF\">to</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #098658\">@2021-01-01 00:00:00</span><span style=\"color: #000000\"> [</span><span style=\"color: #001080\">UTC</span><span style=\"color: #000000\">]</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    )</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "the result will be 6 (the difference in hours between UTC and Mexico City time, on that date)"
      }
    ],
    "path": "/documentation/language/timezones.malloynb"
  },
  {
    "titles": [
      "Timezones in Malloy",
      "Extraction / Truncation"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "With a timezone active, extraction and truncation happen at the moment of that timestamp, in the current timezone."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">query</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">showMe</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">emptySouce</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">: </span><span style=\"color: #795E26\">year</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">@2021-01-01 00:00</span><span style=\"color: #000000\"> [</span><span style=\"color: #001080\">UTC</span><span style=\"color: #000000\">])</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "will return 2021 but"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">query</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">showMe</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">emptySouce</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">timezone</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">&#39;America/Mexico_City&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">: </span><span style=\"color: #795E26\">year</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">@2021-01-01 00:00</span><span style=\"color: #000000\"> [</span><span style=\"color: #001080\">UTC</span><span style=\"color: #000000\">])</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "will return 2020, because at that UTC midnight moment, it is still 2020 in Mexico City."
      }
    ],
    "path": "/documentation/language/timezones.malloynb"
  },
  {
    "titles": [
      "Ungrouped Aggregates"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "In a query which is grouped by multiple dimensions, it is often useful to be able to perform an aggregate calculation on sub-groups."
      }
    ],
    "path": "/documentation/language/ungrouped-aggregates.malloynb"
  },
  {
    "titles": [
      "Ungrouped Aggregates",
      "Ungrouped Aggregate Functions"
    ],
    "paragraphs": [],
    "path": "/documentation/language/ungrouped-aggregates.malloynb"
  },
  {
    "titles": [
      "Ungrouped Aggregates",
      "Ungrouped Aggregate Functions",
      "all"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">all</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">expr</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #795E26\">all</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">aggregate_expr</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">grouping_dimension</span><span style=\"color: #000000\">, ...)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "The <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">all</span><span style=\"color: #000000\">()</span></span></code> function will perform the specified aggregate computation <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">aggregate_expr</span></span></code>, ignoring the grouping in the\ncurrent query to provide an overall value."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">##(docs) hidden</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&quot;airports.malloy&quot;</span></span></pre>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">faa_region</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">percent_of_total</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">() / </span><span style=\"color: #795E26\">all</span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">())*</span><span style=\"color: #098658\">100.0</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "When <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">grouping_dimension</span></span></code>s are provided, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">all</span><span style=\"color: #000000\">()</span></span></code> will preserve grouping by the named dimensions. For example, in the query below, grouping by <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">faa_region</span></span></code> is preserved, while <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">state</span></span></code> is ungrouped."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">faa_region</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">airports_in_state</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">airports_in_region</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">all</span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">(), </span><span style=\"color: #001080\">faa_region</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports_in_state</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">desc</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Dimensions named in <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">all</span><span style=\"color: #000000\">()</span></span></code> must be included in a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">group_by</span></span></code> in the current query (in other words, they must be <a href=\"./eval_space#outputs\">output fields</a>)."
      }
    ],
    "path": "/documentation/language/ungrouped-aggregates.malloynb"
  },
  {
    "titles": [
      "Ungrouped Aggregates",
      "Ungrouped Aggregate Functions",
      "exclude"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">exclude</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">aggregate_expr</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">ungroup_dimension</span><span style=\"color: #000000\">, ...)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Similar to <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">all</span><span style=\"color: #000000\">()</span></span></code>,  <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">exclude</span><span style=\"color: #000000\">()</span></span></code> allows you to control which grouping dimensions are\nused to compute <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">aggregate_expr</span></span></code>. In this case, dimensions which should <em>not</em> be used are listed. For example, these two aggregates will do the exact same thing:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">faa_region</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">fac_type</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">count_airports</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">count_in_region_exclude</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">exclude</span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">(), </span><span style=\"color: #001080\">fac_type</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">count_in_region_all</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">all</span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">(), </span><span style=\"color: #001080\">faa_region</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "The main difference is that in a nested query, it is legal to name a grouping dimension from an outer query which contains the inner query."
      },
      {
        "type": "p",
        "text": "As with <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">all</span><span style=\"color: #000000\">()</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">ungroup_dimension</span></span></code>s must be <a href=\"./eval_space#outputs\">output fields</a>."
      }
    ],
    "path": "/documentation/language/ungrouped-aggregates.malloynb"
  },
  {
    "titles": [
      "Views"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy separates queries into a <em>source</em> and a <em>view</em> on that source. Views can be defined in a source or used directly in queries. Views that are named as part of a <a href=\"./source#source-extensions\">source extension</a> can be reused, nested, and refined."
      },
      {
        "type": "p",
        "text": "A view consists of one or more <em>stages</em> separated by <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">-&gt;</span></span></code>s. Most views only have one stage, but <a href=\"#multi-stage-views\">multi-stage views</a> can be used for more complex analysis."
      }
    ],
    "path": "/documentation/language/views.malloynb"
  },
  {
    "titles": [
      "Views",
      "Reduction vs Projection"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Each stage of a view performs a transformation of one of two kinds:"
      },
      {
        "type": "p",
        "text": "<strong>Reduction</strong>: reduce the grain of the data"
      },
      {
        "type": "p",
        "text": "<strong>Projection</strong>: select fields without reducing"
      },
      {
        "type": "p",
        "text": "Reductions use <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">:</span></span></code> and/or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span></code>, whereas projections use <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">:</span></span></code>."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">##(docs) hidden</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&quot;flights.malloy&quot;</span></span></pre>"
      }
    ],
    "path": "/documentation/language/views.malloynb"
  },
  {
    "titles": [
      "Views",
      "Reduction vs Projection",
      "Reduction"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The following is an example of a <strong>reduction</strong>:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\">        </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/views.malloynb"
  },
  {
    "titles": [
      "Views",
      "Reduction vs Projection",
      "Projection"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The following is an example of a <strong>projection</strong>:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">: *</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">20</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Note that the operations in a stage are for the most part not order-sensitive like SQL; they can be arranged in any order."
      }
    ],
    "path": "/documentation/language/views.malloynb"
  },
  {
    "titles": [
      "Views",
      "View Operations"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Views can contain a number of different kinds of operations which affect the behavior of the transformation. The following sections describe these various operations."
      }
    ],
    "path": "/documentation/language/views.malloynb"
  },
  {
    "titles": [
      "Views",
      "View Operations",
      "Fields"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "In a stage, fields (dimensions, measures,\nviews, and calculations) may be specified either by referencing an existing\nname or defining them inline."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Dimensions are included with <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">group_by</span></span></code> (or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">select</span></span></code> in a projection), measures are included with <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span></code>, and views are nested with <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">:</span></span></code>."
      },
      {
        "type": "p",
        "text": "When referencing existing fields in a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">:</span></span></code> clause, wildcard expressions like <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">*</span></span></code>, or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">some_join</span><span style=\"color: #000000\">.*</span></span></code> may be used."
      },
      {
        "type": "p",
        "text": "See the <a href=\"fields\">Fields</a> section for more information\nabout the different kinds of fields and how they can be\ndefined."
      }
    ],
    "path": "/documentation/language/views.malloynb"
  },
  {
    "titles": [
      "Views",
      "View Operations",
      "Filters"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Filters can be included in a view with <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">:</span></span></code>, which is equivalent to SQL's <code>WHERE</code> clause."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">distance</span><span style=\"color: #000000\"> &gt; </span><span style=\"color: #098658\">1000</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">distance</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Filters may be also be applied to a <a href=\"source#filtering-sources\">source</a>, or a <a href=\"expressions#filtered-expressions\">measure</a>."
      },
      {
        "type": "p",
        "text": "See the <a href=\"filters\">Filters</a> section for more information."
      },
      {
        "type": "p",
        "text": "See <a href=\"#post-aggregation-filtering\">Post-Aggregation Filtering</a> below for information about <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">having</span><span style=\"color: #000000\">:</span></span></code>."
      }
    ],
    "path": "/documentation/language/views.malloynb"
  },
  {
    "titles": [
      "Views",
      "View Operations",
      "Ordering and Limiting"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Views may also include ordering and limiting specifications."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">4</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "For detailed information on ordering and limiting, see the <a href=\"order_by\">Ordering and Limiting</a> section."
      }
    ],
    "path": "/documentation/language/views.malloynb"
  },
  {
    "titles": [
      "Views",
      "View Operations",
      "Post-Aggregation Filtering"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Views may filter entire groupings based on aggregate values using the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">having</span><span style=\"color: #000000\">:</span></span></code> clause, which corresponds to SQL's <code>HAVING</code> clause."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">having</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> &gt; </span><span style=\"color: #098658\">35000</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/views.malloynb"
  },
  {
    "titles": [
      "Views",
      "View Operations",
      "Calculations (Window Functions)"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Calculations based on other groupings may be performed with the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">:</span></span></code> clause and analytic functions. See the <a href=\"./calculations_windows\">Calculations</a> section for details."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count_rank</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">rank</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/views.malloynb"
  },
  {
    "titles": [
      "Views",
      "View Operations",
      "Source Extensions"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "When writing a query, if additional source extensions are needed, they can be <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">extend</span></span></code>-ed into the source in the query expression, as in"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">some_source</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> { </span><span style=\"color: #000000; font-style: italic\">extensions</span><span style=\"color: #000000\"> } -&gt; { </span><span style=\"color: #000000; font-style: italic\">view operations</span><span style=\"color: #000000\"> }</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Such extensions can also be included in a view using the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\">:</span></span></code> block."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">##(docs) hidden</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&quot;airports.malloy&quot;</span></span></pre>"
      },
      {
        "type": "p",
        "text": "malloy\nrun: flights -> {\nextend: {\njoin_one: origin_airport is airports on origin_airport.code = origin_code\ndimension: origin_state is origin_airport.state\n}"
      },
      {
        "type": "p",
        "text": "group_by: origin_state\naggregate: flight_count\nlimit: 5\n}"
      },
      {
        "type": "p",
        "text": "When the view is defined inside a source, source extensions can only be added in this way. The legal extensions in a view are:"
      },
      {
        "type": "p",
        "text": "Defining fields with <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">:</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">:</span></span></code>"
      },
      {
        "type": "p",
        "text": "Declaring joins with <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">:</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">join_many</span><span style=\"color: #000000\">:</span></span></code>, and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">join_cross</span><span style=\"color: #000000\">:</span></span></code>"
      }
    ],
    "path": "/documentation/language/views.malloynb"
  },
  {
    "titles": [
      "Views",
      "Reusing, Nesting, and Refining Views"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "When views are defined in a source, they can be reused in a number of ways."
      }
    ],
    "path": "/documentation/language/views.malloynb"
  },
  {
    "titles": [
      "Views",
      "Reusing, Nesting, and Refining Views",
      "Reusing Views"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "They can serve as the starting point for multiple different queries:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">by_carrier</span><span style=\"color: #000000\"> -&gt; { </span><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">nickname</span><span style=\"color: #000000\">; </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> }</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">by_carrier</span><span style=\"color: #000000\"> -&gt; { </span><span style=\"color: #AF00DB\">index</span><span style=\"color: #000000\">: * }</span></span></pre>"
      }
    ],
    "path": "/documentation/language/views.malloynb"
  },
  {
    "titles": [
      "Views",
      "Reusing, Nesting, and Refining Views",
      "Nesting Views"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Views can also be nested in other views:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">origin</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/views.malloynb"
  },
  {
    "titles": [
      "Views",
      "Reusing, Nesting, and Refining Views",
      "Refining Views"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "A view can be \"refined,\" which means adding clauses such as <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">:</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">:</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span></code>, or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">:</span></span></code>. For example, let's define a source with a view and use that to create a query"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights4</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">top_destinations</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">destination</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Running the query gives us flight count by destination:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights4</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">top_destinations</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Now let's refine it by adding <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">+ { </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">origin</span><span style=\"color: #000000\"> }</span></span></code>. This adds a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">group_by</span></span></code> clause to the original query"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights4</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">top_destinations</span><span style=\"color: #000000\"> + {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">origin</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "The query is now calculating <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">flight_count</span></span></code> grouped by both <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">destination</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">origin</span></span></code>."
      },
      {
        "type": "p",
        "text": "Refinement can be thought of as similar to extending a class in object-oriented programming. The new view inherits the properties of the original, and adds new properties to it. (That said, it should not be confused with the similar concept of <a href=\"./source#source-extensions\">source extension</a>.) This makes query logic much more reusable, since views can be easily saved and modified."
      }
    ],
    "path": "/documentation/language/views.malloynb"
  },
  {
    "titles": [
      "Views",
      "Multi-Stage Views"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "This example shows a view with 3 stages separated by <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">-&gt;</span></span></code>. Each stage generates a CTE in the SQL."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">: *</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\"> &gt; </span><span style=\"color: #098658\">@2003</span></span>\n<span class=\"line\"><span style=\"color: #000000\">} -&gt; {    </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #008000\">-- extend: allows you to define fields for use within the view</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\">: { </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">() }   </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">main_view</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">} -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">main_view</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">main_view</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\"># percent</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">flight_count_as_a_percent_of_total</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">main_view</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> / </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/language/views.malloynb"
  },
  {
    "titles": [
      "About the Malloy CLI"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The <a href=\"https://github.com/malloydata/malloy-cli\">Malloy CLI</a> is a command-line interface for running <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">.</span><span style=\"color: #001080\">malloysql</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">.</span><span style=\"color: #001080\">malloy</span></span></code> files. It can be used to automate transformations, build simple pipelines, or even integrate compiled Malloy SQL into other applications."
      }
    ],
    "path": "/documentation/malloy_cli/index.malloynb"
  },
  {
    "titles": [
      "About the Malloy CLI",
      "Installation"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "You can download the latest release of the Malloy-CLI from <a href=\"https://github.com/malloydata/malloy-cli/releases\">here</a>."
      },
      {
        "type": "p",
        "text": "If you have npm/npx installed, you can also run the CLI by either installing it (<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">npm</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">install</span><span style=\"color: #000000\"> -</span><span style=\"color: #001080\">g</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">malloy</span><span style=\"color: #000000\">-</span><span style=\"color: #001080\">cli</span></span></code>) or using npx to run it <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">npx</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">malloy</span><span style=\"color: #000000\">-</span><span style=\"color: #001080\">cli</span><span style=\"color: #000000\"> {</span><span style=\"color: #001080\">your</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">command</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">here</span><span style=\"color: #000000\">}</span></span></code>"
      }
    ],
    "path": "/documentation/malloy_cli/index.malloynb"
  },
  {
    "titles": [
      "About the Malloy CLI",
      "Installation",
      "Mac users"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Please note that the CLI is currently not notarized (this is a work in progress). Running the CLI binary downloaded from our download link requires opening Privacy and Security MacOS settings and explicitly allowing it."
      }
    ],
    "path": "/documentation/malloy_cli/index.malloynb"
  },
  {
    "titles": [
      "About the Malloy CLI",
      "Setup"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The CLI requires database credentials to function. Credentials can be added with <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">malloy</span><span style=\"color: #000000\">-</span><span style=\"color: #001080\">cli</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">connections</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">create</span><span style=\"color: #000000\">-{</span><span style=\"color: #001080\">database</span><span style=\"color: #000000\">}</span></span></code>, where <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">{</span><span style=\"color: #001080\">database</span><span style=\"color: #000000\">}</span></span></code> is one of \"bigquery\", \"postgres\", or \"duckdb\". If you want to create a new named connection, options can be found by passing <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #008000\">--help</span></span></code> to any of the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">create</span><span style=\"color: #000000\">-{</span><span style=\"color: #001080\">database</span><span style=\"color: #000000\">}</span></span></code> commands, for example: <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">malloy</span><span style=\"color: #000000\">-</span><span style=\"color: #001080\">cli</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">connections</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">create</span><span style=\"color: #000000\">-</span><span style=\"color: #001080\">bigquery</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">--help</span></span></code>"
      }
    ],
    "path": "/documentation/malloy_cli/index.malloynb"
  },
  {
    "titles": [
      "About the Malloy CLI",
      "Setup",
      "Setting up BigQuery if you use gCloud"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "<a href=\"https://cloud.google.com/cli\"><code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">gCloud</span></span></code></a> is a command-line tool to work with Google Cloud. Among other things, it can store authentication information for BigQuery. If you already use gCloud to query BigQuery, setting up a connection is as simple as <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">malloy</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">connections</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">create</span><span style=\"color: #000000\">-</span><span style=\"color: #001080\">bigquery</span><span style=\"color: #000000\"> &lt;</span><span style=\"color: #001080\">name</span><span style=\"color: #000000\">&gt;</span></span></code> - no additional authentication information is required. Note that there are other options that you might want to set, such as billing limits - to see possible options, use <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">malloy</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">connections</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">create</span><span style=\"color: #000000\">-</span><span style=\"color: #001080\">bigquery</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">--help</span></span></code>."
      }
    ],
    "path": "/documentation/malloy_cli/index.malloynb"
  },
  {
    "titles": [
      "About the Malloy CLI",
      "Setup",
      "Default connections"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "By default, two connections are created if you don't already have a name that overrides them - \"bigquery\" and \"duckdb\". If <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">.</span><span style=\"color: #001080\">malloy``</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">or</span><span style=\"color: #000000\"> </span></span></code>.malloySQL`` files reference these connections, they are created automatically. DuckDB uses a built-in instance of DuckDB, and BigQuery attempts to connect to BigQuery using any existing authentication already stored on your computer (like if you have gcloud installed)."
      }
    ],
    "path": "/documentation/malloy_cli/index.malloynb"
  },
  {
    "titles": [
      "About the Malloy CLI",
      "Usage"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The main commands of the CLI are <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">compile</span></span></code> - <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span></span></code> executes queries and returns results, whereas compile returns SQL for a query or many queries."
      },
      {
        "type": "p",
        "text": "The CLI has detailed usage information for each command. You can get general help with <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">malloy</span><span style=\"color: #000000\">-</span><span style=\"color: #001080\">cli</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">--help</span></span></code>, and command-specific help and options with <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">malloy</span><span style=\"color: #000000\">-</span><span style=\"color: #001080\">cli</span><span style=\"color: #000000\"> {</span><span style=\"color: #001080\">command</span><span style=\"color: #000000\">} </span><span style=\"color: #008000\">--help</span></span></code>"
      }
    ],
    "path": "/documentation/malloy_cli/index.malloynb"
  },
  {
    "titles": [
      "Using Malloy in Jupyter Notebooks"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy provides built-in IPython magic commands that allow you to define Malloy models and run Malloy queries inside of Jupyter notebooks. <a href=\"https://colab.research.google.com/drive/1eo1fe3878DfUvo1RcyhFUKcFhjdaSlzp?usp=sharing\">Click here</a> to see a simple example of this in Colab."
      }
    ],
    "path": "/documentation/malloy_python/jupyter.malloynb"
  },
  {
    "titles": [
      "Using Malloy in Jupyter Notebooks",
      "Installation"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "In a Jupyter notebook, simply run the following commands to install Malloy from PyPI, and load the extension into your kernel:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-txt\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">!pip install malloy</span></span>\n<span class=\"line\"><span style=\"color: #000000\">%reload_ext malloy</span></span></pre>"
      }
    ],
    "path": "/documentation/malloy_python/jupyter.malloynb"
  },
  {
    "titles": [
      "Using Malloy in Jupyter Notebooks",
      "Usage"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "There are two <a href=\"https://ipython.readthedocs.io/en/stable/config/custommagics.html\">IPython cell magic functions</a> available: <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">%%</span><span style=\"color: #001080\">malloy_model</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">%%</span><span style=\"color: #001080\">malloy_query</span></span></code>"
      }
    ],
    "path": "/documentation/malloy_python/jupyter.malloynb"
  },
  {
    "titles": [
      "Using Malloy in Jupyter Notebooks",
      "Usage",
      "%%malloy_model"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "This magic function is used to declare or import a Malloy model. It takes a single parameter -- the variable name in which the Malloy model is stored. The contents of the cell can either be an import statement that points to a Malloy file containing sources and/or queries, or it can be a text field containing Malloy sources and/or queries."
      },
      {
        "type": "p",
        "text": "Examples:"
      },
      {
        "type": "p",
        "text": "The following statement looks for a file called <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">flights</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">malloy</span></span></code>, attempts to read the file, and load any model contents (sources or queries) into a model called <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">flights</span></span></code>."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">%%</span><span style=\"color: #001080\">malloy_model</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">flights</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;flights.malloy&#39;</span></span></pre>"
      },
      {
        "type": "p",
        "text": "The <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">flights</span></span></code> model can then be referenced in future Malloy magic cells."
      },
      {
        "type": "p",
        "text": "The following statement defines a model called <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">flights</span></span></code> using the cell's input text as the model definition:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">%%</span><span style=\"color: #001080\">malloy_model</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">flights</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">primary_key</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">code</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">rename</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">origin_code</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">origin</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">destination_code</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">destination</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">origin</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">with</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">origin_code</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">destination</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">with</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">destination_code</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">destination_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">destination</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">origin_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">origin</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/malloy_python/jupyter.malloynb"
  },
  {
    "titles": [
      "Using Malloy in Jupyter Notebooks",
      "Usage",
      "%%malloy_query"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "This magic function is used the execute a Malloy query. It has one required parameter: the name of the model to use. It optionally takes a second parameter: the variable name of the Pandas dataframe in which to store the result."
      },
      {
        "type": "p",
        "text": "Examples:"
      },
      {
        "type": "p",
        "text": "The following statement loads the flights model and executes a query using the definitions in the file."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">%% </span><span style=\"color: #001080\">malloy_query</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">flights</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">origin</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">full_name</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">destination_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "The following statement executes a query, and stores the results in a pandas dataframe called <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">result_df</span></span></code>. This dataframe can then be used in any downstream process."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">%% </span><span style=\"color: #001080\">malloy_query</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">result_df</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">origin</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">full_name</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">destination_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/malloy_python/jupyter.malloynb"
  },
  {
    "titles": [
      "Using Malloy in Jupyter Notebooks",
      "Connecting to BigQuery"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The examples above all query files from DuckDB, but it's relatively easy to work with data in BigQuery inside of your Jupyter notebook. To do this, you'll need to authorize your notebook environment to speak to your GCP project. Do this with the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">gcloud</span></span></code> command, as follows"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-txt\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">!gcloud auth application-default login</span></span></pre>"
      },
      {
        "type": "p",
        "text": "This command will prompt you to authenticate. Enter 'Y' in the textbox that asks \"Do you want to continue (Y/n)?\" (Note: this text box can be hidden/hard to find in some notebook renderers!). This will give you a link that takes you to a separate window that asks you to authenticate with your Google account. Select the correct account, copy the authentication code, and enter it into the input text field:"
      },
      {
        "type": "p",
        "text": "Once you've authenticated to GCP, you should be able to issue queries to BigQuery. You can define a Source that points to a table in BQ, and write a query against that source. Try running something against one of the BigQuery public datasets to confirm things are working."
      },
      {
        "type": "p",
        "text": "First, create a cell that defines source on the GA4 sample data:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">%%</span><span style=\"color: #001080\">malloy_source</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">ga4</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">events_table</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">bigquery</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;bigquery-public-data.ga4_obfuscated_sample_ecommerce.events_*&#39;</span><span style=\"color: #000000\">)</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Then create a cell that queries this source:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">%%</span><span style=\"color: #001080\">malloy_query</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">ga4</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">events_table</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">event_name</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">row_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/malloy_python/jupyter.malloynb"
  },
  {
    "titles": [
      "The Malloy Python Package"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy provides a Python package that allows you to load Malloy model files, compile Malloy queries, and run Malloy statements on your database from within your Python application or script. The package is open source, MIT-licensed, and hosted in the <a href=\"https://github.com/malloydata/malloy-py\">malloy-py Github repo</a>. It currently works with DuckDB and BigQuery."
      }
    ],
    "path": "/documentation/malloy_python/python_package.malloynb"
  },
  {
    "titles": [
      "The Malloy Python Package",
      "Installation"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The Malloy package is hosted on <a href=\"https://pypi.org/project/malloy/\">PyPI</a>, and can be installed via:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-txt\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">pip install malloy</span></span></pre>"
      }
    ],
    "path": "/documentation/malloy_python/python_package.malloynb"
  },
  {
    "titles": [
      "The Malloy Python Package",
      "Usage"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Import the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">malloy</span></span></code> package, and the connector for your database:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-txt\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">import asyncio</span></span>\n<span class=\"line\"><span style=\"color: #000000\">import malloy</span></span>\n<span class=\"line\"><span style=\"color: #000000\">from malloy.data.duckdb import DuckDbConnection</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Then instantiate a Malloy <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">Runtime</span></span></code> object (in the example below, we use a Python context manager), and pass it a database connection object."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-txt\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">  with malloy.Runtime() as runtime:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    runtime.add_connection(DuckDbConnection(home_dir=home_dir))</span></span></pre>"
      },
      {
        "type": "p",
        "text": "The <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">runtime</span></span></code> object has a few key methods:"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">add_connection</span><span style=\"color: #000000\">(</span><span style=\"color: #AF00DB\">connection</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">ConnectionInterface</span><span style=\"color: #000000\">)</span></span></code>: used above to connect the runtime to an actual database."
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">load_file</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">str</span><span style=\"color: #000000\">)</span></span></code>: Takes a filepath pointing to a file containing sources and/or queries, loads the sources and/or queries into the runtime."
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">load_source</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">str</span><span style=\"color: #000000\">)</span></span></code>: Takes a string containing Malloy code (source definitions and/or queries), loads the sources and/or queries into the runtime."
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">get_sql</span><span style=\"color: #000000\">(</span><span style=\"color: #AF00DB\">query</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">str</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">named_query</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">str</span><span style=\"color: #000000\">)</span></span></code>: Takes either a string containing a Malloy query, or the name of a named query from a Malloy model. Compiles the query and returns the equivalent SQL string."
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">(</span><span style=\"color: #AF00DB\">query</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">str</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">named_query</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">str</span><span style=\"color: #000000\">)</span></span></code>: Takes either a string containing a Malloy query, or the name of a named query from a Malloy model. Compiles the query, executes it using the database connection, and returns the results. Results are returned in the native format of the database connection (e.g., a <a href=\"https://duckdb.org/docs/api/python/result_conversion\">DuckDB result object</a>, or a <a href=\"https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.job.QueryJob#google_cloud_bigquery_job_QueryJob_result\">BigQuery result object</a>)"
      }
    ],
    "path": "/documentation/malloy_python/python_package.malloynb"
  },
  {
    "titles": [
      "The Malloy Python Package",
      "Examples"
    ],
    "paragraphs": [],
    "path": "/documentation/malloy_python/python_package.malloynb"
  },
  {
    "titles": [
      "The Malloy Python Package",
      "Examples",
      "Run a named query from a Malloy file"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-txt\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">import asyncio</span></span>\n<span class=\"line\"><span style=\"color: #000000\"></span></span>\n<span class=\"line\"><span style=\"color: #000000\">import malloy</span></span>\n<span class=\"line\"><span style=\"color: #000000\">from malloy.data.duckdb import DuckDbConnection</span></span>\n<span class=\"line\"><span style=\"color: #000000\"></span></span>\n<span class=\"line\"><span style=\"color: #000000\">async def main():</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  home_dir = &quot;/path/to/samples/duckdb/imdb&quot;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  with malloy.Runtime() as runtime:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    runtime.add_connection(DuckDbConnection(home_dir=home_dir))</span></span>\n<span class=\"line\"><span style=\"color: #000000\"></span></span>\n<span class=\"line\"><span style=\"color: #000000\">    data = await runtime.load_file(home_dir + &quot;/imdb.malloy&quot;).run(</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        named_query=&quot;genre_movie_map&quot;)</span></span>\n<span class=\"line\"><span style=\"color: #000000\"></span></span>\n<span class=\"line\"><span style=\"color: #000000\">    dataframe = data.to_dataframe()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    print(dataframe)</span></span>\n<span class=\"line\"><span style=\"color: #000000\"></span></span>\n<span class=\"line\"><span style=\"color: #000000\">if __name__ == &quot;__main__&quot;:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  asyncio.run(main())</span></span></pre>"
      }
    ],
    "path": "/documentation/malloy_python/python_package.malloynb"
  },
  {
    "titles": [
      "The Malloy Python Package",
      "Examples",
      "Get SQL from an in-line query, using a Malloy file as a source"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-txt\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">import asyncio</span></span>\n<span class=\"line\"><span style=\"color: #000000\"></span></span>\n<span class=\"line\"><span style=\"color: #000000\">import malloy</span></span>\n<span class=\"line\"><span style=\"color: #000000\">from malloy.data.duckdb import DuckDbConnection</span></span>\n<span class=\"line\"><span style=\"color: #000000\"></span></span>\n<span class=\"line\"><span style=\"color: #000000\">async def main():</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  home_dir = &quot;/path/to/samples/duckdb/faa&quot;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  with malloy.Runtime() as runtime:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    runtime.add_connection(DuckDbConnection(home_dir=home_dir))</span></span>\n<span class=\"line\"><span style=\"color: #000000\"></span></span>\n<span class=\"line\"><span style=\"color: #000000\">    [sql, connection</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    ] = await runtime.load_file(home_dir + &quot;/flights.malloy&quot;).get_sql(query=&quot;&quot;&quot;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">                  run: flights -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">                    where: carrier ? &#39;WN&#39; | &#39;DL&#39;, dep_time ? @2002-03-03</span></span>\n<span class=\"line\"><span style=\"color: #000000\">                    group_by:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">                      flight_date is dep_time.day</span></span>\n<span class=\"line\"><span style=\"color: #000000\">                      carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">                    aggregate:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">                      daily_flight_count is flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">                      aircraft.aircraft_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">                    nest: per_plane_data is {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">                      limit: 20</span></span>\n<span class=\"line\"><span style=\"color: #000000\">                      group_by: tail_num</span></span>\n<span class=\"line\"><span style=\"color: #000000\">                      aggregate: plane_flight_count is flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">                      nest: flight_legs is {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">                        order_by: 2</span></span>\n<span class=\"line\"><span style=\"color: #000000\">                        group_by:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">                          tail_num</span></span>\n<span class=\"line\"><span style=\"color: #000000\">                          dep_minute is dep_time.minute</span></span>\n<span class=\"line\"><span style=\"color: #000000\">                          origin_code</span></span>\n<span class=\"line\"><span style=\"color: #000000\">                          dest_code is destination_code</span></span>\n<span class=\"line\"><span style=\"color: #000000\">                          dep_delay</span></span>\n<span class=\"line\"><span style=\"color: #000000\">                          arr_delay</span></span>\n<span class=\"line\"><span style=\"color: #000000\">                      }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">                    }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">                }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">            &quot;&quot;&quot;)</span></span>\n<span class=\"line\"><span style=\"color: #000000\"></span></span>\n<span class=\"line\"><span style=\"color: #000000\">    print(sql)</span></span>\n<span class=\"line\"><span style=\"color: #000000\"></span></span>\n<span class=\"line\"><span style=\"color: #000000\">if __name__ == &quot;__main__&quot;:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  asyncio.run(main())</span></span></pre>"
      }
    ],
    "path": "/documentation/malloy_python/python_package.malloynb"
  },
  {
    "titles": [
      "The Malloy Python Package",
      "Examples",
      "Write an in-line Malloy model, and run a query"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-txt\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">import asyncio</span></span>\n<span class=\"line\"><span style=\"color: #000000\"></span></span>\n<span class=\"line\"><span style=\"color: #000000\">import malloy</span></span>\n<span class=\"line\"><span style=\"color: #000000\">from malloy.data.duckdb import DuckDbConnection</span></span>\n<span class=\"line\"><span style=\"color: #000000\"></span></span>\n<span class=\"line\"><span style=\"color: #000000\"></span></span>\n<span class=\"line\"><span style=\"color: #000000\">async def main():</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  home_dir = &quot;/path/to/samples/duckdb/imdb/data&quot;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  with malloy.Runtime() as runtime:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    runtime.add_connection(DuckDbConnection(home_dir=home_dir))</span></span>\n<span class=\"line\"><span style=\"color: #000000\"></span></span>\n<span class=\"line\"><span style=\"color: #000000\">    data = await runtime.load_source(&quot;&quot;&quot;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        source:titles is duckdb.table(&#39;titles.parquet&#39;) extend {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">          primary_key: tconst</span></span>\n<span class=\"line\"><span style=\"color: #000000\">          dimension:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">            movie_url is concat(&#39;https://www.imdb.com/title/&#39;,tconst)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        &quot;&quot;&quot;).run(query=&quot;&quot;&quot;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        run: titles -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">          group_by: movie_url</span></span>\n<span class=\"line\"><span style=\"color: #000000\">          limit: 5</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        &quot;&quot;&quot;)</span></span>\n<span class=\"line\"><span style=\"color: #000000\"></span></span>\n<span class=\"line\"><span style=\"color: #000000\">    dataframe = data.to_dataframe()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    print(dataframe)</span></span>\n<span class=\"line\"><span style=\"color: #000000\"></span></span>\n<span class=\"line\"><span style=\"color: #000000\"></span></span>\n<span class=\"line\"><span style=\"color: #000000\">if __name__ == &quot;__main__&quot;:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  asyncio.run(main())</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span></span></pre>"
      }
    ],
    "path": "/documentation/malloy_python/python_package.malloynb"
  },
  {
    "titles": [
      "The Malloy Python Package",
      "Examples",
      "Querying BigQuary tables"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "BigQuery auth via OAuth using gcloud."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-txt\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">gcloud auth login --update-adc</span></span>\n<span class=\"line\"><span style=\"color: #000000\">gcloud config set project {my_project_id} --installation</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Actual usage is similar to DuckDB."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-txt\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">import asyncio</span></span>\n<span class=\"line\"><span style=\"color: #000000\">import malloy</span></span>\n<span class=\"line\"><span style=\"color: #000000\">from malloy.data.bigquery import BigQueryConnection</span></span>\n<span class=\"line\"><span style=\"color: #000000\"></span></span>\n<span class=\"line\"><span style=\"color: #000000\">async def main():</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  with malloy.Runtime() as runtime:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    runtime.add_connection(BigQueryConnection())</span></span>\n<span class=\"line\"><span style=\"color: #000000\"></span></span>\n<span class=\"line\"><span style=\"color: #000000\">    data = await runtime.load_source(&quot;&quot;&quot;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        source:ga_sessions is bigquery.table(&#39;bigquery-public-data.google_analytics_sample.ga_sessions_20170801&#39;) extend {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">          measure:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">            hits_count is hits.count()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        &quot;&quot;&quot;).run(query=&quot;&quot;&quot;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        run: ga_sessions -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">            where: trafficSource.`source` != &#39;(direct)&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">            group_by: trafficSource.`source`</span></span>\n<span class=\"line\"><span style=\"color: #000000\">            aggregate: hits_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">            limit: 10</span></span>\n<span class=\"line\"><span style=\"color: #000000\">          }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        &quot;&quot;&quot;)</span></span>\n<span class=\"line\"><span style=\"color: #000000\"></span></span>\n<span class=\"line\"><span style=\"color: #000000\">    dataframe = data.to_dataframe()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    print(dataframe)</span></span>\n<span class=\"line\"><span style=\"color: #000000\"></span></span>\n<span class=\"line\"><span style=\"color: #000000\">if __name__ == &quot;__main__&quot;:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  asyncio.run(main())</span></span>\n<span class=\"line\"><span style=\"color: #000000\"></span></span></pre>"
      }
    ],
    "path": "/documentation/malloy_python/python_package.malloynb"
  },
  {
    "titles": [
      "MalloySQL"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "MalloySQL enables mixing dialect-specific SQL (including DDL) with Malloy. For example, MalloySQL can be used to create a new table in BigQuery, based on a model of existing data."
      }
    ],
    "path": "/documentation/malloy_sql/index.malloynb"
  },
  {
    "titles": [
      "MalloySQL",
      "Usage"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "MalloySQL can be written in files with either the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">.</span><span style=\"color: #001080\">malloynb</span></span></code> or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">.</span><span style=\"color: #001080\">malloysql</span></span></code> file extensions. These files can be used by either the VS Code Extension or the Malloy CLI. In the VS Code Extension, MalloySQL files are rendered in notebook format, and you have the option to add cells that contain markdown, Malloy, or MalloySQL. To change the language of a cell, click the language button on the bottom right of an individual code cell:"
      },
      {
        "type": "p",
        "text": "You can specify a connection name in a MalloySQL cell by including the following line before the query:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-txt\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">-- connection:&lt;connection_name&gt;</span></span></pre>"
      },
      {
        "type": "p",
        "text": "In the example above, we are specifying <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">bigquery</span></span></code> as the connection name to use when executing the SQL query. Only the first MalloySQL cell in the notebook needs to specify a connection. All subsequent queries will use this same connection by default."
      },
      {
        "type": "p",
        "text": "SQL statements can also contain embedded Malloy queries by wrapping the Malloy statement with <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">%{</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">}%</span></span></code>. To use embedded Malloy, a source must first be imported to use with the Malloy query."
      },
      {
        "type": "p",
        "text": "MalloySQL can contain multi (<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #008000\">/*...*/</span></span></code>) and single-line (<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #008000\">//</span></span></code> or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #008000\">--</span></span></code>) comments."
      },
      {
        "type": "p",
        "text": "Running a specific SQL statement in a Malloy file (by, for example, clicking the \"Run\" codelens in the VSCode extension) will execute all preceeding Malloy statements, but only the selected SQL statement."
      }
    ],
    "path": "/documentation/malloy_sql/index.malloynb"
  },
  {
    "titles": [
      "Directly Querying a JSON API"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "DuckDB can be used to query a JSON API endpoint, and Malloy makes it simple to transform the resulting data. The example below reads exchange rate data from the US Treasury and shows the data by currency over time."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #008000\">-- source: exchange_rates is </span></span>\n<span class=\"line\"><span style=\"color: #008000\">--   duckdb.table(&#39;https://api.fiscaldata.treasury.gov/services/api/fiscal_service/v1/accounting/od/rates_of_exchange?fields=country_currency_desc,exchange_rate,record_date&amp;page[size]=10000&amp;filter=country_currency_desc.json&#39;)</span></span></pre>"
      }
    ],
    "path": "/documentation/patterns/apijson.malloynb"
  },
  {
    "titles": [
      "Directly Querying a JSON API",
      "Query by Country"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "This query builds a line chart showing exchange rate values over time. With a simple Malloy query, we can easily transform and analyze a dataset directly from an HTTP API, without any intermediate database required."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #008000\">-- #(docs) limit=5000 size=large</span></span>\n<span class=\"line\"><span style=\"color: #008000\">-- run: exchange_rates -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #008000\">--   group_by: data.country_currency_desc</span></span>\n<span class=\"line\"><span style=\"color: #008000\">--   # line_chart</span></span>\n<span class=\"line\"><span style=\"color: #008000\">--   nest: by_date is  {</span></span>\n<span class=\"line\"><span style=\"color: #008000\">--     group_by: </span></span>\n<span class=\"line\"><span style=\"color: #008000\">--       data.record_date</span></span>\n<span class=\"line\"><span style=\"color: #008000\">--       rate is data.exchange_rate::number</span></span>\n<span class=\"line\"><span style=\"color: #008000\">--   }</span></span>\n<span class=\"line\"><span style=\"color: #008000\">-- }</span></span></pre>"
      }
    ],
    "path": "/documentation/patterns/apijson.malloynb"
  },
  {
    "titles": [
      "Automatically Binning Data"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "By examining the range of values over a dataset, we can compute the appropriate histogram bin size, while capturing the data at the same time.  We can then pipe the output to another query to display a histogram."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\"># bar_chart</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_elevation</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">bin_size</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> (</span><span style=\"color: #795E26\">max</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">elevation</span><span style=\"color: #000000\">) - </span><span style=\"color: #795E26\">min</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">elevation</span><span style=\"color: #000000\">)) / </span><span style=\"color: #098658\">30</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">data</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\">  {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">elevation</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">row_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  } -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">elevation</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #795E26\">floor</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">data</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">elevation</span><span style=\"color: #000000\"> / </span><span style=\"color: #001080\">bin_size</span><span style=\"color: #000000\">) * </span><span style=\"color: #795E26\">nullif</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">bin_size</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">) + </span><span style=\"color: #001080\">bin_size</span><span style=\"color: #000000\"> / </span><span style=\"color: #098658\">2</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">data</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">row_count</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">elevation</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/patterns/autobin.malloynb"
  },
  {
    "titles": [
      "Automatically Binning Data",
      "Overall elevation distribution"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The query can be used to show the overall distribution of the data."
      },
      {
        "type": "p",
        "text": "We are showing the bin_size in this exmaple for clarity."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">by_elevation</span></span></pre>"
      }
    ],
    "path": "/documentation/patterns/autobin.malloynb"
  },
  {
    "titles": [
      "Automatically Binning Data",
      "Distribution Adapts Automatically"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Notice that when we look at Florida, the bin-width is different."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;FL&#39;</span><span style=\"color: #000000\"> } -&gt; </span><span style=\"color: #001080\">by_elevation</span></span></pre>"
      }
    ],
    "path": "/documentation/patterns/autobin.malloynb"
  },
  {
    "titles": [
      "Automatically Binning Data",
      "Elevation within states"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "This binning even adapts when the queries are nested."
      },
      {
        "type": "p",
        "text": "Notice that all the binning is local to the individual states.  For example the bottom bin in Colorado starts at an elevation of 3000ish feet."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_elevation</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span></pre>"
      }
    ],
    "path": "/documentation/patterns/autobin.malloynb"
  },
  {
    "titles": [
      "Cohort Analysis"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "It is often useful to see how groups of people behave over time.  The most simple example is in retail.  Of the people that first signed up for accouunts how many made an order and how many ordered in subsequent months."
      },
      {
        "type": "p",
        "text": "We'll use the following model"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">order_items</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/order_items.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">users</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/users.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">on</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">user_id</span><span style=\"color: #000000\">=</span><span style=\"color: #001080\">users</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">id</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">user_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">user_id</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">order_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">total_sales</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">sale_price</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/patterns/cohorts.malloynb"
  },
  {
    "titles": [
      "Cohort Analysis",
      "Example"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "In the example below, we look at the first 6 months of 2022.  In this example we are looking in terms of numbers of users."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">order_items</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// limit the data to 6 months</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\">users</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">created_at</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">month</span><span style=\"color: #000000\"> ? </span><span style=\"color: #098658\">@2022</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">for</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">6</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">months</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">and</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">created_at</span><span style=\"color: #000000\"> ? </span><span style=\"color: #098658\">@2022</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">for</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">6</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">months</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// show overall statistics about the orders</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">`Order Month`</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">created_at</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">month</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">`Users that Ordered Count`</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">user_count</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Pivot the cohorts</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\"># pivot</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">cohorts</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">`User Signup Cohort`</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">users</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">created_at</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">month</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">`Users in Cohort that Ordered`</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">user_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\"># percent</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">`Percent of cohort that ordered`</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">user_count</span><span style=\"color: #000000\">/</span><span style=\"color: #795E26\">all</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">user_count</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">`User Signup Cohort`</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/patterns/cohorts.malloynb"
  },
  {
    "titles": [
      "Cohort Analysis",
      "Cohorts as a percentage of Sales."
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">order_items</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\">users</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">created_at</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">month</span><span style=\"color: #000000\"> ? </span><span style=\"color: #098658\">@2022</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">for</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">6</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">months</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">and</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">created_at</span><span style=\"color: #000000\"> ? </span><span style=\"color: #098658\">@2022</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">for</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">6</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">months</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">`Order Month`</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">created_at</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">month</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\"># number</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">&quot;$</span><span style=\"color: #008000\">#</span><span style=\"color: #0451A5\">,</span><span style=\"color: #008000\">##</span><span style=\"color: #0451A5\">0&quot;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">`Total Sales`</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">total_sales</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\"># pivot</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">cohorts</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">`User Signup Cohort`</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">users</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">created_at</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">month</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\"># percent</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">`Cohort as Percent of Sales`</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">total_sales</span><span style=\"color: #000000\">/</span><span style=\"color: #795E26\">all</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">total_sales</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">`User Signup Cohort`</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/patterns/cohorts.malloynb"
  },
  {
    "titles": [
      "Malloy Dimensional Indexes"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy has a special query operator that builds _Dimensional Search Indexes for sources.  A Dimensional Search Index is a table with 4 columns.  Dimensional indexes are useful for a variety of things including filtering suggestions and LLMs."
      },
      {
        "type": "p",
        "text": "When filtering data, you might know a term, but not necessarily which column in the one of the join data contains it.  Indexing the data on field names and high cardinality fields let's you qucikly find the term and the associated value."
      },
      {
        "type": "p",
        "text": "Indexing could be used by LLMs to find the interesting column/term mapping in the data set."
      },
      {
        "type": "p",
        "text": "<em>fieldName</em> - The path to the column in the source"
      },
      {
        "type": "p",
        "text": "<em>fieldValue</em> - The dimensional value for the field (or range if fieldType is not a string)"
      },
      {
        "type": "p",
        "text": "<em>fieldType</em> - Type type of the column."
      },
      {
        "type": "p",
        "text": "<em>weight</em> - a weighting to use as to the importance the distinct dimensional value.  Defaults to cardinality of the field."
      }
    ],
    "path": "/documentation/patterns/dim_index.malloynb"
  },
  {
    "titles": [
      "Malloy Dimensional Indexes",
      "Simple Example"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "We're going to take the airports table and index it.  The results are an un ordered list of distinct <em>fieldName/fieldValue</em> pairs appear in the table.  The weight, in this case is the number of rows that partciular occurs on."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">) -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">index</span><span style=\"color: #000000\">: *</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/patterns/dim_index.malloynb"
  },
  {
    "titles": [
      "Malloy Dimensional Indexes",
      "Add Ordering"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Adding a second query stage to filter on <em>string</em> columns and ordering by weight descending shows us the most common <em>fieldName/fieldValue</em> pairs in the dataset."
      },
      {
        "type": "p",
        "text": "All Malloy queries run as a single SQL query.  The <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">index</span><span style=\"color: #000000\">:</span></span></code> operator is no different.  Click the <strong>SQL</strong> tab to see how this works."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">) -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">index</span><span style=\"color: #000000\">: *</span></span>\n<span class=\"line\"><span style=\"color: #000000\">} -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">fieldType</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;string&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">: *</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">weight</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">desc</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/patterns/dim_index.malloynb"
  },
  {
    "titles": [
      "Malloy Dimensional Indexes",
      "Index For Filtering User Interfaces"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Indexes can be used find the best way to filter a dataset.  For example supposed we'd like to find 'SANTA CRUZ' in the dataset. Upon approaching the dataset, but we don't which column might contain it.  In a UI you might imagine that you type 'SANTA' and let have suggestons for values that might be appropriate.  In the results we can see that top value, 'SANTA ROSA', appears as county on 26 rows in the table.  We can also see that 'SANTA CRUZ' is both a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">city</span></span></code> and a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">county</span></span></code>.."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">) -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">index</span><span style=\"color: #000000\">: *</span></span>\n<span class=\"line\"><span style=\"color: #000000\">} -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">fieldValue</span><span style=\"color: #000000\"> ~ </span><span style=\"color: #811F3F\">r&#39;SANTA&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">: *</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">weight</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">desc</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">15</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "We can then write a simple query to show the rows.  It turns out that 'SANTA CRUZ' is a county in both California and Arizona."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">) -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">county</span><span style=\"color: #000000\"> ~ </span><span style=\"color: #A31515\">&#39;SANTA CRUZ&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">: *</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/patterns/dim_index.malloynb"
  },
  {
    "titles": [
      "Malloy Dimensional Indexes",
      "Indexing to show top values for each dimension"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "It is often difficult to approach a new dataset.  The index operator provides an intersting way to quickly gain an understanding of the dataset.  By piping the results of an index another stage, we can quickly see all the interesting values for each of the interesting dimesions.  Again, the weight shows the number of rows for that particular dimension/value."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">) -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">index</span><span style=\"color: #000000\">: *</span></span>\n<span class=\"line\"><span style=\"color: #000000\">} -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">fieldName</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">values</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">fieldValue</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">weight</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">weight</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">desc</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">10</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">fieldName</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/patterns/dim_index.malloynb"
  },
  {
    "titles": [
      "Malloy Dimensional Indexes",
      "Sampling"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "With large datasets, you can also sample a small subsection using the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">sample</span><span style=\"color: #000000\">:</span></span></code> parameter.  Sampled indexes are great at identifing the important low cardinality fields."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">) -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">index</span><span style=\"color: #000000\">: *</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">sample</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">5000</span><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// sample only 5000 rows</span></span>\n<span class=\"line\"><span style=\"color: #000000\">} -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">fieldName</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">values</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\">  {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">fieldValue</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">weight</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">weight</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">desc</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">10</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">fieldName</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/patterns/dim_index.malloynb"
  },
  {
    "titles": [
      "Malloy Dimensional Indexes",
      "A More Complex Example"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The rest of this pages uses the model below.  The data is an excerpt from the IMDB.  The Malloy schema for this model is shown on the right.  The core value is movies, but joined at the principals (the people that worked on the movie) and the people (the actual data about the individuals)."
      },
      {
        "type": "p",
        "text": "We use the measure <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">total_ratings</span></span></code> to determin a movie's popularity.  An individual's popularity is determined by the some of all the ratings of the movies a person has worked on."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">movies</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/titles.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">join_many</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">principals</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/principals.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">people</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/names.parquet&#39;</span><span style=\"color: #000000\">) </span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">on</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">nconst</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">people</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">nconst</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  } </span><span style=\"color: #AF00DB\">on</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">tconst</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">principals</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">tconst</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">total_ratings</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">numVotes</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/patterns/dim_index.malloynb"
  },
  {
    "titles": [
      "Malloy Dimensional Indexes",
      "Weights can be any measure"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Often a row count will work nicely as a weight, but sometimes there is something better.  In movies, for example the sum of the number of votes will not only find the interesting most interesting movies but will also find the most interesting people.  For example the most interesting people in the dataset."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">movies</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">principals</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">people</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">primaryName</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">total_ratings</span></span>\n<span class=\"line\"><span style=\"color: #000000\">} </span></span></pre>"
      }
    ],
    "path": "/documentation/patterns/dim_index.malloynb"
  },
  {
    "titles": [
      "Malloy Dimensional Indexes",
      "Index the entire graph"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Indexing can work across an entire network of joins and can be selective."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">movies</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">index</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    *</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">genres</span><span style=\"color: #000000\">.*</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">principals</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">category</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">principals</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">job</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">principals</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">characters</span><span style=\"color: #000000\">.*</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">principals</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">people</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">primaryName</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">by</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">total_ratings</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">sample</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">5000</span></span>\n<span class=\"line\"><span style=\"color: #000000\">} -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">: *</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">weight</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">desc</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/patterns/dim_index.malloynb"
  },
  {
    "titles": [
      "Malloy Dimensional Indexes",
      "Search Index Naming Convention"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "By convention indexes in sources are named <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">search_index</span></span></code>."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">movies2</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/titles.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">join_many</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">principals</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/principals.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">people</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/names.parquet&#39;</span><span style=\"color: #000000\">) </span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">on</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">nconst</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">people</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">nconst</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  } </span><span style=\"color: #AF00DB\">on</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">tconst</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">principals</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">tconst</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">total_ratings</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">numVotes</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">search_index</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">index</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      *</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">genres</span><span style=\"color: #000000\">.*</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">principals</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">category</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">principals</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">job</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">principals</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">characters</span><span style=\"color: #000000\">.*</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">principals</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">people</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">primaryName</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">by</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">total_ratings</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "So to look for 'Brad'"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">movies2</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">search_index</span><span style=\"color: #000000\"> -&gt; { </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">: *</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">fieldValue</span><span style=\"color: #000000\"> ~ </span><span style=\"color: #A31515\">&#39;Brad%&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">weight</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">desc</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "So to look for 'Bat'"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">movies2</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">search_index</span><span style=\"color: #000000\"> -&gt; { </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">: *</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">fieldValue</span><span style=\"color: #000000\"> ~ </span><span style=\"color: #A31515\">&#39;Bat%&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">weight</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">desc</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/patterns/dim_index.malloynb"
  },
  {
    "titles": [
      "Foreign Sums"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy allows you to compute sums and averages correctly based on your join tree. Fan-outs based on join relationships will never impact the correctness of these aggregations. This example has <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">flights</span></span></code>, joining to <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">aircraft</span></span></code>, joining to <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">aircraft_model``</span><span style=\"color: #000000\">.</span></span>\n<span class=\"line\"></span></code>aircraft_model` has the number of seats specified on this model of aircraft.  Code below computes sums and averages at various places in the join tree."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #008000\">// join 3 tables, flights, aircraft and aircraft models.</span></span>\n<span class=\"line\"><span style=\"color: #008000\">// `flights` is individual flights</span></span>\n<span class=\"line\"><span style=\"color: #008000\">// `aircraft` is the plane that made the flight</span></span>\n<span class=\"line\"><span style=\"color: #008000\">// `aircraft_models` is data about the kind of aircraft</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">aircraft_models</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/aircraft_models.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">primary_key</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">aircraft_model_code</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">aircraft</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/aircraft.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">primary_key</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">tail_num</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">aircraft_models</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">with</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">aircraft_model_code</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">aircraft</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">with</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">tail_num</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">@2003-01</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// number of flights</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// number of planes</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">aircraft_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">aircraft</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// number of different aircraft_models</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">aircraft_model_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">aircraft</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">aircraft_models</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// count each seat once for each flight.</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">seats_for_sale</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">aircraft</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">aircraft_models</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">seats</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// count the seat once for each plane</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">seats_on_all_planes</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">aircraft</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">aircraft</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">aircraft_models</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">seats</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// average number of seats on each model by model</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">average_seats_per_model</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">aircraft</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">aircraft_models</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">seats</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/patterns/foreign_sums.malloynb"
  },
  {
    "titles": [
      "Computing Moving Averages"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy can compute moving averages on resultsets."
      },
      {
        "type": "p",
        "text": "The queries below use the following model"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\">## renderer_next</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">order_items</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/order_items.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">user_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">user_id</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">order_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/patterns/moving_avg.malloynb"
  },
  {
    "titles": [
      "Computing Moving Averages",
      "Simple Moving Average"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">order_items</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">order_month</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">created_at</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">month</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">order_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">moving_avg_order_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">avg_moving</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">order_count</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">order_month</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/patterns/moving_avg.malloynb"
  },
  {
    "titles": [
      "Computing Moving Averages",
      "Visualizing the Results"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\"># line_chart</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">order_items</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\"># x</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">order_month</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">created_at</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">month</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\"># y</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">order_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\"># y</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">moving_avg_order_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">avg_moving</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">order_count</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">order_month</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/patterns/moving_avg.malloynb"
  },
  {
    "titles": [
      "Computing Moving Averages",
      "Displaying Charts in Nested Queries"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "In this example, we've added two queries to the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">flights</span></span></code> source, one showing flights by month without the moving average applied, and one with the moving average applied. We then use these queries to show charts of flight count for each airport over time."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">dep_month</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">month</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\"># line_chart</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">non_averaged</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\"># x</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">dep_month</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\"># y</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\"># y</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">moving_avg_flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">avg_moving</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">dep_month</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">destination</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">non_averaged</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/patterns/moving_avg.malloynb"
  },
  {
    "titles": [
      "Nested Subtotals"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Nested subtotals are quite painful to do in SQL, requiring either self-joins, window functions, or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">GROUP</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">BY</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">ROLLUP</span></span></code> queries. Unfortunately for analysts, it's also a very common type of analysis requested by business owners; for example, determing which segments of a population drove revenue growth, or drilling down from annual numbers into more granular time periods, like quarters or months."
      },
      {
        "type": "p",
        "text": "To see how we do this in Malloy, let's look at the following simple model:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">order_items</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/order_items.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">primary_key</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">id</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">total_sales</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">sale_price</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "This contains a single table of order items, and a measure to calculate sales. We can use this to calculate sales by year:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">order_items</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">fiscal_year</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">created_at</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">year</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">total_sales</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">fiscal_year</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">desc</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Now suppose we want to drill into the sales numbers by quarter. To do this in SQL would require either a window function, a self-join, or a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">GROUP</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">BY</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">ROLLUP</span></span></code>, all of which are complicated to implement, and produce results that are difficult to interpret. In Malloy, none of this is necessary, we simply use a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">nest</span></span></code> clause:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">order_items</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">fiscal_year</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">created_at</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">year</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">total_sales</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">fiscal_year</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">desc</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_quarter</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">fiscal_quarter</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">created_at</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">quarter</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">total_sales</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">fiscal_quarter</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "To drill down even further, it's trivial to repeat this pattern once again. The following query looks at the top 5 sales days for each fiscal quarter"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">order_items</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">fiscal_year</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">created_at</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">year</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">total_sales</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">fiscal_year</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">desc</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_quarter</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\">  {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">fiscal_quarter</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">created_at</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">quarter</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">total_sales</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">fiscal_quarter</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">top_days</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\">  {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">sale_date</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">created_at</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">day</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">total_sales</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">5</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "These queries are trivial to implement, and easy to understand. If you'd like a challenge, try implementing the same thing in SQL and see what it looks like."
      }
    ],
    "path": "/documentation/patterns/nested_subtotals.malloynb"
  },
  {
    "titles": [
      "Bucketing with 'Other'"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Often you want to limit the number of group-by values in a table, and bucket everything else into an 'other' category."
      },
      {
        "type": "p",
        "text": "In the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">top_states_by_eleveation</span></span></code> query below, we have a query with two stages. The first stage calculates the top states and nests the data to be aggregated. The second pipeline stage produces the actual aggregation."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">avg_elevation</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">elevation</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">top_states_by_elevation</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">avg_elevation</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">is_other</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">row_number</span><span style=\"color: #000000\">() &gt; </span><span style=\"color: #098658\">5</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">data</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\">  {  </span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">code</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">elevation</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  } -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #0000FF\">pick</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">state</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">when</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">not</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">is_other</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #0000FF\">else</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;OTHER&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">avg_elevation</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">data</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">elevation</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">data</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\"># hidden</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">sort</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">data</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">() {</span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">not</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">is_other</span><span style=\"color: #000000\"> }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">sort</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">desc</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/patterns/other.malloynb"
  },
  {
    "titles": [
      "Bucketing with 'Other'",
      "Basic Query"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">top_states_by_elevation</span></span></pre>"
      }
    ],
    "path": "/documentation/patterns/other.malloynb"
  },
  {
    "titles": [
      "Bucketing with 'Other'",
      "Nested Query"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">`Facility Type`</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">fac_type</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">avg_elevation</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">top_states_by_elevation</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/patterns/other.malloynb"
  },
  {
    "titles": [
      "Percent of Total"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy provides a way to compute <em>percent of total</em> through level of detail (ungrouped aggregates) functions.  The functions <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">all</span><span style=\"color: #000000\">()</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">exclude</span><span style=\"color: #000000\">()</span></span></code> escape grouping in aggregate calculations.  These functions are different than window functions as they operate inline with the query and can produce correct results even when the data hits a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">limit</span></span></code> or is fanned out.  Use cases below."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/carriers.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">on</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">code</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/patterns/percent_of_total.malloynb"
  },
  {
    "titles": [
      "Percent of Total",
      "Totals"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Using <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">all</span><span style=\"color: #000000\">()</span></span></code>, you can easily produce an aggregate calculation that includes all the data, not just the data on the current row.  Southwest + USAir = 126,434 flights.  Notice that <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">all_flights</span></span></code> is the total of all the flights accessible in the query."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">nickname</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">all_flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">all</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">2</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/patterns/percent_of_total.malloynb"
  },
  {
    "titles": [
      "Percent of Total",
      "Percent of Total"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">all</span><span style=\"color: #000000\">()</span></span></code> function is useful for percent of total calculations.  The <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\"># percent</span></span></code> tags the result so it is displayed as a percentage."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">nickname</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\"># percent</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">percent_of_flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> / </span><span style=\"color: #795E26\">all</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">5</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/patterns/percent_of_total.malloynb"
  },
  {
    "titles": [
      "Percent of Total",
      "All of a particular grouping"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">all</span><span style=\"color: #000000\">()</span></span></code> function can optionally take the names of output columns to show all of a particular value.  You can see that all of Southwests fights is still 88,751.  The output column name for <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">nickname</span></span></code> is <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">nickname</span></span></code> so we use that in the calculation.  The <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">exclude</span><span style=\"color: #000000\">()</span></span></code> function lets you eliminate a dimension from grouping."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">nickname</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">destination</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">origin</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">flights_by_this_carrier</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">all</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">nickname</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">flights_to_this_destination</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">all</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">destination</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">flights_by_this_origin</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">all</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">origin</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">flights_on_this_route</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">exclude</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">nickname</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">20</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/patterns/percent_of_total.malloynb"
  },
  {
    "titles": [
      "Percent of Total",
      "As Percentages"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Displaying results as percentages is often gives clues as to how numbers relate.  Is this number a large or small percentage of the group?  Level of detail calculations are great for this.  In Malloy, identifiers enclosed in back-ticks can have spaces."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">nickname</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">destination</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">origin</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\"># percent</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">`carrier as a percent of all flights`</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">all</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">nickname</span><span style=\"color: #000000\">) / </span><span style=\"color: #795E26\">all</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\"># percent</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">`destination as a percent of all flights`</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">all</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">destination</span><span style=\"color: #000000\">) / </span><span style=\"color: #795E26\">all</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\"># percent</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">`origin as a percent of all flights`</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">all</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">origin</span><span style=\"color: #000000\">) / </span><span style=\"color: #795E26\">all</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\"># percent</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">`carriers as a percentage of route`</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> / </span><span style=\"color: #795E26\">exclude</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">nickname</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/patterns/percent_of_total.malloynb"
  },
  {
    "titles": [
      "Working with Nested Data"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Data often comes in a nested structure, where information is organized hierarchically. BigQuery and DuckDB have built-in support for reading tables with nested data and extracting information from these nested structures."
      },
      {
        "type": "p",
        "text": "Working with nested data in Malloy is remarkably simple. In Malloy, a nested array or struct is treated as a built-in <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">join_many</span></span></code> operation. You can effortlessly access the desired data using dot notation."
      },
      {
        "type": "p",
        "text": "For example, in Google Analytics data, the top level object is sessions. There are repeated structures such as hits, pageviews, and products and more. Querying this data in SQL is difficult."
      },
      {
        "type": "p",
        "text": "Below is the <em>partial</em> schema for Google Analytics."
      },
      {
        "type": "p",
        "text": "To perform aggregate calculations in Malloy, you can simply specify the complete path to the numeric value and select the appropriate aggregate function. Malloy refers to this as aggregate locality, ensuring accurate calculations regardless of the join pattern used."
      }
    ],
    "path": "/documentation/patterns/reading_nested.malloynb"
  },
  {
    "titles": [
      "Working with Nested Data",
      "A simple Google Analytics Semantic model"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Here is a very simple Malloy model describing some interesting calculations on Google Analytics data:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">ga_sessions</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/ga_sample.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">user_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">fullVisitorId</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\"># percent</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">percent_of_users</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">user_count</span><span style=\"color: #000000\"> / </span><span style=\"color: #795E26\">all</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">user_count</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">session_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">total_visits</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">totals</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">visits</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">total_hits</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">totals</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">hits</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">total_page_views</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">totals</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">pageviews</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">t2</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">totals</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">pageviews</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">total_product_revenue</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">hits</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">product</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">productRevenue</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">hits_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">hits</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">sold_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">hits</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">() { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">hits</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">product</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">productQuantity</span><span style=\"color: #000000\"> &gt; </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\"> }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/patterns/reading_nested.malloynb"
  },
  {
    "titles": [
      "Working with Nested Data",
      "Show Data by Traffic Source"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">ga_sessions</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">trafficSource</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">`source`</span><span style=\"color: #000000\"> != </span><span style=\"color: #A31515\">&#39;(direct)&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">trafficSource</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">`source`</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">user_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">percent_of_users</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">hits_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">total_visits</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">session_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">10</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/patterns/reading_nested.malloynb"
  },
  {
    "titles": [
      "Working with Nested Data",
      "Show Data By Browser"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">ga_sessions</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">device</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">browser</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">user_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">percent_of_users</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">total_visits</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">total_hits</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">total_page_views</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">sold_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/patterns/reading_nested.malloynb"
  },
  {
    "titles": [
      "Working with Nested Data",
      "With Nested Results"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">ga_sessions</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">device</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">browser</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">user_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">percent_of_users</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">total_visits</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">total_hits</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">total_page_views</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">sold_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_source</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\">  {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">trafficSource</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">`source`</span><span style=\"color: #000000\"> != </span><span style=\"color: #A31515\">&#39;(direct)&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">trafficSource</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">`source`</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">user_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">percent_of_users</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">hits_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">total_visits</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">session_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">10</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/patterns/reading_nested.malloynb"
  },
  {
    "titles": [
      "Sessionized Data - Map/Reduce"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Flight event data contains <em>dep_time</em>, <em>carrier</em>, <em>origin</em>, <em>destination</em> and <em>tail_num</em>  (the plane that made the flight).  The query below takes the flight event data and maps it into sessions of <em>flight_date</em>, <em>carrier</em>, and <em>tail_num</em>.  For each session, a nested list of <em>flight_legs</em> by the aircraft on that day.  The flight legs are numbered."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;WN&#39;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">and</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\"> ? </span><span style=\"color: #098658\">@2002-03-03</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">} -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">session_id</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">row_number</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">flight_date</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">day</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">tail_num</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">max_delay</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">max</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">dep_delay</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">total_distance</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">distance</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_legs</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\">  {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">3</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flght_leg</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">row_number</span><span style=\"color: #000000\">() </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">tail_num</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">dep_minute</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">minute</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">origin</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">destination</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">dep_delay</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">arr_delay</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  } </span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/patterns/sessionize.malloynb"
  },
  {
    "titles": [
      "Transforming Data"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy can be used to for data transformation.  Files with the extension <code>.malloysql</code> are interpreted as a combination of both Malloy and SQL.  Each language is blocked by a preceeding <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">&gt;&gt;&gt;</span></span></code>.  Each block can do anything that is appropriate in the language.  In Malloy, for example, you can import other Malloy files.  In SQL, you can execute any DDL command."
      },
      {
        "type": "p",
        "text": "In the example below, we create a simple semantic model for the table <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">airports</span></span></code>.  There are two SQL sections, one creates a CSV file of the major airports, the other creates a view in the database with a list of states, the airport count in each state, and the count of each of the facility types for each state."
      },
      {
        "type": "p",
        "text": "This mechanism can be used to create governed datasets for use in other tooling: the transformation code for these tables can be governed with source control, and the queries take advantage of Malloy's reusibility."
      },
      {
        "type": "p",
        "text": "File <code>airports.malloysql</code>:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloysql\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">&gt;&gt;&gt;malloy</span></span>\n<span class=\"line\"><span style=\"color: #000000\">source: airports </span><span style=\"color: #0000FF\">is</span><span style=\"color: #000000\"> duckdb.table(</span><span style=\"color: #A31515\">&#39;data/airports.parquet&#39;</span><span style=\"color: #000000\">) extend {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  measure: airport_count </span><span style=\"color: #0000FF\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">  view: major_airports </span><span style=\"color: #0000FF\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">where</span><span style=\"color: #000000\">: major = </span><span style=\"color: #A31515\">&#39;Y&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">select</span><span style=\"color: #000000\">: *</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">  view: by_state </span><span style=\"color: #0000FF\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    group_by: </span><span style=\"color: #0000FF\">state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">aggregate</span><span style=\"color: #000000\">: airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    nest: by_fac_type </span><span style=\"color: #0000FF\">is</span><span style=\"color: #000000\">  {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      group_by: fac_type</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #0000FF\">aggregate</span><span style=\"color: #000000\">: airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">&gt;&gt;&gt;</span><span style=\"color: #0000FF\">sql</span><span style=\"color: #000000\"> connection:duckdb</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #008000\">-- create a table using a Malloy query</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #0000FF\">COPY</span><span style=\"color: #000000\"> (</span></span>\n<span class=\"line\"><span style=\"color: #000000FF\">%{</span></span>\n<span class=\"line\"><span style=\"color: #000000FF\">  </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000FF\"> -&gt; </span><span style=\"color: #001080\">major_airports</span></span>\n<span class=\"line\"><span style=\"color: #000000FF\">}%</span></span>\n<span class=\"line\"><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">TO</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;major_airports.csv&#39;</span><span style=\"color: #000000\"> (HEADER) </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">&gt;&gt;&gt;</span><span style=\"color: #0000FF\">sql</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #008000\">-- create a view using a Malloy query</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #0000FF\">CREATE</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">OR</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">REPLACE</span><span style=\"color: #000000\"> VIEW  by_state </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> (</span></span>\n<span class=\"line\"><span style=\"color: #000000FF\">%{</span></span>\n<span class=\"line\"><span style=\"color: #000000FF\">  </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000FF\"> -&gt; </span><span style=\"color: #001080\">by_state</span></span>\n<span class=\"line\"><span style=\"color: #000000FF\">}%</span></span>\n<span class=\"line\"><span style=\"color: #000000\">) </span></span></pre>"
      }
    ],
    "path": "/documentation/patterns/transform.malloynb"
  },
  {
    "titles": [
      "Measuring Change over Time by Comparing Timeframes"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "There are a couple of different ways to go about this in Malloy."
      }
    ],
    "path": "/documentation/patterns/yoy.malloynb"
  },
  {
    "titles": [
      "Measuring Change over Time by Comparing Timeframes",
      "Method 1: Pivoting a Visualization"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "We can compare performance of different years using the same x and y-axes.  Line charts take the x-axis, y-axis and dimensional (color) axis as parameters.\nIn this case, the x-axis is <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">month_of_year</span></span></code>, the y-axis is <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">flight_count</span></span></code> and the dimensional (color) axis is the year."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">month_of_year</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">month</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_year</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">year</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "By adding year as the third column, we can display different years on the same chart. Note the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\"># line_chart</span></span></code> tag above the query. This is a hint to the renderer to display the data as a line chart. Changing the definition of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">flight_year</span></span></code> to <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">year</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\">)::</span><span style=\"color: #267F99\">string</span></span></code> makes the line chart interpret the year as \"categorical,\" giving distinct colors for each year rather than a gradient."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\"># line_chart</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">month_of_year</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">month</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_year</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">year</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\">)::</span><span style=\"color: #267F99\">string</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/patterns/yoy.malloynb"
  },
  {
    "titles": [
      "Measuring Change over Time by Comparing Timeframes",
      "Method 2: Filtered Aggregates"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Filters make it easy to reuse aggregate calculations for trends analysis."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">flights_in_2002</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">@2002</span><span style=\"color: #000000\"> }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">flights_in_2003</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">@2003</span><span style=\"color: #000000\"> }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\"># percent</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">percent_change</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">      (</span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">@2003</span><span style=\"color: #000000\"> } - </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">@2002</span><span style=\"color: #000000\"> })</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        / </span><span style=\"color: #795E26\">nullif</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">@2003</span><span style=\"color: #000000\"> }, </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/patterns/yoy.malloynb"
  },
  {
    "titles": [
      "Measuring Change over Time by Comparing Timeframes",
      "Method 3: Calculate with Lag"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">:</span></span></code> clause is Malloy's window function equivalent, and allows us to compute year over year calculations using the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">lag</span></span></code> function:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">dep_year</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">year</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">last_year</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">lag</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\"># percent</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">growth</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> (</span><span style=\"color: #795E26\">lag</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">) - </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\">) / </span><span style=\"color: #795E26\">lag</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">dep_year</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/patterns/yoy.malloynb"
  },
  {
    "titles": [
      "Measuring Change over Time by Comparing Timeframes",
      "Bonus: Relative timeframes and expression reuse"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "You might like to write queries that automatically adjust based on the current timeframe.  The query below uses date arithmetic to filter the data to time frames relative to now.  These measures probably aren't generally useful in the model so we use the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\">:</span></span></code> operation to add these measure so they are only locally accessable within the query."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">inventory_items</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/inventory_items.parquet&#39;</span><span style=\"color: #000000\">) </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">order_items</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/order_items.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">inventory_items</span><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">on</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">inventory_item_id</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">inventory_items</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">id</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">order_item_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">category_growth</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\">: {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #008000\">// add measures for use just in this query</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        </span><span style=\"color: #001080\">last_year</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">order_item_count</span><span style=\"color: #000000\"> { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">created_at</span><span style=\"color: #000000\"> ? </span><span style=\"color: #001080\">now</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">year</span><span style=\"color: #000000\"> - </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">year</span><span style=\"color: #000000\"> }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">        </span><span style=\"color: #001080\">prior_year</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">order_item_count</span><span style=\"color: #000000\"> { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">created_at</span><span style=\"color: #000000\"> ? </span><span style=\"color: #001080\">now</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">year</span><span style=\"color: #000000\"> - </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">years</span><span style=\"color: #000000\"> }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">10</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">inventory_items</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">product_category</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">last_year</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">prior_year</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\"># percent</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">percent_change</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">last_year</span><span style=\"color: #000000\"> - </span><span style=\"color: #001080\">prior_year</span><span style=\"color: #000000\">) / </span><span style=\"color: #795E26\">nullif</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">last_year</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">order_items</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">category_growth</span></span></pre>"
      }
    ],
    "path": "/documentation/patterns/yoy.malloynb"
  },
  {
    "titles": [
      "Connecting a Database in the VSCode Extension"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Currently, BigQuery, PostgreSQL, and DuckDB are supported.  These instructions assume you have already installed the <a href=\"https://marketplace.visualstudio.com/items?itemName=malloydata.malloy-vscode\">Malloy Extension</a> in VSCode."
      }
    ],
    "path": "/documentation/setup/connection_instructions.malloynb"
  },
  {
    "titles": [
      "Connecting a Database in the VSCode Extension",
      "Adding the Connection in VS Code"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "<em><strong>NOTE:</strong>  DuckDB is natively supported, allowing you to skip these initial steps.</em>"
      },
      {
        "type": "p",
        "text": "Open the VS Code Command Palette (cmd+shift+p on Mac, or ctrl+shift+p on Windows), and type \"malloy connections\". Click on the \"Malloy: Edit Connections\" option that appears. This will take you to the Connection Manager page."
      },
      {
        "type": "p",
        "text": "Click \"New Connection\" and fill out the relevant details. See below for database-specific instructions."
      },
      {
        "type": "p",
        "text": "Press \"Test\" on the connection to confirm that you have successfully connected to the database"
      },
      {
        "type": "p",
        "text": "Hit \"Save,\" then dive into writing Malloy! We recommend starting with one of our Samples, which can be found <a href=\"https://github.com/malloydata/malloy-samples/\">here</a>"
      },
      {
        "type": "p",
        "text": "If you've given your connection a name, that name must be used when referencing a table in your database. If you have not named your connection, the default name <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">bigquery</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">duckdb</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">md</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">snowflake</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">trino</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">presto</span></span></code> or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">postgres</span></span></code>, depending on which database you're connecting to; e.g., <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">bigquery</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;project-id.dataset-id.tablename&#39;</span><span style=\"color: #000000\">)</span></span></code>."
      }
    ],
    "path": "/documentation/setup/connection_instructions.malloynb"
  },
  {
    "titles": [
      "Connecting a Database in the VSCode Extension",
      "DuckDB Parquet and CSV Files (via DuckDB)"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Parquet and CSV files are queryable via DuckDB is available without needing to explicitly configure a connection. Local files can be referenced in a source. This example has the CSV in the same directory as the .malloy model file: <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">baby_names</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;babynames.csv&#39;</span><span style=\"color: #000000\">)</span></span></code> The default name of a DuckDB connection is <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">duckdb</span></span></code>."
      },
      {
        "type": "p",
        "text": "DuckDB also can run in browser only mode. For example."
      },
      {
        "type": "p",
        "text": "Install the Malloy extension"
      },
      {
        "type": "p",
        "text": "Open any of the Malloy files and run queries."
      },
      {
        "type": "p",
        "text": "goto <a href=\"https://github.dev/malloydata/malloy-samples\">https://github.dev/malloydata/malloy-samples</a>"
      },
      {
        "type": "p",
        "text": "You can also specify a DuckDB database by configuring the or adding a DuckDB connection."
      }
    ],
    "path": "/documentation/setup/connection_instructions.malloynb"
  },
  {
    "titles": [
      "Connecting a Database in the VSCode Extension",
      "MotherDuck"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Motherduck is configured simply through a token. In motherduck click on 'settings' then copy token. The token can be set in your environment"
      },
      {
        "type": "p",
        "text": "export set MOTHERDUCK_TOKEN=...."
      },
      {
        "type": "p",
        "text": "Then launch vscode.  For example:"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">hacker_news</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">md</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;sample_data.hn.hacker_news&#39;</span><span style=\"color: #000000\">)</span></span></code>"
      },
      {
        "type": "p",
        "text": "The default name for a Motherduck Connection is <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">md</span></span></code>"
      }
    ],
    "path": "/documentation/setup/connection_instructions.malloynb"
  },
  {
    "titles": [
      "Connecting a Database in the VSCode Extension",
      "BigQuery"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Authenticating to BigQuery can be done either via OAuth (using your Google Cloud Account) or with a Service Account Key downloaded from Google Cloud"
      }
    ],
    "path": "/documentation/setup/connection_instructions.malloynb"
  },
  {
    "titles": [
      "Connecting a Database in the VSCode Extension",
      "BigQuery",
      "Option 1: OAuth using gcloud"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "To access BigQuery with the Malloy Extension, you will need to have a <a href=\"https://cloud.google.com/\">Google Cloud Account</a>, access to BigQuery, and the <a href=\"https://cloud.google.com/sdk/gcloud\">gcloud CLI</a> installed. Once the gcloud CLI is installed, open a terminal and type the following:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-txt\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">gcloud auth login --update-adc</span></span>\n<span class=\"line\"><span style=\"color: #000000\">gcloud config set project {my_project_id} --installation</span></span></pre>"
      },
      {
        "type": "p",
        "text": "<em>Replace <code>{my_project_id}</code> with the <strong>ID</strong> of the BigQuery project you want to use & bill to. If you're not sure what this ID is, open Cloud Console, and click on the dropdown at the top (just to the right of the \"Google Cloud Platform\" text) to view projects you have access to. If you don't already have a project, <a href=\"https://cloud.google.com/resource-manager/docs/creating-managing-projects\">create one</a>.</em>"
      },
      {
        "type": "p",
        "text": "When creating the connection in the VS Code Plugin, you can leave the optional fields blank as it will connect using your gcloud project configuration."
      },
      {
        "type": "p",
        "text": "<em><strong>NOTE:</strong>  The Malloy Extension used the BigQuery Node SDK, which does its best guess at finding credentials stored on your device - it looks in environment variables, and also in places that gcloud is known to store application credentials. There is not necessarily a 1:1 mapping of how <code>gcloud</code> is authenticated and how the BigQuery SDK will authenticate.</em>"
      }
    ],
    "path": "/documentation/setup/connection_instructions.malloynb"
  },
  {
    "titles": [
      "Connecting a Database in the VSCode Extension",
      "BigQuery",
      "Option 2: Service Account"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Add the relevant account information to the new connection, and include the path to the <a href=\"https://cloud.google.com/iam/docs/creating-managing-service-account-keys\">service account key</a>."
      },
      {
        "type": "p",
        "text": "The default name of a BigQuery connection is <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">bigquery</span></span></code>."
      }
    ],
    "path": "/documentation/setup/connection_instructions.malloynb"
  },
  {
    "titles": [
      "Connecting a Database in the VSCode Extension",
      "PostgreSQL"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Add the relevant database connection information. Once you click save, the password (if you have entered one) will be stored in your system keychain."
      },
      {
        "type": "p",
        "text": "The default name of a PostgreSQL connection is <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">postgres</span></span></code>"
      }
    ],
    "path": "/documentation/setup/connection_instructions.malloynb"
  },
  {
    "titles": [
      "Connecting a Database in the VSCode Extension",
      "Snowflake"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Snowflake can be setup to use a connection configured in VSCode or in in a file <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">~/.</span><span style=\"color: #001080\">snowflake</span><span style=\"color: #000000\">/</span><span style=\"color: #001080\">connections</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">toml</span></span></code>."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-txt\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">An example configuration</span></span>\n<span class=\"line\"><span style=\"color: #000000\">[default]</span></span>\n<span class=\"line\"><span style=\"color: #000000\">account = &quot;...&quot;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">user = &quot;...&quot;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">password = &quot;...&quot;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">warehouse=&quot;...&quot;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">database=&quot;...&quot;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">schema=&quot;...&quot;</span></span>\n<span class=\"line\"><span style=\"color: #000000\"></span></span></pre>"
      },
      {
        "type": "p",
        "text": "The default name for a Snowflake connection is <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">snowflake</span></span></code>"
      }
    ],
    "path": "/documentation/setup/connection_instructions.malloynb"
  },
  {
    "titles": [
      "Connecting a Database in the VSCode Extension",
      "Trino"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Trino connections are configured through the VS Code 'Edit Connections' panel."
      },
      {
        "type": "p",
        "text": "The default name for a Trino connection is <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">trino</span></span></code>"
      }
    ],
    "path": "/documentation/setup/connection_instructions.malloynb"
  },
  {
    "titles": [
      "Connecting a Database in the VSCode Extension",
      "Presto"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Presto connections are configured through the VS Code 'Edit Connections' panel."
      },
      {
        "type": "p",
        "text": "The default name for a Presto connection is <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">presto</span></span></code>"
      }
    ],
    "path": "/documentation/setup/connection_instructions.malloynb"
  },
  {
    "titles": [
      "Connecting a Database in the VSCode Extension",
      "MySQL"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "MySQL connections are configured through the environment. Currently, there is no way to configure directly in VSCode.  Set envirnment variables."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-txt\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">MYSQL_PASSWORD=...</span></span>\n<span class=\"line\"><span style=\"color: #000000\">MYSQL_HOST=http://&lt;host&gt;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">MYSQL_PORT=NNNN</span></span>\n<span class=\"line\"><span style=\"color: #000000\">PRESTO_USER=...</span></span>\n<span class=\"line\"><span style=\"color: #000000\">MYSQL_DATABASE=..</span></span></pre>"
      },
      {
        "type": "p",
        "text": "The default name for a MySQL connection is <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">mysql</span></span></code>"
      }
    ],
    "path": "/documentation/setup/connection_instructions.malloynb"
  },
  {
    "titles": [
      "The Malloy Extension"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The <a href=\"https://marketplace.visualstudio.com/items?itemName=malloydata.malloy-vscode\">Malloy Extension</a> is an authoring enironments for Malloy models. It contains helpful features like schema browsing, query running, language auto-complete, help & documentation, and rudimentary visualizations."
      },
      {
        "type": "p",
        "text": "The Extension can be installed anywhere that VS Code runs - either locally on your machine, or in a variety of sites that provide the VS Code interface."
      },
      {
        "type": "p",
        "text": "<em><strong>NOTE:</strong>  Because there are two versions of VS Code - VS Code Desktop and <a href=\"https://code.visualstudio.com/docs/editor/vscode-web\">VS Code Web</a> - there are times when only specific databases are available. When running on a desktop, the Malloy Extension can execute database queries against any supported database, such as BigQuery, PostGres, or DuckDB. When running VS Code Web, the Malloy Extension can only communicate with a browser-based version of DuckDB that comes pre-packaged with the Extension.</em>"
      }
    ],
    "path": "/documentation/setup/extension.malloynb"
  },
  {
    "titles": [
      "The Malloy Extension",
      "Using the Malloy Extension on your Desktop"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "<strong>Add the Malloy Extension</strong>: Open VS Code and click the Extensions button on the far left (it looks like 4 blocks with one flying away). This will open the Extension Marketplace. Search for \"Malloy\" and, once found, click \"Install\""
      },
      {
        "type": "p",
        "text": "<strong>Download Visual Studio Code</strong>: If you don't already have it, download <a href=\"https://code.visualstudio.com/\">Visual Studio Code</a>"
      },
      {
        "type": "p",
        "text": "<strong>Download the <a href=\"https://github.com/malloydata/malloy-samples\">Sample Models</a> from Github</strong>"
      },
      {
        "type": "p",
        "text": "<strong>Open the samples folder in VS Code:</strong> In VS Code, go to File > <strong>Open Folder</strong>... select samples/duckdb > Open. DuckDB is built into the extension so you're ready to run these."
      }
    ],
    "path": "/documentation/setup/extension.malloynb"
  },
  {
    "titles": [
      "The Malloy Extension",
      "Using the Malloy Extension on Google Cloud Shell Editor"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Google Cloud customers have access to a built-in integrated development environment (IDE) running the Desktop version of VS Code, and Malloy can run in this environment access data in BigQuery, Postgres or DuckDB. Running Malloy here only takes a few clicks:"
      },
      {
        "type": "p",
        "text": "<strong>Launch the Google Cloud Shell</strong>"
      },
      {
        "type": "p",
        "text": "Goto <a href=\"https://shell.cloud.google.com\">https://shell.cloud.google.com</a>"
      },
      {
        "type": "p",
        "text": "<strong>Install Malloy Extension & Examples:</strong>\nThe command below will install Malloy into your cloud shell account. Run the following command and replace [PROJECT_ID] with a project where you have permissions to run BigQuery queries (if you open a BigQuery console, you should see the project name on the top line)."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-txt\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">curl -sL \\</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  https://github.com/malloydata/malloy/raw/main/scripts/cloud/update_malloy.sh \\</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  | bash -s [PROJECT_ID]</span></span></pre>"
      },
      {
        "type": "p",
        "text": "<strong>Open the Cloud Shell Editor:</strong>"
      },
      {
        "type": "p",
        "text": "Go to <a href=\"https://ide.cloud.google.com\">https://ide.cloud.google.com</a> and open your \"Home Workspace\"."
      },
      {
        "type": "p",
        "text": "You should see the directory called 'Malloy Samples'."
      },
      {
        "type": "p",
        "text": "<strong>Verify that BigQuery connects correctly:</strong>"
      },
      {
        "type": "p",
        "text": "In the IDE Editor open <code>malloy-samples/bigquery/faa/airports.malloy</code> and scroll down click the 'Run' code lens above one of the queries.  You should see query results."
      },
      {
        "type": "p",
        "text": "<img class=\"small-img\"src=\"./setup_ide_run.png\">"
      }
    ],
    "path": "/documentation/setup/extension.malloynb"
  },
  {
    "titles": [
      "The Malloy Extension",
      "Using the Malloy Extension on Google Cloud Shell Editor",
      "Changing the Project ID"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "If you need to modify the Google CLoud Project ID, open the settings by clicking the lower-left corner gear icon, search for \"project,\" and enter the project ID for Cloudshell:Project"
      },
      {
        "type": "p",
        "text": "<img class=\"small-img\"src=\"./setup_ide_project.png\">"
      }
    ],
    "path": "/documentation/setup/extension.malloynb"
  },
  {
    "titles": [
      "The Malloy Extension",
      "Using the Malloy Extension on github.dev"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "<em><strong>NOTE:</strong> github.dev uses the Web version of VS Code, so it is only possible to interact with local data. If you have data stored in CSVs, JSON files, or Parquet files in your repository, you can query that data in the Malloy Extension directly from your browser</em>"
      },
      {
        "type": "p",
        "text": "If you are logged into Github, any repository on Github can be opened into a web-only VS Code instance with all the files in the repository loaded into your browser memory. Simply press <code>.</code> on the main repo page, or change the url from <code><a href=\"https://github.com/{repo-name}\">https://github.com/{repo-name}</a></code> to <code><a href=\"https://github.dev/{repo-name}\">https://github.dev/{repo-name}</a></code>."
      },
      {
        "type": "p",
        "text": "Once you have opened the repository on github.dev, install the Malloy extension by clicking the Extensions button on the far left (it looks like 4 blocks with one flying away). This will open the Extension Marketplace. Search for \"Malloy\" and, once found, click \"Install\"."
      },
      {
        "type": "p",
        "text": "DuckDB is available without needing to explicitly configure a connection - you can simply reference your local files in the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span></span></code> of the Malloy model, i.e. <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">my_data_table</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;my_file.csv&#39;</span><span style=\"color: #000000\">)</span></span></code>"
      }
    ],
    "path": "/documentation/setup/extension.malloynb"
  },
  {
    "titles": [
      "Malloy Quickstart"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "This guide introduces the basics of querying data and building a semantic model with the Malloy language. By the end of this tutorial, you will understand how to use Malloy to run queries, build re-usable data models, and do analysis on your data that is nearly impossible in SQL."
      },
      {
        "type": "p",
        "text": "The easiest way to follow along is by going to the <a href=\"https://github.dev/malloydata/quickstart/blob/main/README\">interactive notebook version of this tutorial</a>. The link will launch a browser-based VSCode environment and ask you to install the Malloy extension. Once installed, navigate back to the <a href=\"https://github.dev/malloydata/quickstart/blob/main/quickstart\">quickstart notebook file</a>, and dive in."
      },
      {
        "type": "p",
        "text": "If you'd like to run Malloy locally on your laptop instead, follow the setup instructions to <a href=\"../setup/extension\">install the VSCode extension</a> and <a href=\"../setup/connection_instructions\">connect to a database</a>."
      }
    ],
    "path": "/documentation/user_guides/basic.malloynb"
  },
  {
    "titles": [
      "Malloy Quickstart",
      "A Simple Select Statement"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The following query is equivalent to <code>SELECT id, code, city FROM airports LIMIT 10</code> in SQL:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">) -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">id</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">code</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">city</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">10</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Let's break down each part of this query."
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">:</span></span></code> is the opening statement that indicates we're starting to write a query"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">10</span></span></code> limits the result set of the query to the first 10 items."
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">)</span></span></code> defines the source for the query. The <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">()</span></span></code> method creates a source from a table or view in the database."
      },
      {
        "type": "p",
        "text": "The <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">-&gt;</span></span></code> operator begins the query. Queries take the form <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000; font-style: italic\">source</span><span style=\"color: #000000\"> -&gt; { ... }</span></span></code>, with the query logic specified inside of the curly braces."
      },
      {
        "type": "p",
        "text": "A source is similar to a table or view in SQL, but Malloy sources can include additional information like joins and measures. We'll cover this in depth later on."
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">:</span></span></code> is equivalent to <code>SELECT</code> in SQL. In this clause, we select the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">id</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">code</span></span></code>, and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">city</span></span></code> columns from the table."
      }
    ],
    "path": "/documentation/user_guides/basic.malloynb"
  },
  {
    "titles": [
      "Malloy Quickstart",
      "Query Operators"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "In SQL, the <code>SELECT</code> command does two very different things.  A <code>SELECT</code> with a <code>GROUP BY</code> aggregates data according to the <code>GROUP BY</code> clause and produces aggregate calculation against every calculation not in the <code>GROUP BY</code>.  In Malloy, the query operator for this is <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">:</span></span></code>. Calculations involving data in the group are made using <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span></code>."
      },
      {
        "type": "p",
        "text": "The second type of <code>SELECT</code> in SQL does not perform any aggregation;  All rows in the input table, unless filtered in some way, show up in the output table. In Malloy, this command is <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">:</span></span></code>."
      }
    ],
    "path": "/documentation/user_guides/basic.malloynb"
  },
  {
    "titles": [
      "Malloy Quickstart",
      "Query Operators",
      "Aggregate"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "In the query below, the data will be grouped by <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">state</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">county</span></span></code>, and will produce an aggregate calculation for <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">airport_count</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">average_elevation</span></span></code>."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">) -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">county</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">average_elevation</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">elevation</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/basic.malloynb"
  },
  {
    "titles": [
      "Malloy Quickstart",
      "Query Operators",
      "Select"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "A <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">:</span></span></code> statement produces a list of fields. For every row in the input table, there is a row in the output table. This is similar to a simple <code>SELECT</code> statement in SQL with no aggregations."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">) -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">code</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">full_name</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">city</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">county</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">county</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;SANTA CRUZ&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">10</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "For the most part, operations can be placed in any order within a query. A <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">where</span></span></code> can come before or after a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">project</span></span></code>, and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">limit</span></span></code> can be placed anywhere as well. The above query could also be written:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">) -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">10</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">county</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;SANTA CRUZ&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">code</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">full_name</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">city</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">county</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/basic.malloynb"
  },
  {
    "titles": [
      "Malloy Quickstart",
      "Everything has a Name"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "In Malloy, all output fields have names. This means that any time a query\nincludes a field with a calculated value, like a scalar or aggregate function,\nit must be named <em>(unlike SQL, which allows un-named expressions)</em>."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">) -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">max_elevation</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">max</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">elevation</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Notice that Malloy uses the form <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">name</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">value</span></span></code> instead of SQL's <code>value AS name</code>.\nHaving the output column name written first makes it easier for someone reading\nthe code to visualize the resulting query structure."
      },
      {
        "type": "p",
        "text": "Named objects, like columns from a table or fields defined in a source, can be included in field lists without an <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">is</span></span></code>:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">) -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">full_name</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">elevation</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/basic.malloynb"
  },
  {
    "titles": [
      "Malloy Quickstart",
      "Expressions"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Many SQL expressions will work unchanged in Malloy, and many functions available in Standard SQL are usable in Malloy as well. This makes expressions fairly straightforward to understand, given a knowledge of SQL."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">) -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">county_and_state</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">county</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39;, &#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">state</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">max_elevation</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">max</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">elevation</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">min_elevation</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">min</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">elevation</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">avg_elevation</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">elevation</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "The basic types of Malloy expressions are <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">string</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">number</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">boolean</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">date</span></span></code>, and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">timestamp</span></span></code>."
      }
    ],
    "path": "/documentation/user_guides/basic.malloynb"
  },
  {
    "titles": [
      "Malloy Quickstart",
      "Sources: the Basic Structure for Modeling and Reuse"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "One of the main benefits of Malloy is the ability to save common calculations into a data model. The data model is made of <em>sources</em>, which can be thought of as tables or views, but with additional information, such as joins, dimensions and measures."
      },
      {
        "type": "p",
        "text": "In the example below, we create a <em>source</em> object named <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">airports</span></span></code> and add a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">dimension</span></span></code> calculation for <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">county_and_state</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">measure</span></span></code> calculation for <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">airport_count</span></span></code>.  Dimensions can be used in <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">group_by</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">project</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">where</span></span></code>.  Measures can be used in <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">aggregate</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">having</span></span></code>."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">county_and_state</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">county</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39;, &#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">state</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">average_elevation</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">elevation</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": ">>>malloy\nrun: airports -> {\ngroup_by: county_and_state\naggregate: airport_count\n}"
      },
      {
        "type": "p",
        "text": "Sources that are defined in one file can be imported into another using <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&quot;path/to/some/file.malloy&quot;</span></span></code>. For example, if the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">airports</span></span></code> source above were defined in a file called <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">flights</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">malloy</span></span></code>, you could create a new file that imports it and immediately start using the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">airports</span></span></code> source:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&quot;airports.malloy&quot;</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">county_and_state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">average_elevation</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Sources can also contain named views. These views are useful for building nested queries (covered later) or for saving a query operation so it can re-used again and again without having to rewrite it."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports_with_named_query</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">county_and_state</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">county</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39;, &#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">state</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">average_elevation</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">elevation</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">top_county_and_state</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">county_and_state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">:</span><span style=\"color: #098658\">10</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #008000\">// The view can now be referenced by name </span></span>\n<span class=\"line\"><span style=\"color: #008000\">// and run without having to rewrite the logic:</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports_with_named_query</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">top_county_and_state</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/basic.malloynb"
  },
  {
    "titles": [
      "Malloy Quickstart",
      "Joins"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "<a href=\"../language/join\">Joins</a> are declared as part of a source. When joining a source to another, it brings with it all child joins."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">aircraft_models</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/aircraft_models.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">primary_key</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">aircraft_model_code</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">aircraft</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/aircraft.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">primary_key</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">tail_num</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">aircraft_models</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">on</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">aircraft_model_code</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">aircraft_models</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">aircraft_model_code</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">aircraft</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">on</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">tail_num</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">aircraft</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">tail_num</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\"> ? </span><span style=\"color: #098658\">@2003-01</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">aircraft</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">aircraft_models</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">manufacturer</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">aircraft_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">aircraft</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">average_seats_per_model</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">aircraft</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">aircraft_models</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">seats</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "In this example, the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">aircraft</span></span></code> source is joined to <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">flights</span></span></code>, and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">aircraft_models</span></span></code> is joined via <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">aircraft</span></span></code>. These examples explicitly name both keys—this same syntax can be used to write more complex joins."
      },
      {
        "type": "p",
        "text": "Now, any query that uses the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">flights</span></span></code> source has access to fields in both <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">aircraft</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">aircraft_models</span></span></code> without having to explicitly specify the join condition. The joins are specified once in the source, and usable by any query on <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">flights</span></span></code>."
      },
      {
        "type": "p",
        "text": "An ad hoc join can also be specified in a query block. In the query below, we join in the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">airports</span></span></code> table using the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">destination</span></span></code> column as a join key, then compute the top 5 destination airports by flight count."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports2</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights2</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports2</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">on</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">destination</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">airports2</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">code</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights2</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports2</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">full_name</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">5</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/basic.malloynb"
  },
  {
    "titles": [
      "Malloy Quickstart",
      "Filtering"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "When working with data, filtering is something you do in almost every query. Malloy provides consistent syntax for filtering everywhere within a query. The most basic type of filter is applied using a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">:</span></span></code> clause, very similar to a <code>WHERE</code> clause in SQL."
      },
      {
        "type": "p",
        "text": "The following query grabs the top 5 counties in California with the highest airport count:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">) -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;CA&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">5</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">county</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Filters can also be applied to sources:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports_in_california</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;CA&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports_in_california</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">5</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">county</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Any query run on the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">airports_in_california</span></span></code> source will run against the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">airports</span></span></code> table, and always include the filter in <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">state</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;CA&#39;</span></span></code>."
      }
    ],
    "path": "/documentation/user_guides/basic.malloynb"
  },
  {
    "titles": [
      "Malloy Quickstart",
      "Filtering",
      "Filtering Measures"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "A filter on an aggregate calculation (a <em>measure</em>) narrows down the data used in that specific calculation. In the example below, the calculations for <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">airports</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">heliports</span></span></code> are filtered separately."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">) -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">() { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">fac_type</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;AIRPORT&#39;</span><span style=\"color: #000000\"> }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">heliports</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">() { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">fac_type</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;HELIPORT&#39;</span><span style=\"color: #000000\"> }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">total</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "In SQL, this same calculation is often done using <code>CASE</code> statements inside of the aggregates, which is verbose and difficult to read. A query like the above would look like:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-sql\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">SELECT</span></span>\n<span class=\"line\"><span style=\"color: #000000\">   </span><span style=\"color: #0000FF\">state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">   , </span><span style=\"color: #795E26\">SUM</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">CASE</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">WHEN</span><span style=\"color: #000000\"> fac_type = </span><span style=\"color: #A31515\">&#39;AIRPORT&#39;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">THEN</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">ELSE</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">END</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">AS</span><span style=\"color: #000000\"> airports</span></span>\n<span class=\"line\"><span style=\"color: #000000\">   , </span><span style=\"color: #795E26\">SUM</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">CASE</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">WHEN</span><span style=\"color: #000000\"> fac_type = </span><span style=\"color: #A31515\">&#39;HELIPORT&#39;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">THEN</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">ELSE</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">END</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">AS</span><span style=\"color: #000000\"> heliports</span></span>\n<span class=\"line\"><span style=\"color: #000000\">   , </span><span style=\"color: #795E26\">COUNT</span><span style=\"color: #000000\">(*) </span><span style=\"color: #0000FF\">AS</span><span style=\"color: #000000\"> total</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">FROM</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">`malloy-data.faa.airports`</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">GROUP BY</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">state</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/basic.malloynb"
  },
  {
    "titles": [
      "Malloy Quickstart",
      "Nested Queries"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The next several examples will use this simple source definition:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">};</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/basic.malloynb"
  },
  {
    "titles": [
      "Malloy Quickstart",
      "Nested Queries",
      "Nested Views"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "In Malloy, views can be <a href=\"../language/nesting\">nested</a> to produce a nested query with subtables on each output row."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_facility</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\">  {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">fac_type</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">3</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Here we can see that the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">by_facility</span></span></code> column of the output table contains a nested subtable on each row. <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">by_facility</span></span></code> contains the counts for the top 3 facility types for each state, i.e., the number of airports, heliports, and stolports in Texas, the number of airports, heliports, and seaplane bases in California, etc."
      },
      {
        "type": "p",
        "text": "When a view is nested inside another view, each output row of the outer view will have a nested table for the inner view which only includes data limited to that row."
      },
      {
        "type": "p",
        "text": "Views can be nested infinitely, allowing for rich, complex output structures. A view may always include another nested view, regardless of depth."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">top_5_counties</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\">  {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">5</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">county</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_facility</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\">  {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">fac_type</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/basic.malloynb"
  },
  {
    "titles": [
      "Malloy Quickstart",
      "Nested Queries",
      "Filtering Nested Views"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Filters can be isolated to any level of nesting. In the following example, we limit the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">major_facilities</span></span></code> view to only airports where <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">major</span></span></code> is <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">&#39;Y&#39;</span></span></code>. This particular filter applies <em>only</em> to <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">major_facilities</span></span></code>, and not to other parts of the outer query."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;CA&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">county</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">major_facilities</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\">  {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">major</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;Y&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">name</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">code</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39; (&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">full_name</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39;)&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_facility</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\">  {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">fac_type</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/basic.malloynb"
  },
  {
    "titles": [
      "Malloy Quickstart",
      "Dates and Timestamps"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Working with time in data is often needlessly complex; Malloy has built in constructs to simplify many time-related operations. This section gives a brief introduction to some of these tools, but for more details see the <a href=\"../language/time-ranges\">Time Ranges</a> section."
      }
    ],
    "path": "/documentation/user_guides/basic.malloynb"
  },
  {
    "titles": [
      "Malloy Quickstart",
      "Dates and Timestamps",
      "Time Literals"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Literals of type <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">date</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">timestamp</span></span></code> are notated with an <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">@</span></span></code>, e.g. <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #098658\">@2003-03-29</span></span></code> or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #098658\">@1994-07-14 10:23:59</span></span></code>. Similarly, years (<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #098658\">@2021</span></span></code>), quarters (<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #098658\">@2020-Q1</span></span></code>), months (<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #098658\">@2019-03</span></span></code>), weeks (<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">@</span><span style=\"color: #001080\">WK2021</span><span style=\"color: #000000\">-</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">8-</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">1</span></span></code>), and minutes (<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #098658\">@2017-01-01 10:53</span></span></code>) can be expressed."
      },
      {
        "type": "p",
        "text": "Time literals can be used as values, but are more often useful in filters. For example, the following query\nshows the number of flights in 2003."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\"> ? </span><span style=\"color: #098658\">@2003</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "There is a special time literal <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">now</span></span></code>, referring to the current timestamp, which allows for relative time filters."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\"> &gt; </span><span style=\"color: #001080\">now</span><span style=\"color: #000000\"> - </span><span style=\"color: #098658\">6</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">hours</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights_last_6_hours</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/basic.malloynb"
  },
  {
    "titles": [
      "Malloy Quickstart",
      "Dates and Timestamps",
      "Truncation"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Time values can be truncated to a given timeframe, which can be <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">second</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">minute</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">hour</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">day</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">week</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">month</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">quarter</span></span></code>, or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">year</span></span></code>."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">flight_year</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">year</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">flight_month</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">month</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/basic.malloynb"
  },
  {
    "titles": [
      "Malloy Quickstart",
      "Dates and Timestamps",
      "Extraction"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Numeric values can be extracted from time values, e.g. <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">day_of_year</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">some_date</span><span style=\"color: #000000\">)</span></span></code> or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">minute</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">some_time</span><span style=\"color: #000000\">)</span></span></code>. See the full list of extraction functions <a href=\"../language/timestamp-operations#extraction\">here</a>."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">1</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">day_of_week</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">day</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/basic.malloynb"
  },
  {
    "titles": [
      "Malloy Quickstart",
      "Dates and Timestamps",
      "Time Ranges"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Two kinds of time ranges are given special syntax: the range between two times and the range starting at some time for some duration. These are represented like <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #098658\">@2003</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">to</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">@2005</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #098658\">@2004-Q1</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">for</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">6</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">quarters</span></span></code> respectively. These ranges can be used in filters just like time literals."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\"> ? </span><span style=\"color: #098658\">@2003</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">to</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">@2005</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Time literals and truncations can also behave like time ranges. Each kind of time literal has an implied duration that takes effect when it is used in a comparison, e.g. <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #098658\">@2003</span></span></code> represents the whole of the year 2003, and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #098658\">@2004-Q1</span></span></code> lasts the whole 3 months of the quarter. Similarly, when a time value is truncated, it takes on the\ntimeframe from the truncation, e.g. <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">now</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">month</span></span></code> means the entirety of the current month."
      },
      {
        "type": "p",
        "text": "When a time range is used in a comparison, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">=</span></span></code> checks for \"is in the range\", <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">&gt;</span></span></code> \"is after\", and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">&lt;</span></span></code> \"is before.\" So <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">some_time</span><span style=\"color: #000000\"> &gt; </span><span style=\"color: #098658\">@2003</span></span></code> filters dates starting on January 1, 2004, while <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">some_time</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">@2003</span></span></code> filters to dates in the year 2003."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\"> &gt; </span><span style=\"color: #098658\">@2003</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">3</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">departure_date</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">asc</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">departure_date</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">day</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/basic.malloynb"
  },
  {
    "titles": [
      "Malloy Quickstart",
      "Pipelines and Multi-stage Queries"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The output from one stage of a query can be passed into another stage using <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">-&gt;</span></span></code>. For example, we'll start with this query which outputs, for California and New York, the total number of airports, as well as the number of airports in each county."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;CA&#39;</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">&#39;NY&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_county</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\">  {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">county</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Next, we'll use the output of that query as the input to another, where we determine which counties have the highest\npercentage of airports compared to the whole state, taking advantage of the nested structure of the data to to so."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;CA&#39;</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">&#39;NY&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_county</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\">  {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">county</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">} -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">10</span><span style=\"color: #000000\">; </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">4</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">desc</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">by_county</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">county</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">airports_in_county</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">by_county</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">airports_in_state</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\"># percent</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">percent_in_county</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">by_county</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\"> / </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/basic.malloynb"
  },
  {
    "titles": [
      "Malloy Quickstart",
      "Aggregate Locality"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "When computing <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">sum</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">avg</span></span></code>, and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">count</span></span></code> on fields in joined sources with one-to-many relationships, Malloy will automatically handle the duplication of rows that occurs in the join, and compute accurate aggregations on the fanned-out table. See the <a href=\"../language/aggregates#aggregate-locality\">Aggregate Locality</a> section for more information."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">aircraft</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// The average number of seats on models of registered aircraft</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">models_avg_seats</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">aircraft_models</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">seats</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// The average number of seats on registered aircraft</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">aircraft_avg_seats</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">aircraft_models</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">seats</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/basic.malloynb"
  },
  {
    "titles": [
      "Malloy Quickstart",
      "Comments"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy code can include both line and block comments. Line comments, which begin with <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #008000\">--</span></span></code> or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #008000\">//</span></span></code>,\nmay appear anywhere within a line, and cause all subsequent characters on that line to be ignored.\nBlock comments, which are enclosed between <code>/*</code> and <code>*/</code>, cause all enclosed characters to be ignored\nand may span multiple lines."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #008000\">--  The total number of flight entries</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">// Defined simply as `count()`</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #008000\">/*</span></span>\n<span class=\"line\"><span style=\"color: #008000\"> * A comparison of the total number of flights</span></span>\n<span class=\"line\"><span style=\"color: #008000\"> * for each of the tracked carriers.</span></span>\n<span class=\"line\"><span style=\"color: #008000\"> */</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">/* , total_distance */</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/basic.malloynb"
  },
  {
    "titles": [
      "Malloy Quickstart",
      "Ordering and Limiting"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "In Malloy, ordering and limiting work pretty much the same way they do in SQL, though Malloy introduces some <a href=\"../language/order_by\">reasonable defaults</a>."
      },
      {
        "type": "p",
        "text": "The <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">:</span></span></code> statement limits the number of rows returned. Results below are sorted by the first measure descending—in this case, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">airport_count</span></span></code>."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">) -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">2</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Default ordering can be overridden with <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">:</span></span></code>, as in the following query, which shows the states in alphabetical order.  <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">:</span></span></code> can take a field index number or the name of a field."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">) -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/basic.malloynb"
  },
  {
    "titles": [
      "Malloy Quickstart",
      "Next Steps"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "This was a whirlwind tour of the syntax and features of Malloy. To continue on your Malloy journey:"
      },
      {
        "type": "p",
        "text": "Explore sample analyses and data models built in Malloy in our <a href=\"https://github.com/malloydata/patterns\">Patterns Github repo</a>."
      },
      {
        "type": "p",
        "text": "Learn how to <a href=\"../setup/connection_instructions\">connect Malloy to your own database</a>."
      },
      {
        "type": "p",
        "text": "Join the <a href=\"/slack\">Malloy community Slack channel</a>!"
      }
    ],
    "path": "/documentation/user_guides/basic.malloynb"
  },
  {
    "titles": [
      "Building Semantic Data Models in Malloy"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "This document will assumes a working knowledge of SQL and will rapidly take you through some of\nMalloy's key language features."
      }
    ],
    "path": "/documentation/user_guides/malloy_by_example.malloynb"
  },
  {
    "titles": [
      "Building Semantic Data Models in Malloy",
      "Using this Guide"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "For every Malloy Query you can see the formatted result, or raw result as JSON, or the SQL used to produce the result."
      },
      {
        "type": "p",
        "text": "Click tab to to see the  HTML, JSON or SQL result:  <img src=\"https://user-images.githubusercontent.com/1093458/154121968-6436d94e-94b2-4f16-b982-bf136a3fcf40.png\" style=\"width:142px\"> 👈👈"
      }
    ],
    "path": "/documentation/user_guides/malloy_by_example.malloynb"
  },
  {
    "titles": [
      "Building Semantic Data Models in Malloy",
      "SQL SELECT vs Malloy's <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">:</span></span></code>"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The statement to run a query in Malloy is <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">:</span></span></code>. There are two types of queries in Malloy, reductions which have <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">:</span></span></code> or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span></code> statements, and projections which have <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">:</span></span></code> statements and do not group or aggregate results."
      }
    ],
    "path": "/documentation/user_guides/malloy_by_example.malloynb"
  },
  {
    "titles": [
      "Building Semantic Data Models in Malloy",
      "SQL SELECT vs Malloy's <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">:</span></span></code>",
      "Projection: SELECT with no GROUP BY"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "In SQL"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-sql\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">SELECT</span><span style=\"color: #000000\"> code, full_name, </span><span style=\"color: #0000FF\">state</span><span style=\"color: #000000\">, faa_region, fac_type, elevation</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">FROM</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">`malloy-data.faa.airports`</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">ORDER BY</span><span style=\"color: #000000\"> code</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Equivalent in Malloy"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">) -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">code</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">full_name</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">state</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">faa_region</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">fac_type</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">elevation</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">code</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/malloy_by_example.malloynb"
  },
  {
    "titles": [
      "Building Semantic Data Models in Malloy",
      "SQL SELECT vs Malloy's <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">:</span></span></code>",
      "Reduction: SELECT with GROUP BY and/or aggregation"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "In SQL"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-sql\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">SELECT</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  base.fac_type </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> fac_type,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">COUNT</span><span style=\"color: #000000\">( </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> airport_count</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">FROM</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">`malloy-data.faa.airports`</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> base</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">WHERE</span><span style=\"color: #000000\"> base.state=</span><span style=\"color: #A31515\">&#39;CA&#39;</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">GROUP BY</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">ORDER BY</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">desc</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Equivalent in Malloy"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">) -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">fac_type</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;CA&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">desc</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/malloy_by_example.malloynb"
  },
  {
    "titles": [
      "Building Semantic Data Models in Malloy",
      "Source: A data source for queries"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy separates a query's view from the source of the data. A source can be thought of as a table and a collection of computations and relationships which are relevant to that table.  (<a href=\"../language/source\">Source Documentation</a>)."
      },
      {
        "type": "p",
        "text": "<a href=\"../language/fields\">Fields</a> can be defined as part of a source."
      },
      {
        "type": "p",
        "text": "A <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">:</span></span></code> is a declared aggregate calculation (think function that operates across the table) which can be used in <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span></code> elements in a query stage"
      },
      {
        "type": "p",
        "text": "A <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">:</span></span></code> is a declared scalar calculation which that can be used in <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">:</span></span></code> or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">:</span></span></code> elements of a query stage"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">elevation_in_meters</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">elevation</span><span style=\"color: #000000\"> * </span><span style=\"color: #098658\">0.3048</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state_and_county</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">state</span><span style=\"color: #000000\">,</span><span style=\"color: #A31515\">&#39; - &#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">county</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">avg_elevation_in_meters</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">elevation_in_meters</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/malloy_by_example.malloynb"
  },
  {
    "titles": [
      "Building Semantic Data Models in Malloy",
      "Querying Against a Source"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Queries can be run against <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">:</span></span></code> objects and can utilize the modeled fields from that source, as well as introduce new ones. (<a href=\"../language/query\">Query Documentation</a>)"
      },
      {
        "type": "p",
        "text": "<em>using the above declared <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">airports</span></span></code> source</em>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">10</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">fac_type</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;HELIPORT&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\">           </span><span style=\"color: #008000\">// &lt;-- declared in source</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">avg_elevation_in_meters</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">// &lt;-- declared in source</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/malloy_by_example.malloynb"
  },
  {
    "titles": [
      "Building Semantic Data Models in Malloy",
      "Dimensional calculations are no different from columns"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "<em>using the above declared <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">airports</span></span></code> source</em>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state_and_county</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">// &lt;-- declared in source</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">desc</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/malloy_by_example.malloynb"
  },
  {
    "titles": [
      "Building Semantic Data Models in Malloy",
      "Defining Views in a Source"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "A source can also contain a set of useful views relating to that source, which can be run in queries."
      },
      {
        "type": "p",
        "text": "<em>using the above declared <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">airports</span></span></code> source</em>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports2</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_state</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {        </span><span style=\"color: #008000\">// &lt;-- can be called by name</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/malloy_by_example.malloynb"
  },
  {
    "titles": [
      "Building Semantic Data Models in Malloy",
      "Defining Views in a Source",
      "Executing Views"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The simplest form of a query in Malloy is the name of a source, the query operator <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">-&gt;</span></span></code>, and the name of one of its contained views."
      },
      {
        "type": "p",
        "text": "<em>using the above declared <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">airports</span></span></code> source</em>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports2</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">by_state</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/malloy_by_example.malloynb"
  },
  {
    "titles": [
      "Building Semantic Data Models in Malloy",
      "Filtering a Source"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "You can filter a source by adding a filter expression using the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">:</span></span></code> keyword in an extension. In this example, we filter an existing <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">airports</span></span></code> source and then use this extended version to execute the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">by_state</span></span></code> view in a query. For more information on filtering, see the <a href=\"../language/filters\">Filters</a> section."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports2</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">fac_type</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;SEAPLANE BASE&#39;</span><span style=\"color: #000000\">   </span><span style=\"color: #008000\">// &lt;- run the query with an added filter</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"><span style=\"color: #000000\">-&gt; </span><span style=\"color: #001080\">by_state</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/malloy_by_example.malloynb"
  },
  {
    "titles": [
      "Building Semantic Data Models in Malloy",
      "Filtering Measures"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The input to an aggregate computation can be filtered."
      },
      {
        "type": "p",
        "text": "<em>using the above declared <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">airports</span></span></code> source</em>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">heliport_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\"> { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">fac_type</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;HELIPORT&#39;</span><span style=\"color: #000000\"> } </span><span style=\"color: #008000\">// &lt;-- add a filter</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/malloy_by_example.malloynb"
  },
  {
    "titles": [
      "Building Semantic Data Models in Malloy",
      "Composing with Views"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "For the next section assume the following source declaration."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports3</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">avg_elevation</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">elevation</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">top_5_states</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">5</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_facility_type</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">fac_type</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/malloy_by_example.malloynb"
  },
  {
    "titles": [
      "Building Semantic Data Models in Malloy",
      "The <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">:</span></span></code> property embeds one view in another"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy allows you to create nested subtables easily in a query.\nIn the case below, the top level view groups by state and the nested view groups by facility type.\nThis mechanism is really useful for understanding data and creating complex data structures. (<a href=\"../language/nesting\">Nesting Documentation</a>)"
      },
      {
        "type": "p",
        "text": "<em>using the above declared <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">airports</span></span></code> source</em>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports3</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">5</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_facility_type</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\">  {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">fac_type</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Queries can contain multiple nested views."
      },
      {
        "type": "p",
        "text": "<em>using the above declared <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">airports</span></span></code> source</em>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports3</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">faa_region</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">top_5_states</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_facility_type</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Views can be nested to any level of depth."
      },
      {
        "type": "p",
        "text": "<em>using the above declared <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">airports</span></span></code> source</em>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports3</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">faa_region</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_state_and_county</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\">  {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_county</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\">  {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">county</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">4</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_facility_type</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/malloy_by_example.malloynb"
  },
  {
    "titles": [
      "Building Semantic Data Models in Malloy",
      "Refining a View"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The gesture <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">+ { </span><span style=\"color: #000000; font-style: italic\">refinements</span><span style=\"color: #000000\"> }</span></span></code> allows you to base a new view on an existing view while adding new refinements to the query terms."
      },
      {
        "type": "p",
        "text": "For example we can add a limit and an order by to <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">by_state</span></span></code>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports2</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">by_state</span><span style=\"color: #000000\"> + {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">desc</span><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// &lt;-- add order by to query</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">2</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "is the same as"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">desc</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">2</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/malloy_by_example.malloynb"
  },
  {
    "titles": [
      "Building Semantic Data Models in Malloy",
      "Refining a View",
      "You can add a measure or dimension"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports3</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">by_facility_type</span><span style=\"color: #000000\"> + {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">avg_elevation</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/malloy_by_example.malloynb"
  },
  {
    "titles": [
      "Building Semantic Data Models in Malloy",
      "Refining a View",
      "You can nest another view"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports3</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">top_5_states</span><span style=\"color: #000000\"> + {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_facility_type</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Changing the inner and outer query in the example above reveals very different information."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports3</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">by_facility_type</span><span style=\"color: #000000\"> + {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">top_5_states</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/malloy_by_example.malloynb"
  },
  {
    "titles": [
      "Building Semantic Data Models in Malloy",
      "Joining"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "First let's model some simple tables... (<a href=\"../language/join\">Join Documentation</a>)"
      }
    ],
    "path": "/documentation/user_guides/malloy_by_example.malloynb"
  },
  {
    "titles": [
      "Building Semantic Data Models in Malloy",
      "Joining",
      "Carrier table"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "<em>simple source declaration used in example below</em>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/carriers.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">: *</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/malloy_by_example.malloynb"
  },
  {
    "titles": [
      "Building Semantic Data Models in Malloy",
      "Joining",
      "Flights table"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "<em>simple source declaration used in example below</em>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">id2</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">tail_num</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">origin</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">destination</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">distance</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">dep_delay</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">10</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/malloy_by_example.malloynb"
  },
  {
    "titles": [
      "Building Semantic Data Models in Malloy",
      "Declare a Join"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Join carriers to flights.  Each flight has one carrier so we use <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">:</span></span></code>.\n(<a href=\"../language/join\">Join Documentation</a>)"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carriers2</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/carriers.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights2</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carriers2</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">on</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">carriers2</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">code</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">total_distance</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">distance</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">avg_distance</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">distance</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/malloy_by_example.malloynb"
  },
  {
    "titles": [
      "Building Semantic Data Models in Malloy",
      "Declare a Join",
      "Query the joined tables"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "<em>using the above declared <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">flights</span></span></code> source</em>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights2</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carriers2</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">nickname</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">total_distance</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">avg_distance</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/malloy_by_example.malloynb"
  },
  {
    "titles": [
      "Building Semantic Data Models in Malloy",
      "Aggregates can be computed from anywhere in the Join Tree"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "(<a href=\"../language/aggregates\">Aggregate Documentation</a>)"
      },
      {
        "type": "p",
        "text": "<em>using the above declared <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">flights</span></span></code> source</em>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights2</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">10</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">origin</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carriers2</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">carrier_count</span><span style=\"color: #000000\">   </span><span style=\"color: #008000\">// &lt;-- calculation in joined table</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">top_3_carriers</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\">  {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">3</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carriers2</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">nickname</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">total_distance</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">avg_distance</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/malloy_by_example.malloynb"
  },
  {
    "titles": [
      "Building Semantic Data Models in Malloy",
      "More Complex Joins"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The most common join pattern is a foreign key join. Malloy uses the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">with</span><span style=\"color: #000000\">:</span></span></code>\nto declare these and generates more efficient SQL when these joins are used."
      },
      {
        "type": "p",
        "text": "In the example below, we use a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">with</span><span style=\"color: #000000\">:</span></span></code> join for <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">carriers</span></span></code> and then model the more complex relationship with the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">flights</span></span></code> originating from each <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">airport</span></span></code> using  <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">on</span><span style=\"color: #000000\">:</span></span></code>."
      },
      {
        "type": "p",
        "text": "Many <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">flights</span></span></code> have the same\n<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">airport</span></span></code> as their origin so we use <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">join_many</span><span style=\"color: #000000\">:</span></span></code>."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carriers4</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/carriers.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">primary_key</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">code</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights4</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carriers4</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">with</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// &lt;-- each flight has 1 carrier</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">total_distance</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">distance</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">avg_distance</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">distance</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports4</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">join_many</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights4</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">on</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">code</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">flights4</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">origin</span><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// &lt;-- each airport has many flights</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">elevation_in_meters</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">elevation</span><span style=\"color: #000000\"> * </span><span style=\"color: #098658\">0.3048</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">avg_elevation_in_meters</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">elevation_in_meters</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_state</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/malloy_by_example.malloynb"
  },
  {
    "titles": [
      "Building Semantic Data Models in Malloy",
      "Calculations work properly regardless of where you are in the graph"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "This query is very difficult to express in SQL. Malloy's understanding of source relationships allows it to compute aggregate computations at any node of the join path, unlike SQL which can only do aggregate computation at the. outermost level.\n(<a href=\"../language/aggregates\">Aggregate Documentation</a>)"
      },
      {
        "type": "p",
        "text": "<em>using the above declared <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">airports</span></span></code> source</em>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports4</span><span style=\"color: #000000\"> -&gt;  {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">flights4</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">carriers4</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">carrier_count</span><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// &lt;-- 3 levels</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">flights4</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">flights4</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">total_distance</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">avg_elevation_in_meters</span><span style=\"color: #000000\">         </span><span style=\"color: #008000\">// &lt;-- symmetric calculation</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/malloy_by_example.malloynb"
  },
  {
    "titles": [
      "Building Semantic Data Models in Malloy",
      "Pipelines"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The output of a query can be used as the source for the next query."
      },
      {
        "type": "p",
        "text": "<em>Assume the following query as a starting point.</em>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports5</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports5</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">fac_type</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;HELIPORT&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">top_3_county</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">3</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">county</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/malloy_by_example.malloynb"
  },
  {
    "titles": [
      "Building Semantic Data Models in Malloy",
      "Un-nesting in a pipeline flattens the table"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Queries can be chained together (pipelined), the output of one becoming the input of the next one, by simply adding another <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">-&gt;</span></span></code> operator and a new query definition."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports6</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports6</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">fac_type</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;HELIPORT&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">top_3_county</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">3</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">county</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">} -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">top_3_county</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">county</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">airports_in_state</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">airports_in_county</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">top_3_county</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">percent_of_state</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">top_3_county</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\"> / </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/malloy_by_example.malloynb"
  },
  {
    "titles": [
      "Building Semantic Data Models in Malloy",
      "Pipelines can be named as views in sources"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Pipelines can do pretty complex things.  They can be built into source objects."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports7</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">county_rollup</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">fac_type</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;HELIPORT&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">top_3_county</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">3</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">county</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  } -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">top_3_county</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">county</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">airports_in_state</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">airports_in_county</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">top_3_county</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">percent_of_state</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">top_3_county</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\">/</span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports7</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">county_rollup</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/malloy_by_example.malloynb"
  },
  {
    "titles": [
      "Building Semantic Data Models in Malloy",
      "Extending Sources"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Similar to query refinement, a source can be extended with the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> { ... }</span></span></code> gesture to create a new version of the source with additional properties."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #000000; font-style: italic\">new name</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #000000; font-style: italic\">old name</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #000000; font-style: italic\">some data limit</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #000000; font-style: italic\">new field declarations</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/malloy_by_example.malloynb"
  },
  {
    "titles": [
      "Building Semantic Data Models in Malloy",
      "Sources based on Queries"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Sometimes it is helpful to pre-process data before modeling it out with a source. To do this, you can first define a model-level query using a <a href=\"../language/statement#query-statements\">query statement</a>, then <a href=\"../language/source#source-extensions\">extend</a> the query to add reusable definitions."
      }
    ],
    "path": "/documentation/user_guides/malloy_by_example.malloynb"
  },
  {
    "titles": [
      "Building Semantic Data Models in Malloy",
      "Sources based on Queries",
      "Model-Level Queries"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Here, we define a model-level query <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">q_airport_facts</span></span></code> based on the <code>flights.parquet</code> table."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">query</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">q_airport_facts</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">flight_year</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">year</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">origin</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">num_flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">distance</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">distance</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">q_airport_facts</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">query</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">q_airport_facts2</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">flight_year</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">year</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">origin</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">num_flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">distance</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">distance</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/malloy_by_example.malloynb"
  },
  {
    "titles": [
      "Building Semantic Data Models in Malloy",
      "Sources based on Queries",
      "Source based on a query"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Next, we can define a source based on <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">q_airport_facts</span></span></code> to add reusable fields and source-level queries."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_facts</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">q_airport_facts</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">num_flights</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">total_distance</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">distance</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights_by_year</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_year</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">carrier_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">origin_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">origin</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights_by_origin</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">origin</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">carrier_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/malloy_by_example.malloynb"
  },
  {
    "titles": [
      "Building Semantic Data Models in Malloy",
      "Sources based on Queries",
      "Querying the Summary source"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_facts</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">flights_by_origin</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/malloy_by_example.malloynb"
  },
  {
    "titles": [
      "Building Semantic Data Models in Malloy",
      "Other Interesting Language Features:"
    ],
    "paragraphs": [],
    "path": "/documentation/user_guides/malloy_by_example.malloynb"
  },
  {
    "titles": [
      "Building Semantic Data Models in Malloy",
      "Other Interesting Language Features:",
      "SQL Sources"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "See the <a href=\"../language/sql_sources\">SQL Sources</a> section."
      }
    ],
    "path": "/documentation/user_guides/malloy_by_example.malloynb"
  },
  {
    "titles": [
      "Building Semantic Data Models in Malloy",
      "Other Interesting Language Features:",
      "Embedding Malloy queries in SQL (<a href=\"../language/sql_blocks#embedding-malloy-queries-in-an-sql-block-turducken-\">SQL Block Documentation</a>)"
    ],
    "paragraphs": [],
    "path": "/documentation/user_guides/malloy_by_example.malloynb"
  },
  {
    "titles": [
      "Building Semantic Data Models in Malloy",
      "Other Interesting Language Features:",
      "Case statement improved with  <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0000FF\">pick</span></span></code> (<a href=\"../language/expressions#pick-expressions\">Expression Documentation</a>)"
    ],
    "paragraphs": [],
    "path": "/documentation/user_guides/malloy_by_example.malloynb"
  },
  {
    "titles": [
      "Building Semantic Data Models in Malloy",
      "Other Interesting Language Features:",
      "Group by on Joined Subtrees"
    ],
    "paragraphs": [],
    "path": "/documentation/user_guides/malloy_by_example.malloynb"
  },
  {
    "titles": [
      "Building Semantic Data Models in Malloy",
      "Other Interesting Language Features:",
      "Date/Timestamp filters and Timezones (<a href=\"../language/expressions#time-ranges\">Time Documentation</a>)"
    ],
    "paragraphs": [],
    "path": "/documentation/user_guides/malloy_by_example.malloynb"
  },
  {
    "titles": [
      "Building Semantic Data Models in Malloy",
      "Other Interesting Language Features:",
      "Nested data and Symmetric aggregates  (<a href=\"../language/aggregates\">Aggregates Documentation</a>)"
    ],
    "paragraphs": [],
    "path": "/documentation/user_guides/malloy_by_example.malloynb"
  },
  {
    "titles": [
      "Building Semantic Data Models in Malloy",
      "Other Interesting Language Features:",
      "Import (<a href=\"../language/imports\">Import Documentation</a>)"
    ],
    "paragraphs": [],
    "path": "/documentation/user_guides/malloy_by_example.malloynb"
  },
  {
    "titles": [
      "Building Semantic Data Models in Malloy",
      "Other Interesting Language Features:",
      "Data styles and rendering (<a href=\"../visualizations/dashboards\">Rendering Documentation</a>)"
    ],
    "paragraphs": [],
    "path": "/documentation/user_guides/malloy_by_example.malloynb"
  },
  {
    "titles": [
      "Querying a Semantic Data Model"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "A semantic data model contains prebuilt calculations and relationships for a set of data. This article will show you the basics of querying a semantic data model in <a href=\"https://www.malloydata.dev\">Malloy</a>."
      },
      {
        "type": "p",
        "text": "Let’s start simply, we'll define: <em>dimension</em>, <em>measure</em>, <em>aggregating query</em>, and <em>lookup query</em>."
      }
    ],
    "path": "/documentation/user_guides/querying_a_model.malloynb"
  },
  {
    "titles": [
      "Querying a Semantic Data Model",
      "Data for Kindergarteners"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Given that we learn about data in Kindergarten, it is really surprising how hard it is to query data in the \"big\" world.  In kindergarten data, we notice attributes about things, make piles of things, and count things in the piles.  We do this even before we learn any \"real\" math.  Strangely, noticing attributes about <em>things</em> and counting <em>things</em> is almost all there is to working with data."
      }
    ],
    "path": "/documentation/user_guides/querying_a_model.malloynb"
  },
  {
    "titles": [
      "Querying a Semantic Data Model",
      "Data for Kindergarteners",
      "Two types of queries, \"Where's Waldo\" and \"Making Piles\""
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "There are really two types of queries in the world, lookup and aggregating."
      },
      {
        "type": "p",
        "text": "<em>Lookup</em> queries are pretty easy.  Google search is a lookup query.  To search, type in some terms then see a list of results. Searching in SQL this often looks like <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">SELECT</span><span style=\"color: #000000\"> * </span><span style=\"color: #001080\">FROM</span><span style=\"color: #000000\"> &lt;</span><span style=\"color: #001080\">something</span><span style=\"color: #000000\">&gt; </span><span style=\"color: #AF00DB\">WHERE</span><span style=\"color: #000000\"> &lt;</span><span style=\"color: #001080\">FILTER</span><span style=\"color: #000000\">&gt;</span></span></code>."
      },
      {
        "type": "p",
        "text": "The interesting queries, the kindergarten queries, are <em>aggregating</em>.  Aggregating queries tell you something about a set of data.  An aggregating query has two main parts, the dimensions and measures."
      },
      {
        "type": "p",
        "text": "Dimensions are the attributes you use to decide which pile the thing goes in."
      },
      {
        "type": "p",
        "text": "A measure is something you can say about the pile.  \"How many objects?\", \"How much does this pile weigh?\", \"What is the average size of an object in this pile?\""
      },
      {
        "type": "p",
        "text": "\"OK class, let's take this pile of coins and separate them.  How many coins are pennies?  How many coins are nickels? Dimes? Quarters?\""
      },
      {
        "type": "p",
        "text": "Aggregating queries tell us things about datasets.  Lookup queries find things."
      }
    ],
    "path": "/documentation/user_guides/querying_a_model.malloynb"
  },
  {
    "titles": [
      "Querying a Semantic Data Model",
      "SQL World"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "In the SQL world, the interface to your data is just that, data.  The data sits in <em>tables</em>.  Everytime, you ask a question (run a query), you need to restate all the things about the data: the calculations, the relationships between <em>tables</em>. The unit of reusability is a <em>table</em>. You can run a query that makes a new <em>table</em>. You can turn a query into a SQL View, which is basically a <em>table</em> based on a calculation."
      }
    ],
    "path": "/documentation/user_guides/querying_a_model.malloynb"
  },
  {
    "titles": [
      "Querying a Semantic Data Model",
      "The Semantic Data Model is the interface to your data"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "In a Semantic Data Model, the calculations (<em>dimensions</em> and <em>measures</em>) are reusable. The join relationships are built into the semantic data model. The calculations (common ways of looking at data) are coded into the semantic data model. The act of querying becomes simply picking dimensions and measures, filtering the data, and sorting the results. This simplification is powerful in that the calculations are always vetted, so it becomes much harder to get incorrect results."
      }
    ],
    "path": "/documentation/user_guides/querying_a_model.malloynb"
  },
  {
    "titles": [
      "Querying a Semantic Data Model",
      "A Simple Example"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Below is a semantic data model for some flight data. For now, let's not concern ourselves with how this model is built but instead focus on how we can ask questions of the model.  In the semantic model, <em>dimensions</em>, <em>measures</em>, and joined relationships are all exposed as a list of variables."
      },
      {
        "type": "p",
        "text": "Each flight has an origin, destination and carrier.  Flights can be delayed.  Each flight has an aircraft that made the flight, and more.  The semantic data model provides us with the dimensions (in blue), the measures (in orange), and the graph of related objects. This model is encoded in a file called ‘flights.malloy’."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> {</span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\">} </span><span style=\"color: #001080\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;flights.malloy&#39;</span><span style=\"color: #000000\"> </span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/querying_a_model.malloynb"
  },
  {
    "titles": [
      "Querying a Semantic Data Model",
      "Step 10:  We'll jump to the end with a complex example"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "A semantic data model lets you do complicated things simply. Shamelessly, to ensure you read the full article, I'll start with a seemingly complex example and then explain how we got here. It's actually quite simple."
      },
      {
        "type": "p",
        "text": "The dashboard below shows flights from airports in California, where you can go, and which carriers will take you there. It shows how this has changed over time."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\"># dashboard</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">origin_name</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">metrics</span><span style=\"color: #000000\"> + {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">origin</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">state</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;CA&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">destination_name</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">metrics</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">carrier_list</span><span style=\"color: #000000\"> + {</span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">6</span><span style=\"color: #000000\">} </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\"># bar_chart</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier_name</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\"># line_chart</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">dep_month</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/querying_a_model.malloynb"
  },
  {
    "titles": [
      "Querying a Semantic Data Model",
      "Wait, that looks really complex?  What do those things mean?"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "If you press the control key and hover over any of the terms, the Malloy VSCode extension will show you the semantic definition for the term."
      }
    ],
    "path": "/documentation/user_guides/querying_a_model.malloynb"
  },
  {
    "titles": [
      "Querying a Semantic Data Model",
      "Back to Step 1: How big is the pile?"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Ok, let's slow down and go step by step."
      },
      {
        "type": "p",
        "text": "Often, the first thing you want to know is, how big is the dataset?"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\">-&gt; </span><span style=\"color: #001080\">flight_count</span></span></pre>"
      },
      {
        "type": "p",
        "text": "In Malloy, queries start with <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: &lt;</span><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">&gt;</span></span></code>.  In this case, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">flights</span></span></code>.  The <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">-&gt;</span></span></code> is the query transform operator.  The right hand side of the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">-&gt;</span></span></code> is the query transformation.  In this case we want a simple measure, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">flight_count</span></span></code>."
      }
    ],
    "path": "/documentation/user_guides/querying_a_model.malloynb"
  },
  {
    "titles": [
      "Querying a Semantic Data Model",
      "Dimensions and Measures"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "As we talked about earlier.  Aggregating queries have two parts: what you want to group by, and what you want to measure about things in that group.  Let's group the flights by the origin, and count how many flights.  When building a query, we use the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">+</span></span></code> operator to combine the parts."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">origin_name</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/querying_a_model.malloynb"
  },
  {
    "titles": [
      "Querying a Semantic Data Model",
      "Seats in the Air"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Another way of measuring the busyness of an airport is to try and estimate the number of people that travel through the airport.  Planes are of different sizes.  If we count up all the seats in all the planes that have arrived, we can approximate the busyness.  The measure <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">seats_for_sale</span></span></code> will give us the maximum number of people that could have landed there."
      },
      {
        "type": "p",
        "text": "Notice Chicago has more people traveling through than Dallas-Fort Worth."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">origin_name</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">seats_for_sale</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">flight_count</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/querying_a_model.malloynb"
  },
  {
    "titles": [
      "Querying a Semantic Data Model",
      "Filtering"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Isolating the data to analyze is a big part of working with data.  Let's limit our analysis to California airports. We've reformated the query. In Malloy, spaces and newlines are the same thing."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #001080\">origin_name</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  + </span><span style=\"color: #001080\">seats_for_sale</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  + </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  + {</span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">origin</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">state</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">&#39;CA&#39;</span><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/querying_a_model.malloynb"
  },
  {
    "titles": [
      "Querying a Semantic Data Model",
      "Adding your own measures"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The Malloy semantic data model provides most of what we would like to calculate, but we can provide our own calculations in our queries. This model doesn't contain an <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">average_distance</span></span></code>, so we can compute this ourselves."
      },
      {
        "type": "p",
        "text": "It looks like Jetblue, on average, has the longest flights."
      },
      {
        "type": "p",
        "text": "You may also notice that by default, Malloy sorts results in descending order by the first measure."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #001080\">carrier_name</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  + {</span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">avg_distance</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">distance</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">()}</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  + </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/querying_a_model.malloynb"
  },
  {
    "titles": [
      "Querying a Semantic Data Model",
      "Adding your own measures",
      "Changing the sort order"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "We can change the sort order by adding a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">{</span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: }</span></span></code> clause"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #001080\">carrier_name</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  + {</span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">avg_distance</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">distance</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">()}</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  + </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  + {</span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">desc</span><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/querying_a_model.malloynb"
  },
  {
    "titles": [
      "Querying a Semantic Data Model",
      "Adding your own dimensions"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "You can group by an expression.  The expressions can contain just about any calculation you can do in SQL."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  {</span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39; - &#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">carrier_name</span><span style=\"color: #000000\">)}</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  + </span><span style=\"color: #001080\">origin_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  + </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/querying_a_model.malloynb"
  },
  {
    "titles": [
      "Querying a Semantic Data Model",
      "Working with Time"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "A big part of working with data is working with time.  Queries that have time in the first column are sorted in descending order by time."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  {</span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_month</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">month</span><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  + </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  + {</span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;WN&#39;</span><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/querying_a_model.malloynb"
  },
  {
    "titles": [
      "Querying a Semantic Data Model",
      "Annotations and Charting"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Charts are generally another view on tables.  For example, the table above can be viewed as a line chart.  The x-axis is <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">flight_month</span></span></code> and the y-axis is <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">flight_count</span></span></code>.  Malloy's annotations let you tag a query so the rendering engine can show the results in different ways.  We simply tag the query above as a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\"># line_chart</span></span></code>."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\"># line_chart</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  {</span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_month</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">month</span><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  + </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  + {</span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;WN&#39;</span><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/querying_a_model.malloynb"
  },
  {
    "titles": [
      "Querying a Semantic Data Model",
      "Filtering Time"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Filtering time ranges is always difficult in SQL.  Malloy time ranges can be specified simply.  We add a filter to limit the time range to the year 2001."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\"># line_chart</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  {</span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_month</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">month</span><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  + </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  + </span><span style=\"color: #001080\">carrier_name</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  + {</span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\"> ? </span><span style=\"color: #098658\">@2001</span><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/querying_a_model.malloynb"
  },
  {
    "titles": [
      "Querying a Semantic Data Model",
      "Views: Pre-built Queries"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Semantic models can include views.  Views are pre-built queries.  Often in a dataset there are several interesting ways of looking at the dataset.  A common use for views is to declare these in advance."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">by_carrier</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/querying_a_model.malloynb"
  },
  {
    "titles": [
      "Querying a Semantic Data Model",
      "Convention: the 'metrics' view."
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy models often contain a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">metrics</span></span></code> view.  The metrics view contains the most common ways of measuring data in this data set. This makes it easy build queries on the fly."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">metrics</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/querying_a_model.malloynb"
  },
  {
    "titles": [
      "Querying a Semantic Data Model",
      "Metrics by Origin"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Views can be combined in queries just like all the other parts."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">origin_name</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">metrics</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/querying_a_model.malloynb"
  },
  {
    "titles": [
      "Querying a Semantic Data Model",
      "Metric by Manufacturer"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">plane_manufacturer</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">metrics</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/querying_a_model.malloynb"
  },
  {
    "titles": [
      "Querying a Semantic Data Model",
      "Nesting"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "One of the really powerful features of the Malloy language is nesting.  We can see which carriers fly which airplanes."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">plane_manufacturer</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">metrics</span><span style=\"color: #000000\"> + {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier_name</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">aircraft_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/querying_a_model.malloynb"
  },
  {
    "titles": [
      "Querying a Semantic Data Model",
      "Nesting multiple queries"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "More than one query can be nested."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">by_carrier</span><span style=\"color: #000000\"> + {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">plane_manufacturer</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">metrics</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">origin_name</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">metrics</span><span style=\"color: #000000\"> + {</span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/querying_a_model.malloynb"
  },
  {
    "titles": [
      "Querying a Semantic Data Model",
      "And there you have it"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Writing queries with a pre-built model is really powerful.  You can easily explore a complex dataset in a simple, composable way.  The output of these queries can be used in lots of different ways, from Data Science to transforming data for consumption in other systems."
      },
      {
        "type": "p",
        "text": "Pre-built semantic models take much of the pain out of working with data."
      }
    ],
    "path": "/documentation/user_guides/querying_a_model.malloynb"
  },
  {
    "titles": [
      "Malloy for SQL Folks"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "This document will to move you quickly into the Malloy language by showing how different queries translate SQL into Malloy."
      },
      {
        "type": "p",
        "text": "Let's start with a basic query."
      }
    ],
    "path": "/documentation/user_guides/sql_experts1.malloynb"
  },
  {
    "titles": [
      "Malloy for SQL Folks",
      "SQL queries can be directly translated into Malloy"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-sql\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #008000\">-- connection: duckdb</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">SELECT</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  flights.origin </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&quot;Origin Code&quot;</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  orig.city,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  orig.full_name </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&quot;airport name&quot;</span><span style=\"color: #000000\">,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">(*) </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> flight_count,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">distinct</span><span style=\"color: #000000\"> tail_num) </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> aircraft_count,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">(distance) </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> avg_distance</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">CASE</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">WHEN</span><span style=\"color: #000000\"> dep_delay &gt; </span><span style=\"color: #098658\">30</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">THEN</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">END</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> delayed_flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">CASE</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">WHEN</span><span style=\"color: #000000\"> dep_delay &gt; </span><span style=\"color: #098658\">30</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">THEN</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">END</span><span style=\"color: #000000\">)/</span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">(*) </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> percent_delayed</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">FROM</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> flights</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">LEFT JOIN</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> orig </span><span style=\"color: #0000FF\">ON</span><span style=\"color: #000000\"> flights.origin = orig.code</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">WHERE</span><span style=\"color: #000000\"> destination = </span><span style=\"color: #A31515\">&#39;SFO&#39;</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">GROUP BY</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">,</span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">,</span><span style=\"color: #098658\">3</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">ORDER BY</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">(*) </span><span style=\"color: #0000FF\">desc</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">LIMIT</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">10</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/sql_experts1.malloynb"
  },
  {
    "titles": [
      "Malloy for SQL Folks",
      "Translation of SQL into Malloy"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "In converting from SQL to Malloy, we refactor the query into two parts.  The resuable components go into a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">:</span></span></code> block,  The transformation goes into a query block."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\">                     </span><span style=\"color: #008000\">-- (1) refactor the reusable parts </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #008000\">-- (2) get schema</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {                              </span><span style=\"color: #008000\">-- (3) add definitions</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">orig</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\">                   </span><span style=\"color: #008000\">-- (3) joins need &#39;one&#39; or &#39;many&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">) </span></span>\n<span class=\"line\"><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">on</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">origin</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">orig</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">code</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">        </span><span style=\"color: #001080\">is_delayed</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">dep_delay</span><span style=\"color: #000000\"> &gt; </span><span style=\"color: #098658\">30</span><span style=\"color: #000000\">    </span><span style=\"color: #008000\">-- (4) reusable scalcar calculation </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">:                            </span><span style=\"color: #008000\">-- (5) aggregate definition</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()           </span><span style=\"color: #008000\">-- (6) Mostly the same as count(*) </span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">delayed_flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">        </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> {</span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">is_delayed</span><span style=\"color: #000000\">}  </span><span style=\"color: #008000\">-- (7) filtered aggregates</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\"># percent</span><span style=\"color: #008000\">                         </span><span style=\"color: #AF00DB\">-</span><span style=\"color: #0451A5\">-</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">(8)</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">tell</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">the</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">renderer</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">to</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">show</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">the</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">result</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">as</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">a</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">percent</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">percent_delayed</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\">              </span></span>\n<span class=\"line\"><span style=\"color: #000000\">        </span><span style=\"color: #001080\">delayed_flight_count</span><span style=\"color: #000000\"> / </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\">  </span><span style=\"color: #008000\">-- ** reuse calculations</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {                       </span><span style=\"color: #008000\">-- (9) FROM is first</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">destination</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;SFO&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">`Origin Code`</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">origin</span><span style=\"color: #000000\">             </span><span style=\"color: #008000\">--  (10) &#39;is&#39; vs &#39;as&#39; </span></span>\n<span class=\"line\"><span style=\"color: #000000\">                                        </span><span style=\"color: #008000\">--  (11) the root table has no alias </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">orig</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">city</span><span style=\"color: #000000\">                   </span><span style=\"color: #008000\">--  Output column name is &#39;city&#39;, like SQL.</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">`Airport Name`</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">orig</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">full_name</span><span style=\"color: #000000\">    </span><span style=\"color: #008000\">-- (12) Backtick to quote names </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\">            </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">aircraft_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">tail_num</span><span style=\"color: #000000\">)   </span><span style=\"color: #008000\">-- (13) exactly the same as count(distinct tail_num) </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">avg_distance</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">distance</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">()      </span><span style=\"color: #008000\">-- (14) aggregate locality</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">delayed_flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">percent_delayed</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">desc</span><span style=\"color: #000000\">           </span><span style=\"color: #008000\">-- (15) uses the output name instead of expression or column ordinal</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">10</span><span style=\"color: #000000\">    </span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/sql_experts1.malloynb"
  },
  {
    "titles": [
      "Malloy for SQL Folks",
      "Basic Structure of Malloy"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The code above is an example of a query. Queries are invoked with <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">:</span></span></code> that takes a query block as a parameter."
      },
      {
        "type": "p",
        "text": "Malloy has essentially two types of objects, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">query</span><span style=\"color: #000000\">:</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">:</span></span></code>. A <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">query</span><span style=\"color: #000000\">:</span></span></code> is named a transformation.  A <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">:</span></span></code> is an object or network of objects that <em>can be transformed</em>.  For example, a table is a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">:</span></span></code> and the output of a query  is a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">:</span></span></code>"
      },
      {
        "type": "p",
        "text": "Malloy's concept of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">query</span><span style=\"color: #000000\">:</span></span></code> pretty much maps to a SQL's concecpt of a SELECT statement.."
      },
      {
        "type": "p",
        "text": "A <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">:</span></span></code> in Malloy acts and an API to a dataset. A <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">:</span></span></code> declaration is much like a function library in imperitive languages."
      },
      {
        "type": "p",
        "text": "Like function libraries, sources hide complexity."
      }
    ],
    "path": "/documentation/user_guides/sql_experts1.malloynb"
  },
  {
    "titles": [
      "Malloy for SQL Folks",
      "Query Block"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The query bock is used to transform data."
      },
      {
        "type": "p",
        "text": "A query block is always preceeded by the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">-&gt;</span></span></code> operator."
      },
      {
        "type": "p",
        "text": "In the query example above, the query block follows the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">:</span></span></code>."
      },
      {
        "type": "p",
        "text": "Components of a query block include <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">:</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">:</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">:</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">:</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">:</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">:</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">having</span><span style=\"color: #000000\">:</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">index</span><span style=\"color: #000000\">:</span></span></code>."
      },
      {
        "type": "p",
        "text": "The output of a query block is a table (a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">:</span></span></code> actually).  The column names in the result table follow SQLs example in that the  the last part unaliased name is the column name."
      },
      {
        "type": "p",
        "text": "The query blocks can named and later joined, like SQL's WITH name AS (SELECT ...)"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">query</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports_by_state</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\">  </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">parquet</span><span style=\"color: #000000\">) -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">     </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">fac_type</span></span>\n<span class=\"line\"><span style=\"color: #000000\">     </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Queries can be chained in a pipeline, for example."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">parquet</span><span style=\"color: #000000\">) -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">     </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">fac_type</span></span>\n<span class=\"line\"><span style=\"color: #000000\">     </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  } -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">aggregte</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">total_airports</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/sql_experts1.malloynb"
  },
  {
    "titles": [
      "Malloy for SQL Folks",
      "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">:</span></span></code> Declaration Block"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "A <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">:</span></span></code> declaration block adds reusable calculations to an existing source, like a table.  These declaration operate like methods or properties in object oriented languages (with the self being the table)."
      },
      {
        "type": "p",
        "text": "A declaration block is always preceeded by an <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">extend</span></span></code>."
      },
      {
        "type": "p",
        "text": "In the query above the source declaration follows the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\">:</span></span></code>."
      },
      {
        "type": "p",
        "text": "Source blocks can contain <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">:</span></span></code> (aggregate cacluation), <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">:</span></span></code> (scalar calculation), <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">:</span></span></code> (a filter to always apply to a source), <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">primary_key</span><span style=\"color: #000000\">:</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">:</span></span></code> (a predefined query), <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">join_xxx</span><span style=\"color: #000000\">:</span></span></code> (declares relationship to another source)."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;airports.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #001080\">primay_key</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">code</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">city_state</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">state</span><span style=\"color: #000000\">,</span><span style=\"color: #A31515\">&#39;,&#39;</span><span style=\"color: #000000\">,</span><span style=\"color: #001080\">city</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">average_elevation</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">elevation</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Once a source is declared, queries are represented more simply.  Calculations can be used in any number of different queries."
      }
    ],
    "path": "/documentation/user_guides/sql_experts1.malloynb"
  },
  {
    "titles": [
      "Malloy for SQL Folks",
      "Joins are declarations."
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "In Malloy, joins usually happen in sources (though they can appear in queries also).  When writing a malloy query, a join in a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">:</span></span></code> is <strong>only invoked in a query if some member of element of the join is referenced</strong> .  In order to accuratly compute aggregate calculations in joined sources, Malloy needs to know if a join fans out  the data (potentially produces more rows after the join is invoked)."
      },
      {
        "type": "p",
        "text": "Assuming the following source"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;flights.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">orig</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;airports.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">on</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">origin_code</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">orig</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">code</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Note: In SQL dialects that support nested/repeated structures and arrays, joins are autmatically declared."
      }
    ],
    "path": "/documentation/user_guides/sql_experts1.malloynb"
  },
  {
    "titles": [
      "Malloy for SQL Folks",
      "Joins are declarations.",
      "Types"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "In Malloy, type are <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">number</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">string</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">boolean</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">date</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">timestamp</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">record</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">array</span></span></code>.  Databases have many varieties of these types.  Malloy attempts to keep the calculations within the native type system.  You can cast to database native types in your Malloy expressions."
      },
      {
        "type": "p",
        "text": "Malloy's <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">boolean</span></span></code> is two state when being returned in a query (it will never return null in a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">:</span></span></code> or a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">:</span></span></code>, only false.)"
      }
    ],
    "path": "/documentation/user_guides/sql_experts1.malloynb"
  },
  {
    "titles": [
      "Malloy for SQL Folks",
      "Joins are declarations.",
      "Cast and Safe Cast"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "<em>You can cast to any native SQL type by placing the type name in quotes.</em>"
      },
      {
        "type": "p",
        "text": "<em><code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">:::</span></span></code> is the safe cast operator if the SQL dialect supports the operation.</em>"
      },
      {
        "type": "p",
        "text": "<em>In Malloy <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">::</span></span></code> is the cast operator.</em>"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">foo</span><span style=\"color: #000000\">::</span><span style=\"color: #A31515\">&quot;BIGINT&quot;</span></span></code>"
      }
    ],
    "path": "/documentation/user_guides/sql_experts1.malloynb"
  },
  {
    "titles": [
      "Malloy for SQL Folks",
      "Expressions"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Expression and malloy are pretty similar to SQL.  Where we've change the language, we've done it to make it more readable, modern or consistent and composable.  If you write the SQL expression, generally, the compiler will tell you how to write the Malloy expression."
      },
      {
        "type": "p",
        "text": "This is intended to serve as a quick reference, more complete documentation can be found <a href=\"../language/expressions\">here</a>."
      }
    ],
    "path": "/documentation/user_guides/sql_experts1.malloynb"
  },
  {
    "titles": [
      "Malloy for SQL Folks",
      "Expressions",
      "Malloy has its own standard function library."
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "<em>Builtin functions work the same across SQL Dialects</em>"
      },
      {
        "type": "p",
        "text": "In order for Malloy code to execute the same on many SQL engines, Malloy has a <a href=\"../language/functions\">set of functions</a> that works the same on all SQL Engines."
      }
    ],
    "path": "/documentation/user_guides/sql_experts1.malloynb"
  },
  {
    "titles": [
      "Malloy for SQL Folks",
      "Expressions",
      "Calling Native database functions"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "In Malloy can can call native database functions or write arbitrary SQL expressions and use them in dimensions."
      }
    ],
    "path": "/documentation/user_guides/sql_experts1.malloynb"
  },
  {
    "titles": [
      "Malloy for SQL Folks",
      "Expressions",
      "Arbitrary SQL Expressions in Dimensions."
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "You can use arbitrary <a href=\"../experiments/sql_expressions\">SQL in expressions using</a> the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">sql_XXX</span></span></code> functions.  The mechanism is helpful for coorelated, array mapping functions and more. <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">sql_number</span></span></code> writes an expression that returns a numeric scalar.  The <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">&quot;&quot;&quot;</span></span></code> is another form of string quoting in Malloy.  <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">${</span><span style=\"color: #001080\">TABLE</span><span style=\"color: #000000\">}</span></span></code> is substituted with the current source's table alias in SQL."
      }
    ],
    "path": "/documentation/user_guides/sql_experts1.malloynb"
  },
  {
    "titles": [
      "Malloy for SQL Folks",
      "Expressions",
      "Working with Time"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The <a href=\"../language/expressions#time-expressions\">Time Expressions</a> reference contains substantially more detail and examples."
      }
    ],
    "path": "/documentation/user_guides/sql_experts1.malloynb"
  },
  {
    "titles": [
      "Malloy for SQL Folks",
      "Expressions",
      "Window Functions"
    ],
    "paragraphs": [],
    "path": "/documentation/user_guides/sql_experts1.malloynb"
  },
  {
    "titles": [
      "More Guidance for SQL Users"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "This guide expands on information shared in <a href=\"https://docs.malloydata.dev/documentation/user_guides/sql_experts1\">Malloy for SQL Folks</a>."
      }
    ],
    "path": "/documentation/user_guides/sql_experts2.malloynb"
  },
  {
    "titles": [
      "More Guidance for SQL Users",
      "CTE and Refactoring for Reusability."
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy has the notion of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">query</span></span></code>s and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span></span></code>s. It can be a little confusing when to use one or the others."
      },
      {
        "type": "p",
        "text": "A <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">query</span></span></code> is a transformation that returns a table.  If you are doing a transfomation of data to be joined in another query or source, make a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">query</span></span></code>."
      },
      {
        "type": "p",
        "text": "A <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span></span></code> is datasource, like a table with added declarations that can be used against the data it contains."
      },
      {
        "type": "p",
        "text": "A <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span></span></code> can also be joined with sources and queries to be a network of data that you can query."
      }
    ],
    "path": "/documentation/user_guides/sql_experts2.malloynb"
  },
  {
    "titles": [
      "More Guidance for SQL Users",
      "Example SQL"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "This SQL block should be used as a reference when reading the section below it."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-sql\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #008000\">-- conneciton: duckdb</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">WITH</span><span style=\"color: #000000\"> orig_facts </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> (    </span><span style=\"color: #008000\">-- (1) CTE computes a rollup of flights </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">SELECT</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">      origin </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> code,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #795E26\">COUNT</span><span style=\"color: #000000\">(*) </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> total_flights</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">FROM</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> flights</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">GROUP BY</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span></span>\n<span class=\"line\"><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">SELECT</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  orig.code, </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  orig.city,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  orig_facts.total_flights </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> total_flights_to_origin,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  carriers.nickname,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">(*) </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> flight_count,</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">(*)/(orig_facts.total_flights*</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">.</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> percent_of_flights_to_origin   </span><span style=\"color: #008000\">-- (2) division is integer by default</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">FROM</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> flights</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">LEFT JOIN</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> orig </span><span style=\"color: #0000FF\">ON</span><span style=\"color: #000000\"> flights.origin = orig.code</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">LEFT JOIN</span><span style=\"color: #000000\"> orig_facts </span><span style=\"color: #0000FF\">ON</span><span style=\"color: #000000\"> flights.origin = orig_facts.code</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">LEFT JOIN</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&#39;../data/carriers.parquet&#39;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> carriers </span><span style=\"color: #0000FF\">ON</span><span style=\"color: #000000\"> flights.carrier = carriers.code</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">GROUP BY</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">,</span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">,</span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">,</span><span style=\"color: #098658\">4</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">ORDER BY</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">DESC</span></span>\n<span class=\"line\"><span style=\"color: #0000FF\">LIMIT</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">10</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/sql_experts2.malloynb"
  },
  {
    "titles": [
      "More Guidance for SQL Users",
      "Translate the structure of the query."
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "For each table in the query, make a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">:</span></span></code> and add relevent calculations.  Aggregate calculations are declared as <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">:</span></span></code>s.  Scalar calculations are declared as <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">:</span></span></code>s.  These calculations can be used in queries, but simply naming them.  We make sources for the flights, airports and carriers tables."
      },
      {
        "type": "p",
        "text": "Finally, declare the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">:</span></span></code> that you are going base your complex queries o <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">flights_explore</span></span></code>.  <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">flights_explore</span></span></code> inherits from <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">flights</span></span></code> and adds joins to the above tables."
      },
      {
        "type": "p",
        "text": "For each CTE, declare a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">query</span><span style=\"color: #000000\">:</span></span></code>.   In SQL, each CTE stage produces a table that is used in subsequent stages in the query.  It works the same in malloy.  CTEs are declared and named in a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">query</span><span style=\"color: #000000\">:</span></span></code> block.  They usually use one of the previously defined <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">:</span></span></code>s as a base.  These queries are usually result in <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">fact</span></span></code> tables as they show up at some level of granularity.  We declare <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">origin_facts</span></span></code>."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> { </span><span style=\"color: #008000\">-- (1)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">total_distance</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">distance</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">()        </span><span style=\"color: #008000\">-- add some measures</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">avg_distance</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">distance</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">rename</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">origin_code</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">origin</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">destination_code</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">destination</span></span>\n<span class=\"line\"><span style=\"color: #000000\">} </span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">   </span><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">name</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">code</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39;-&#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">city</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">   </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">avg_elevation</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">elevation</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\">  </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/carriers.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">query</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">origin_facts</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; { </span><span style=\"color: #008000\">-- (2) CTEs become fact queries</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">code</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">origin_code</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">total_flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights_explore</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {  </span><span style=\"color: #008000\">-- (3), (4)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">on</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">code</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">origin</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">on</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">origin_code</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">origin</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">code</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">origin_facts</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">on</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">origin_code</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">origin_facts</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">code</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Declare a new source that extends the root table in the query, that joins eveything together into a network."
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\">:</span></span></code> lets you inhert from an exising source."
      },
      {
        "type": "p",
        "text": "For each table in the query, make a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">:</span></span></code>.  If there are aggregate calculations that are relevent to the source declare them measures or dimensions."
      },
      {
        "type": "p",
        "text": "For each CTE, declare a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">query</span><span style=\"color: #000000\">:</span></span></code>.  Usually these are 'fact' tables of some kind."
      }
    ],
    "path": "/documentation/user_guides/sql_experts2.malloynb"
  },
  {
    "titles": [
      "More Guidance for SQL Users",
      "Writing the query becomes easy."
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights_explore</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">origin</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">code</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">origin</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">city</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">total_flights_to_origin</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\">  </span><span style=\"color: #001080\">origin_facts</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">total_flights</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">nickname</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">     </span><span style=\"color: #001080\">percent_of_flights_to_origin</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\">/</span><span style=\"color: #001080\">origin_facts</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">total_flights</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">10</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/sql_experts2.malloynb"
  },
  {
    "titles": [
      "More Guidance for SQL Users",
      "This semantic model can be used to generate lots of interesting queries."
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "See <a href=\"https://docs.malloydata.dev/blog/\">Querying a semantic model</a>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights_explore</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">origin</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">name</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">carrier_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">10</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\"># list_detail</span><span style=\"color: #008000\">                       </span><span style=\"color: #AF00DB\">-</span><span style=\"color: #0451A5\">-</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">(1)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {                 </span><span style=\"color: #008000\">-- (2)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">nickname</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "(2) <a href=\"../language/nesting\">Language/Nesting Queries</a>"
      },
      {
        "type": "p",
        "text": "(1) <a href=\"../visualizations/lists\">See Visualizations/Lists</a>"
      }
    ],
    "path": "/documentation/user_guides/sql_experts2.malloynb"
  },
  {
    "titles": [
      "More Guidance for SQL Users",
      "Another example query"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights_explore</span><span style=\"color: #000000\"> -&gt;  {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">nickname</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\"># list_detail</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_origin</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">origin</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">name</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">10</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\"># line_chart</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_month</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">dep_year</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">year</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/sql_experts2.malloynb"
  },
  {
    "titles": [
      "SQL Experts: Malloy things you should know."
    ],
    "paragraphs": [],
    "path": "/documentation/user_guides/sql_experts3.malloynb"
  },
  {
    "titles": [
      "There are two types of block, query blocks and declaration blocks"
    ],
    "paragraphs": [],
    "path": "/documentation/user_guides/sql_experts3.malloynb"
  },
  {
    "titles": [
      "Query Block"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "A query block alwyas follows a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">-&gt;</span></span></code> operator and is used to transform data.  Components of a query block include <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">:</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">agggregate</span><span style=\"color: #000000\">:</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">:</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">:</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">:</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">:</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">:</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">having</span><span style=\"color: #000000\">:</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">index</span><span style=\"color: #000000\">:</span></span></code>.  The query blocks can be chained in a pipeline, for example."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-txt\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">  run: duckdb.table(airports.parquet) -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">     group_by: state, fac_type</span></span>\n<span class=\"line\"><span style=\"color: #000000\">     aggregate: airport_count is count()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  } -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    aggregte: total_airports is airport_count.sum()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/sql_experts3.malloynb"
  },
  {
    "titles": [
      "Declaration Block"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "A declaration block adds calculations to an existing source, like a table.  The declaration make reusable calculations that can be used in query block or in the source block.  Source blocks follow an 'extend' in the language and can contain <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">:</span></span></code> (aggregate cacluation), <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">:</span></span></code> (scalar calculation), <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">:</span></span></code> (a filter to always apply to a source), <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">primary_key</span><span style=\"color: #000000\">:</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">:</span></span></code> (a predefined query), <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">join_xxx</span><span style=\"color: #000000\">:</span></span></code> (declares relationship to another source)."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-txt\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">source: airports is duckdb.table(airports.parquet) extend {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  primay_key: code</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  dimension: city_state is concat(state,&#39;,&#39;,city)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  measure:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    airport_count is count()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    average_elevation is elevation.avg()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/sql_experts3.malloynb"
  },
  {
    "titles": [
      "Expressions"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Expression and malloy are pretty similar to SQL.  Where we've change the language, we've done it to make it more readable, modern or consistent and composable.  If you write the SQL expression, generally, the compiler will tell you how to write the Malloy expression."
      }
    ],
    "path": "/documentation/user_guides/sql_experts3.malloynb"
  },
  {
    "titles": [
      "Expressions",
      "Types,  Cast and Safe Cast"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "*Malloy Booleans are two state, true and false, never NULL"
      },
      {
        "type": "p",
        "text": "<em>You can cast to any native SQL type by placing the type name in quotes.</em>"
      },
      {
        "type": "p",
        "text": "<em><code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">:::</span></span></code> is the safe cast operator if the SQL dialect supports the operation.</em>"
      },
      {
        "type": "p",
        "text": "<em>In Malloy <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">::</span></span></code> is the cast operator.</em>"
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">foo</span><span style=\"color: #000000\">::</span><span style=\"color: #A31515\">&quot;BIGINT&quot;</span></span></code>"
      },
      {
        "type": "p",
        "text": "<em>Malloy types are <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">number</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">string</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">boolean</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">date</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">timestamp</span></span></code></em>"
      }
    ],
    "path": "/documentation/user_guides/sql_experts3.malloynb"
  },
  {
    "titles": [
      "Expressions",
      "Malloy has its own standard function library."
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "<em>Builtin functions work the same across SQL Dialects</em>"
      },
      {
        "type": "p",
        "text": "In order for Malloy code to execute the same on many SQL engines, Malloy has a <a href=\"../language/functions\">set of functions</a> that works the same on all SQL Engines."
      }
    ],
    "path": "/documentation/user_guides/sql_experts3.malloynb"
  },
  {
    "titles": [
      "Expressions",
      "Raw SQL Functions"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "<em>Call any SQL function or UDF.</em>"
      },
      {
        "type": "p",
        "text": "Functions that are <em>not</em> built in may be called in the same way, but with an <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">!</span></span></code> in between the function name and argument list: <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">sinh</span><span style=\"color: #000000\">!(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">)</span></span></code>. In this case, Malloy assumes the return type of the function is the same as that of the first argument (or <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #267F99\">number</span></span></code> if there are no arguments). When this is not correct, the return type can be specified after the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #000000\">!</span></span></code>, e.g. <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #795E26\">hash</span><span style=\"color: #000000\">!</span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">username</span><span style=\"color: #000000\">)</span></span></code>."
      }
    ],
    "path": "/documentation/user_guides/sql_experts3.malloynb"
  },
  {
    "titles": [
      "Expressions",
      "Arbitrary SQL Expressions in Dimensions."
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "<em>Write coorelated subqueries against arrays, array mapping functions and more</em>"
      },
      {
        "type": "p",
        "text": "You can use arbitrary <a href=\"../experiments/sql_expressions\">SQL in expressions using</a> the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">sql_XXX</span></span></code> functions.  The mechanism is helpful for coorelated, array mapping functions and more."
      },
      {
        "type": "p",
        "text": "<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">foo_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">sql_number</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&quot;&quot;&quot;SELECT COUNT(*) FROM UNNEST${TABLE}.foo &quot;&quot;&quot;</span><span style=\"color: #000000\">)</span></span></code>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"></span></pre>"
      }
    ],
    "path": "/documentation/user_guides/sql_experts3.malloynb"
  },
  {
    "titles": [
      "Rendering Documentation"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The latest and most up to date documentation for the Malloy renderer are now found in GitHub:"
      },
      {
        "type": "p",
        "text": "<a href=\"https://github.com/malloydata/malloy/blob/main/packages/malloy-render/docs/renderer_tags_overview.md\">Renderer Tag Documentation</a>"
      },
      {
        "type": "p",
        "text": "<a href=\"https://github.com/malloydata/malloy/blob/main/packages/malloy-render/docs/renderer_tag_cheatsheet.md\">Renderer Tag Cheatsheet</a>"
      },
      {
        "type": "p",
        "text": "For developers wishing to implement custom renderers, a plugin system is available:"
      },
      {
        "type": "p",
        "text": "<a href=\"https://github.com/malloydata/malloy/blob/main/packages/malloy-render/docs/plugin-system.md\">Plugin System Overview</a>"
      },
      {
        "type": "p",
        "text": "<a href=\"https://github.com/malloydata/malloy/blob/main/packages/malloy-render/docs/plugin-quick-start.md\">Plugin Quick Start</a>"
      },
      {
        "type": "p",
        "text": "<a href=\"https://github.com/malloydata/malloy/blob/main/packages/malloy-render/docs/plugin-api-reference.md\">Plugin API Reference</a>"
      }
    ],
    "path": "/documentation/visualizations/about_rendering.malloynb"
  },
  {
    "titles": [
      "Using Render Tags"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "When Malloy runs a query, it returns two things.  The <em>results</em> of the query and <em>metadata</em> about the results.  The metadata are the schema for the results, including type information.  Malloy also provides a mechanism to tag things in the source code and return tags with this meta data."
      },
      {
        "type": "p",
        "text": "In Malloy, anything that can be named can be tagged. A tag starts with a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">#</span></span></code>. Tags that start on a new line attach the tag the thing on the following line. For more details about how tagging works, see the <a href=\"../language/tags\">Tags</a> section."
      },
      {
        "type": "p",
        "text": "Malloy's rendering library interprets these tags to change how results are rendered."
      }
    ],
    "path": "/documentation/visualizations/about_rendering.malloynb"
  },
  {
    "titles": [
      "Using Render Tags",
      "Tagging individual elements"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "In the query below, the measure <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">percent_of_total</span></span></code> is tagged as a percentage. Any time <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">percent_of_total</span></span></code> is used in a query, Malloy's rendering library will be displayed as a percentage."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\"># percent</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">percent_of_flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> / </span><span style=\"color: #795E26\">all</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">percent_of_flights</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) -&gt;  {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Simply adding <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\"># bar_chart</span></span></code> before the query tags it and tells the rendering library to show the result as a bar chart. See the docs on the <a href=\"./bar_charts\">Bar Chart tag</a> for more information."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\"># bar_chart</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) -&gt;  {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/visualizations/about_rendering.malloynb"
  },
  {
    "titles": [
      "Bar Charts"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy can create simple bar charts and bar charts with series breakdowns, either stacked or grouped."
      },
      {
        "type": "p",
        "text": "The examples below all use the following semantic model."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/carriers.parquet&#39;</span><span style=\"color: #000000\">) </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">on</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">code</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">to_sfo_flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">destination</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;SFO&#39;</span><span style=\"color: #000000\"> }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">to_oak_flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">destination</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;OAK&#39;</span><span style=\"color: #000000\"> }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">from_sfo_flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">origin</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;SFO&#39;</span><span style=\"color: #000000\"> }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">from_oak_flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">origin</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;OAK&#39;</span><span style=\"color: #000000\"> }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">aircraft_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">tail_num</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/visualizations/bar_charts.malloynb"
  },
  {
    "titles": [
      "Bar Charts",
      "Simple Bar Chart"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Basic bar charts use the first dimension as the X-axis, and the first aggregate as the Y-axis:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\"># bar_chart</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">nickname</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/visualizations/bar_charts.malloynb"
  },
  {
    "titles": [
      "Bar Charts",
      "Bar Chart with Breakdown"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Adding a second dimension to the query in the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">:</span></span></code> clause creates a bar chart with a breakdown along that second dimension:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\"># bar_chart</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">destination</span><span style=\"color: #000000\"> ? </span><span style=\"color: #A31515\">&#39;SFO&#39;</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">&#39;OAK&#39;</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">&#39;SJC&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">nickname</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">destination</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\"># bar_chart</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">destination</span><span style=\"color: #000000\"> ? </span><span style=\"color: #A31515\">&#39;SFO&#39;</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">&#39;OAK&#39;</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">&#39;SJC&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">destination</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">nickname</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "To stack bars instead of grouping them, add the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">stack</span></span></code> tag:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\"># bar_chart.stack</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">destination</span><span style=\"color: #000000\"> ? </span><span style=\"color: #A31515\">&#39;SFO&#39;</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">&#39;OAK&#39;</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">&#39;SJC&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">nickname</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">destination</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/visualizations/bar_charts.malloynb"
  },
  {
    "titles": [
      "Bar Charts",
      "Controlling Behavior with Tag Parameters"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "You can explicitly set any of the parameters in the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">bar_chart</span></span></code> tag. The following parameters are supported:"
      },
      {
        "type": "p",
        "text": "x"
      },
      {
        "type": "p",
        "text": "y"
      },
      {
        "type": "p",
        "text": "series"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\"># bar_chart</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">{</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">x</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">nickname</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">series</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">destination</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">y</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">flight_count</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">}</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">destination</span><span style=\"color: #000000\"> ? </span><span style=\"color: #A31515\">&#39;SFO&#39;</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">&#39;OAK&#39;</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">&#39;SJC&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">destination</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">nickname</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/visualizations/bar_charts.malloynb"
  },
  {
    "titles": [
      "Bar Charts",
      "Breakdown Chart with Multiple Measures"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "To create a breakdown chart with multiple measures as the series, provide y as an array of field names."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\"># bar_chart</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">{</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">x</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">nickname</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">y</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">[&#39;to_sfo_flight_count&#39;,</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">&#39;to_oak_flight_count&#39;]</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">}</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">nickname</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">to_sfo_flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">to_oak_flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/visualizations/bar_charts.malloynb"
  },
  {
    "titles": [
      "Bar Charts",
      "Embedded Parameters"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Parameters can also be embedded directly in a query by tagging fields:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\"># bar_chart</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">destination</span><span style=\"color: #000000\"> ? </span><span style=\"color: #A31515\">&#39;SFO&#39;</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">&#39;OAK&#39;</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">&#39;SJC&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\"># series</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">destination</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\"># x</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">nickname</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\"># y</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">aircraft_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "For measure series, tag multiple aggregates as <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">y</span></span></code> by placing the tag above the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span></code> keyword:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\"># bar_chart</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">nickname</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\"># y</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">to_sfo_flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">to_oak_flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/visualizations/bar_charts.malloynb"
  },
  {
    "titles": [
      "Bar Charts",
      "Nested Bar Charts"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Bar charts can be used inside of nested queries:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">nickname</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\"># bar_chart.stack</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">top_destinations</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\">  {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">destination</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\"># y</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">from_sfo_flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">from_oak_flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">10</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\"># bar_chart</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_hour_of_day</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\">  {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">hour_of_day</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">hour</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/visualizations/bar_charts.malloynb"
  },
  {
    "titles": [
      "Line Charts"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The examples below all use the following semantic model."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\">## renderer_next</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">@2001</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/carriers.parquet&#39;</span><span style=\"color: #000000\">) </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">on</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">code</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">aircraft_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">tail_num</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Line charts take two or three parameters."
      },
      {
        "type": "p",
        "text": "First parameter -  X-axis is time field or numeric expression"
      },
      {
        "type": "p",
        "text": "Second parameter - Y-axis is a numeric expression"
      },
      {
        "type": "p",
        "text": "Third (optional) Pivot is dimensional field (numeric or string)"
      }
    ],
    "path": "/documentation/visualizations/charts_line_chart.malloynb"
  },
  {
    "titles": [
      "Line Charts",
      "Single line line_chart"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\"># line_chart</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">departure_month</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">month</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">departure_month</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/visualizations/charts_line_chart.malloynb"
  },
  {
    "titles": [
      "Line Charts",
      "Multi line line_chart"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "There are two modes to generate mulitple lines in a chart.  You can group by an additional parameter (that shows the results as lines) or you can explicitly tag the y-axis parameters."
      },
      {
        "type": "p",
        "text": "The third parameter in a line chart adds a line for each dimension found."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\"># line_chart</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">departure_month</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">month</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">nickname</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">departure_month</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Explicitly tagging the x and y axis."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\"># line_chart</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\"># x</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">departure_month</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">month</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\"># y</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">south_west</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> {</span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">nickname</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;Southwest&#39;</span><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\"># y</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">american</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> {</span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">nickname</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;American&#39;</span><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">departure_month</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/visualizations/charts_line_chart.malloynb"
  },
  {
    "titles": [
      "Line Charts",
      "Line Charts nested in tables"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "When line charts are nested in tables the size is reduced.  Nested line charts increase the density of information provided by the result."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">destination</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\"># line_chart</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_month</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\">  {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">departure_month</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">month</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">nickname</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">departure_month</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">5</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/visualizations/charts_line_chart.malloynb"
  },
  {
    "titles": [
      "Dashboards"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">dashboard</span></span></code> style can be invoked on something that will render as a table <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\"># dashboard</span></span></code> tag. When a query is rendered as a dashboard, dimensions aligned at the top, and agregates and nested queries float within the dashboard."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_state_and_county</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">10</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_fac_type</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\">  {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">fac_type</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Queries in Malloy are often very complex and multifaceted, which makes them difficult to read in one nested table:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">by_state_and_county</span></span></pre>"
      },
      {
        "type": "p",
        "text": "In such cases, the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\"># dashboard</span></span></code> renderer is useful for making the results easier to read:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\"># dashboard</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">by_state_and_county</span></span></pre>"
      }
    ],
    "path": "/documentation/visualizations/dashboards.malloynb"
  },
  {
    "titles": [
      "Legacy Renderer"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "A new renderer is currently being developed for Malloy; however, some functionality is not yet fully implemented. To revert back to the legacy renderer, use the model tag <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\">## renderer_legacy</span></span></code>."
      },
      {
        "type": "p",
        "text": "You will need to revert back to the legacy renderer if you are using:"
      },
      {
        "type": "p",
        "text": "Export to HTML in VS Code"
      },
      {
        "type": "p",
        "text": "Drilling"
      },
      {
        "type": "p",
        "text": "Pivoting"
      },
      {
        "type": "p",
        "text": "Transpose"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\">## renderer_legacy</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">name</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">code</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39; - &#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">full_name</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/visualizations/legacy_renderer.malloynb"
  },
  {
    "titles": [
      "Legacy Renderer",
      "An example table"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">fac_type</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">major_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\"> { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">major</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;Y&#39;</span><span style=\"color: #000000\"> }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">average_elevation</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">elevation</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">top_states</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">average_elevation</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">elevation</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">3</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/visualizations/legacy_renderer.malloynb"
  },
  {
    "titles": [
      "Links"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Results can annotated so the results are be rendered with links to external urls."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/carriers.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">on</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\">=</span><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">code</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/visualizations/links.malloynb"
  },
  {
    "titles": [
      "Links",
      "Simple <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">link</span></span></code> annotation"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "If you have a column which is a url, you can turn it into a link with a simple '# link` annotation"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\"># link</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_link</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&quot;https://www.flightsfrom.com/&quot;</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">origin</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">5</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/visualizations/links.malloynb"
  },
  {
    "titles": [
      "Links",
      "Link url_template, append to the end"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Often the think you want on the template is at the end of the string.  Create links to flightsfrom.com."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\"># link</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">{url_template</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">&#39;https://www.flightsfrom.com/&#39;}</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">origin</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">5</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/visualizations/links.malloynb"
  },
  {
    "titles": [
      "Links",
      "Link url_template, substition"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Sometimes the variable part of the link needs to be substitued in the middle\nof the string.  In this case, the output columns value inserted where $$ appears in the url_template."
      },
      {
        "type": "p",
        "text": "Flights to SJC with links to 'flightsfrom.com'."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">destination</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;SJC&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\"># link</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">{url_template</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">&#39;https://www.flightsfrom.com/$$-SJC&#39;}</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">origin</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">5</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/visualizations/links.malloynb"
  },
  {
    "titles": [
      "Links",
      "Link with key column coming from another field."
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "In the example below we want to show the Carrier's nickname with a link using the carriers code.  We can do this by including the carrier code in the query, hiding it with a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">#hidden</span></span></code> tag and referencing <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">carrier</span></span></code> using <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">field</span></span></code> parameter in the <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\"># link</span></span></code> tag."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\"># link</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">{url_template</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">&#39;https://www.flightsfrom.com/$$&#39;</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">field</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">carrier}</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">nickname</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\"># hidden</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">5</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/visualizations/links.malloynb"
  },
  {
    "titles": [
      "Lists"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Tables with one or two elements can be rendered as lists.  Lists improve information density."
      },
      {
        "type": "p",
        "text": "The examples below use the following models"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/visualizations/lists.malloynb"
  },
  {
    "titles": [
      "Lists",
      "Normal Table"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">faa_region</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_state</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\">  {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/visualizations/lists.malloynb"
  },
  {
    "titles": [
      "Lists",
      "# list"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "With a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">list</span></span></code>, just the first element in the table is shown."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">faa_region</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\"># list</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_state</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\">  {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/visualizations/lists.malloynb"
  },
  {
    "titles": [
      "Lists",
      "# list_detail"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "With <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">list_detail</span></span></code> the element and value are shown."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">faa_region</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\"># list_detail</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_state</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\">  {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/visualizations/lists.malloynb"
  },
  {
    "titles": [
      "Rendering Numbers"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy's render provides a variety of ways to render numeric values.  Tagging a number will change how the number is displayed in the result set but the underlying value doesn't change."
      },
      {
        "type": "p",
        "text": "The following examples that follow use the Malloy semantic data model below."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">name</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">code</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39; - &#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">full_name</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">orig</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">on</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">origin</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">orig</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">code</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">dest</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">on</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">destination</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">dest</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">code</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/visualizations/numbers.malloynb"
  },
  {
    "titles": [
      "Rendering Numbers",
      "# percent"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Carriers as percentage of flights"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\"># percent</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">percent_of_flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> / </span><span style=\"color: #795E26\">all</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/visualizations/numbers.malloynb"
  },
  {
    "titles": [
      "Rendering Numbers",
      "# number"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy uses LookML's (Excel) string definitions for formatting numbers."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\"># number</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">&quot;0&quot;</span><span style=\"color: #008000\">             # </span><span style=\"color: #0451A5\">Integer</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">(123)</span></span>\n<span class=\"line\"><span style=\"color: #0451A5\"># number</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">&quot;*00</span><span style=\"color: #008000\">#</span><span style=\"color: #0451A5\">&quot;</span><span style=\"color: #008000\">          # </span><span style=\"color: #0451A5\">Integer</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">zero-padded</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">to</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">3</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">places</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">(001)</span></span>\n<span class=\"line\"><span style=\"color: #0451A5\"># number</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">&quot;0</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">\\&quot;</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">String\\&quot;&quot;</span><span style=\"color: #008000\"> # </span><span style=\"color: #0451A5\">Integer</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">followed</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">by</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">a</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">string</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">(123</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">String)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">                              </span><span style=\"color: #0451A5\"># </span><span style=\"color: #008000\">  </span><span style=\"color: #0451A5\">Note</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">\\&quot;String\\&quot;</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">can</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">be</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">replaced</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">with</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">any</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">other</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">word</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #0451A5\"># number</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">&quot;0.</span><span style=\"color: #008000\">##</span><span style=\"color: #0451A5\">&quot;</span><span style=\"color: #008000\">          # </span><span style=\"color: #0451A5\">Number</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">up</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">to</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">2</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">decimals</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">(1.</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">or</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">1.2</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">or</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">1.23)</span></span>\n<span class=\"line\"><span style=\"color: #0451A5\"># number</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">&quot;0.00&quot;</span><span style=\"color: #008000\">          # </span><span style=\"color: #0451A5\">Number</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">with</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">exactly</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">2</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">decimals</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">(1.23)</span></span>\n<span class=\"line\"><span style=\"color: #0451A5\"># number</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">&quot;*00</span><span style=\"color: #008000\">#</span><span style=\"color: #0451A5\">.00&quot;</span><span style=\"color: #008000\">       # </span><span style=\"color: #0451A5\">Number</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">zero-padded</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">to</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">3</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">places</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">and</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">exactly</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">2</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">decimals</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">(001.23)</span></span>\n<span class=\"line\"><span style=\"color: #0451A5\"># number</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">&quot;</span><span style=\"color: #008000\">#</span><span style=\"color: #0451A5\">,</span><span style=\"color: #008000\">##</span><span style=\"color: #0451A5\">0&quot;</span><span style=\"color: #008000\">         # </span><span style=\"color: #0451A5\">Number</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">with</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">comma</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">between</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">thousands</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">(1,234)</span></span>\n<span class=\"line\"><span style=\"color: #0451A5\"># number</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">&quot;</span><span style=\"color: #008000\">#</span><span style=\"color: #0451A5\">,</span><span style=\"color: #008000\">##</span><span style=\"color: #0451A5\">0.00&quot;</span><span style=\"color: #008000\">      # </span><span style=\"color: #0451A5\">Number</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">with</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">comma</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">between</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">thousands</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">and</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">2</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">decimals</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">(1,234.00)</span></span>\n<span class=\"line\"><span style=\"color: #0451A5\"># number</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">&quot;0.000,,\\&quot;</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">M\\&quot;&quot;</span><span style=\"color: #008000\"> # </span><span style=\"color: #0451A5\">Number</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">in</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">millions</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">with</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">3</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">decimals</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">(1.234</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">M)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">                              </span><span style=\"color: #0451A5\"># </span><span style=\"color: #008000\">  </span><span style=\"color: #0451A5\">Note</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">division</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">by</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">1</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">million</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">happens</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">automatically</span></span>\n<span class=\"line\"><span style=\"color: #0451A5\"># number</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">&quot;0.000,\\&quot;</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">K\\&quot;&quot;</span><span style=\"color: #008000\">  # </span><span style=\"color: #0451A5\">Number</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">in</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">thousands</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">with</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">3</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">decimals</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">(1.234</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">K)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">                              </span><span style=\"color: #0451A5\"># </span><span style=\"color: #008000\">  </span><span style=\"color: #0451A5\">Note</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">division</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">by</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">1</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">thousand</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">happens</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">automatically</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #0451A5\"># number</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">&quot;$0&quot;</span><span style=\"color: #008000\">            # </span><span style=\"color: #0451A5\">Dollars</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">with</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">0</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">decimals</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">($123)</span></span>\n<span class=\"line\"><span style=\"color: #0451A5\"># number</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">&quot;$0.00&quot;</span><span style=\"color: #008000\">         # </span><span style=\"color: #0451A5\">Dollars</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">with</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">2</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">decimals</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">($123.00)</span></span>\n<span class=\"line\"><span style=\"color: #0451A5\"># number</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">&quot;\\&quot;€\\&quot;0&quot;</span><span style=\"color: #008000\">        # </span><span style=\"color: #0451A5\">Euros</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">with</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">0</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">decimals</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">(€123)</span></span>\n<span class=\"line\"><span style=\"color: #0451A5\"># number</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">&quot;$</span><span style=\"color: #008000\">#</span><span style=\"color: #0451A5\">,</span><span style=\"color: #008000\">##</span><span style=\"color: #0451A5\">0.00&quot;</span><span style=\"color: #008000\">     # </span><span style=\"color: #0451A5\">Dollars</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">with</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">comma</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">btwn</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">thousands</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">and</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">2</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">decimals</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">($1,234.00)</span></span>\n<span class=\"line\"><span style=\"color: #0451A5\"># number</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">&quot;$</span><span style=\"color: #008000\">#</span><span style=\"color: #0451A5\">.00;($</span><span style=\"color: #008000\">#</span><span style=\"color: #0451A5\">.00)&quot;</span><span style=\"color: #008000\"> # </span><span style=\"color: #0451A5\">Dollars</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">with</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">2</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">decimals,</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">positive</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">values</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">displayed</span></span>\n<span class=\"line\"><span style=\"color: #000000\">                              </span><span style=\"color: #0451A5\"># </span><span style=\"color: #008000\">  </span><span style=\"color: #0451A5\">normally,</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">negative</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">values</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">wrapped</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">in</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">parenthesis</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #0451A5\"># number</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">&quot;0\\%&quot;</span><span style=\"color: #008000\">           # </span><span style=\"color: #0451A5\">Display</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">as</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">percent</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">with</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">0</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">decimals</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">(1</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">becomes</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">1%)</span></span>\n<span class=\"line\"><span style=\"color: #0451A5\"># number</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">&quot;0.00\\%&quot;</span><span style=\"color: #008000\">        # </span><span style=\"color: #0451A5\">Display</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">as</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">percent</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">with</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">2</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">decimals</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">(1</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">becomes</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">1.00%)</span></span>\n<span class=\"line\"><span style=\"color: #0451A5\"># number</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">&quot;0%&quot;</span><span style=\"color: #008000\">            # </span><span style=\"color: #0451A5\">Convert</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">to</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">percent</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">with</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">0</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">decimals</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">(.01</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">becomes</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">1%)</span></span>\n<span class=\"line\"><span style=\"color: #0451A5\"># format</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">&quot;0.00%&quot;</span><span style=\"color: #008000\">         # </span><span style=\"color: #0451A5\">Convert</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">to</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">percent</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">with</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">2</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">decimals</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">(.01</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">becomes</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">1.00%)</span></span></pre>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// tag a single element</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\"># number</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">&quot;0&quot;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">`integer`</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// tag multiple elements at once.</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\"># number</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">&quot;$</span><span style=\"color: #008000\">#</span><span style=\"color: #0451A5\">,</span><span style=\"color: #008000\">##</span><span style=\"color: #0451A5\">0;($</span><span style=\"color: #008000\">#</span><span style=\"color: #0451A5\">,</span><span style=\"color: #008000\">##</span><span style=\"color: #0451A5\">0)&quot;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">dollars</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">neg_dollars</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\"> - </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/visualizations/numbers.malloynb"
  },
  {
    "titles": [
      "Rendering Numbers",
      "Durations"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\"># duration</span></span></code> renderer interprets a value as a number of seconds and renders it as a human-adjusted duration. Other units can be specified like <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\"># duration</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">&quot;minutes&quot;</span></span></code>, with possible units of <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">&quot;nanoseconds&quot;</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">&quot;microseconds&quot;</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">&quot;milliseconds&quot;</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">&quot;seconds&quot;</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">&quot;minutes&quot;</span></span></code>, <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">&quot;hours&quot;</span></span></code>, and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">&quot;days&quot;</span></span></code>."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">dep_date</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">day</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\"># duration</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">&quot;minutes&quot;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">longest_flight_time</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">max</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">flight_time</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">total_flight_time</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">flight_time</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\">    </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">20</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/visualizations/numbers.malloynb"
  },
  {
    "titles": [
      "Rendering Results"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "When Malloy runs a query, it returns two things.  The <em>results</em> of the query and <em>metadata</em> about the results.  The metadata are the schema for the results, including type information.  Malloy also provides a mechanism to tag things in the source code and return tags with this meta data."
      },
      {
        "type": "p",
        "text": "In Malloy, anything that can be named can be tagged. A tag starts with a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #A31515\">#</span></span></code>. Tags that start on a new line attach the tag the thing on the following line. For more details about how tagging works, see the <a href=\"../language/tags\">Tags</a> section."
      },
      {
        "type": "p",
        "text": "Malloy's rendering library interprets these tags to change how results are rendered."
      }
    ],
    "path": "/documentation/visualizations/overview.malloynb"
  },
  {
    "titles": [
      "Rendering Results",
      "Tagging individual elements"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "In the query below, the measure <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">percent_of_total</span></span></code> is tagged as a percentage. Any time <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">percent_of_total</span></span></code> is used in a query, Malloy's rendering library will be displayed as a percentage."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\"># percent</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">percent_of_flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> / </span><span style=\"color: #795E26\">all</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">percent_of_flights</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) -&gt;  {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Simply adding <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\"># bar_chart</span></span></code> before the query tags it and tells the rendering library to show the result as a bar chart. See the docs on the <a href=\"./bar_charts\">Bar Chart tag</a> for more information."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\"># bar_chart</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) -&gt;  {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "p",
        "text": "Malloy's renderering library uses the <a href=\"https://vega.github.io/vega-lite/\">Vega-Lite</a> for charting, allowing visualization of results. Malloy's rendering library is a separate layer from Malloy's data access layer.:"
      }
    ],
    "path": "/documentation/visualizations/overview.malloynb"
  },
  {
    "titles": [
      "Rendering Results",
      "Rendering tags"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "<a href=\"pivots\">Pivoted Tables</a>"
      },
      {
        "type": "p",
        "text": "<a href=\"transpose\">Transposed Tables</a>"
      },
      {
        "type": "p",
        "text": "<a href=\"dashboards\">Dashboards</a>"
      },
      {
        "type": "p",
        "text": "<a href=\"lists\">Lists</a>"
      },
      {
        "type": "p",
        "text": "<a href=\"charts_line_chart\">Line Charts</a>"
      },
      {
        "type": "p",
        "text": "<a href=\"scatter_charts\">Scatter Charts</a>"
      },
      {
        "type": "p",
        "text": "<a href=\"shape_maps\">Shape Maps</a>"
      },
      {
        "type": "p",
        "text": "<a href=\"segment_maps\">Segment Maps</a>"
      },
      {
        "type": "p",
        "text": "<a href=\"numbers\">Number</a> - number formatting, percentages, duration, and bytes"
      },
      {
        "type": "p",
        "text": "<a href=\"bar_charts\">Bar Charts</a> - various forms of column charts"
      }
    ],
    "path": "/documentation/visualizations/overview.malloynb"
  },
  {
    "titles": [
      "Pivoting Results"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy's rederer has flexible and powerful way of pivoting data."
      }
    ],
    "path": "/documentation/visualizations/pivots.malloynb"
  },
  {
    "titles": [
      "Pivoting Results",
      "Nesting first"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy's ability to nest queries allows you to compute two levels of queries simultaneously.  The query below first groups airports by <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">state</span></span></code> and then groups by the type of facility (<code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">fac_type</span></span></code>).  For each state we see count of all the facilities."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\">## renderer_legacy</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">) -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">facility_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_fac_type</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\">  {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">fac_type</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">facility_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/visualizations/pivots.malloynb"
  },
  {
    "titles": [
      "Pivoting Results",
      "Just add '# pivot'"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "We can take this exact same query above (and same output) and have it simply rendered as a pivot table by adding a <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\"># pivot</span></span></code> tag on the nested query."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">) -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">facility_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\"># pivot</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_fac_type</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\">  {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">fac_type</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">facility_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/visualizations/pivots.malloynb"
  },
  {
    "titles": [
      "Pivoting Results",
      "Pivots are really powerful"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The model below is used in all the following examples."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/carriers.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">on</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">carrier</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">code</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">dest</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\">  </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">on</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">destination</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">dest</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">code</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">orig</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\">  </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">on</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">destination</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">orig</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">code</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">total_distance</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">distance</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/visualizations/pivots.malloynb"
  },
  {
    "titles": [
      "Pivoting Results",
      "The Classic Pivot"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "A classic data pivot is data is dimensionalized by two attributes the data can be rendered with one dimension along the x-axis and one dimension on the y-axis with the aggregate computations making up the center of the table. The cross section of the data allows for easy comparison. In Malloy, pivots columns are nested queries."
      },
      {
        "type": "p",
        "text": "Carriers by FAA Region"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">nickname</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\"># pivot</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_faa_region</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\">  {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">orig</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">faa_region</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/visualizations/pivots.malloynb"
  },
  {
    "titles": [
      "Pivoting Results",
      "The Pivot Filtered"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "You can control which dimension are shown in the pivot with a filter (and their order)"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">nickname</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\"># pivot</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_state</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\">  {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">orig</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">state</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;CA&#39;</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">&#39;NY&#39;</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">&#39;WA&#39;</span><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// only show these states</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">orig</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span><span style=\"color: #000000\">   </span><span style=\"color: #008000\">// sort order of the pivoted columns</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/visualizations/pivots.malloynb"
  },
  {
    "titles": [
      "Pivoting Results",
      "The Pivot with multiple aggreagtes"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Pivots can have multiple aggregates. In this case we show <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">flight_count</span></span></code> and <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #001080\">total_distance</span></span></code> for each of the states."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">nickname</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\"># pivot</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_state</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\">  {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">orig</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">state</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;CA&#39;</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">&#39;NY&#39;</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">&#39;WA&#39;</span><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// only show these states</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">orig</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">total_distance</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span><span style=\"color: #000000\">   </span><span style=\"color: #008000\">// sort order of the pivoted columns</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/visualizations/pivots.malloynb"
  },
  {
    "titles": [
      "Pivoting Results",
      "Aggregates outside the pivot (and row ordering)"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy allows you to intermix unpivoted data along with pivoted data through nesting.  Since pivots are nests, any aggregate outside the nest is just shown normally."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">nickname</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">total_flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\">   </span><span style=\"color: #008000\">// outside the pivot</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">total_distance</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\"># pivot</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_state</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\">  {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">orig</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">state</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;CA&#39;</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">&#39;NY&#39;</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">&#39;WA&#39;</span><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// only show these states</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">orig</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span><span style=\"color: #000000\">   </span><span style=\"color: #008000\">// sort order of the pivoted columns</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/visualizations/pivots.malloynb"
  },
  {
    "titles": [
      "Pivoting Results",
      "Multiple pivots in the same table"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy allows you to intermix unpivoted data along with pivoted data through nesting.  Since pivots are nests, any aggregate outside the nest is just shown normally."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">nickname</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">total_flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\">   </span><span style=\"color: #008000\">// outside the pivot</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\"># pivot</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_state</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\">  {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">orig</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">state</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;CA&#39;</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">&#39;NY&#39;</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">&#39;WA&#39;</span><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// only show these states</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">orig</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span><span style=\"color: #000000\">   </span><span style=\"color: #008000\">// sort order of the pivoted columns</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\"># pivot</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_year</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\">  {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">year</span><span style=\"color: #000000\"> &gt; </span><span style=\"color: #098658\">@2003</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">dep_year</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">year</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/visualizations/pivots.malloynb"
  },
  {
    "titles": [
      "Pivoting Results",
      "Ordering by a column in the pivot"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy sorts by the first aggregate column in finds, generally.  The <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\"># hidden</span></span></code> tag allows you to not show a column in a result.  By adding a measure filtered by the column we are interested in, we can sort the entire table on a column in the pivot."
      },
      {
        "type": "p",
        "text": "Rows sorted by 'CA' flights"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">nickname</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\"># hidden</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">ca_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">orig</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">state</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;CA&#39;</span><span style=\"color: #000000\"> }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\"># pivot</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_state</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\">  {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">orig</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">state</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;CA&#39;</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">&#39;NY&#39;</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">&#39;WA&#39;</span><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// only show these states</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">orig</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span><span style=\"color: #000000\">   </span><span style=\"color: #008000\">// sort order of the pivoted columns</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/visualizations/pivots.malloynb"
  },
  {
    "titles": [
      "Multistage queries in a pivot"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Malloy Renderer uses the metadata from the query to decide which columns to pivot (dimensions are pivoted, aggreates are not). In multistage queries this information is incorrect.  You can manually specify this information with a 'dimensions' parameter on the pivot tag."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carriers</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">nickname</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">total_flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\"># pivot</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">{</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">dimensions</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">[&quot;dep_year&quot;]</span><span style=\"color: #008000\"> </span><span style=\"color: #0451A5\">}</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_year</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\">  {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">dep_year</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\">.</span><span style=\"color: #0000FF\">year</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">calculate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">growth</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> - </span><span style=\"color: #795E26\">lag</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">)) / </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">order_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">dep_year</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  } -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">dep_year</span><span style=\"color: #000000\"> &gt; </span><span style=\"color: #098658\">@2003</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">select</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">dep_year</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\"># percent</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">growth</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/visualizations/pivots.malloynb"
  },
  {
    "titles": [
      "The New Renderer"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "A new renderer is currently being developed for Malloy. To use this experimental renderer, use the model tag <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\">## renderer_next</span></span></code>. More docs to come."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\">## renderer_next</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">name</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">code</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39; - &#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">full_name</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/visualizations/renderer_next.malloynb"
  },
  {
    "titles": [
      "The New Renderer",
      "An example table"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">fac_type</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">major_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\"> { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">major</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;Y&#39;</span><span style=\"color: #000000\"> }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">average_elevation</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">elevation</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">top_states</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">average_elevation</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">elevation</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">limit</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">3</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/visualizations/renderer_next.malloynb"
  },
  {
    "titles": [
      "Scatter Charts"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Scatter charts compare two numeric values."
      },
      {
        "type": "p",
        "text": "Model for this example"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">aircraft</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/aircraft.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">aircraft_models</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/aircraft_models.parquet&#39;</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">on</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">aircraft_model_code</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">aircraft_models</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">aircraft_model_code</span><span style=\"color: #000000\"> </span></span>\n<span class=\"line\"><span style=\"color: #000000\">  } </span><span style=\"color: #AF00DB\">on</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">tail_num</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">aircraft</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">tail_num</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\"># scatter_chart</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">origin</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;ORD&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">seats</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">aircraft</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">aircraft_models</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">seats</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">distance</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">distance</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">route_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">origin</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">destination</span><span style=\"color: #000000\">))</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/visualizations/scatter_charts.malloynb"
  },
  {
    "titles": [
      "Scatter Charts",
      "Run as a trellis"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">origin</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\"># scatter_chart</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">seats_by_distance_scatter_chart</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\">  {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">seats</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">aircraft</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">aircraft_models</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">seats</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">distance</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">distance</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">route_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">origin</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">destination</span><span style=\"color: #000000\">))</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/visualizations/scatter_charts.malloynb"
  },
  {
    "titles": [
      "Segment Maps"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The plugin currently supports US maps. Segment maps take as input 4 columns: start latitude , start longitude, end latitude, and  end longitude of the segment.  The model and data styles for the subsequent examples are:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">dimension</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">name</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">code</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&#39; - &#39;</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">full_name</span><span style=\"color: #000000\">)</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/flights.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">orig</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">on</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">origin</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">orig</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">code</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">join_one</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">dest</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">on</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">destination</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">dest</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">code</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\"># segment_map</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">routes_map</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">orig</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">latitude</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">orig</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">longitude</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">latitude2</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">dest</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">latitude</span></span>\n<span class=\"line\"><span style=\"color: #000000\">      </span><span style=\"color: #001080\">longitude2</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">dest</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">longitude</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/visualizations/segment_maps.malloynb"
  },
  {
    "titles": [
      "Segment Maps",
      "Run as a simple query"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Departing from Chicago"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">routes_map</span><span style=\"color: #000000\"> + { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">@2003-02</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">and</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">origin</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;ORD&#39;</span><span style=\"color: #000000\"> }</span></span></pre>"
      }
    ],
    "path": "/documentation/visualizations/segment_maps.malloynb"
  },
  {
    "titles": [
      "Segment Maps",
      "Run as a trellis"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "By calling the configured map as a nested query, a trellis is formed."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">dep_time</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">@2003-02</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">and</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">origin</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;ORD&#39;</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">routes_map</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/visualizations/segment_maps.malloynb"
  },
  {
    "titles": [
      "Segment Maps",
      "Run as a trellis, repeated with different filters"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flights</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">carrier</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">flight_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">ord_segment_map</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">routes_map</span><span style=\"color: #000000\"> + { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">origin</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;ORD&#39;</span><span style=\"color: #000000\"> }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">sfo_segment_map</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">routes_map</span><span style=\"color: #000000\"> + { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">origin</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;SFO&#39;</span><span style=\"color: #000000\"> }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">jfk_segment_map</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">routes_map</span><span style=\"color: #000000\"> + { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">origin</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;JFK&#39;</span><span style=\"color: #000000\"> }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/visualizations/segment_maps.malloynb"
  },
  {
    "titles": [
      "Shape Maps"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "The plugin currently supports US maps and state names. The model and data styles for the subsequent examples are:"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">primary_key</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">code</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_state</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\"># shape_map</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">view</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_state_shaped</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">by_state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/visualizations/shape_maps.malloynb"
  },
  {
    "titles": [
      "Shape Maps",
      "Run a query and tag the results as a shape map"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "We can explicitly return a result as a shape map."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\"># shape_map</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">by_state</span></span></pre>"
      }
    ],
    "path": "/documentation/visualizations/shape_maps.malloynb"
  },
  {
    "titles": [
      "Shape Maps",
      "The tag is in the semantic model"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "In the query below the tag is in the semantic model."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> -&gt; </span><span style=\"color: #001080\">by_state_shaped</span><span style=\"color: #000000\"> + {</span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">fac_type</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">&#39;SEAPLANE BASE&#39;</span><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/visualizations/shape_maps.malloynb"
  },
  {
    "titles": [
      "Shape Maps",
      "Run as a trellis"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "By calling the configured map as a nested subtable, a trellis is formed."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">faa_region</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\"># shape_map</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">by_state</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/visualizations/shape_maps.malloynb"
  },
  {
    "titles": [
      "Shape Maps",
      "Run as a trellis, repeated with different filters"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">faa_region</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">nest</span><span style=\"color: #000000\">:</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// shape map is declared in the model</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">heliports</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">by_state_shaped</span><span style=\"color: #000000\"> + { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">fac_type</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;HELIPORT&#39;</span><span style=\"color: #000000\"> }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\"># shape_map</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">seaplane_bases</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">by_state</span><span style=\"color: #000000\"> + { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">fac_type</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;SEAPLANE BASE&#39;</span><span style=\"color: #000000\"> }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/visualizations/shape_maps.malloynb"
  },
  {
    "titles": [
      "Transposed Tables"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "For comparison, it is often interesting to turn a table on it's side.  The <code class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\"># transpose</span></span></code> tag on a query does just that."
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">source</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">duckdb</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">table</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&#39;../data/airports.parquet&#39;</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">extend</span><span style=\"color: #000000\"> {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">measure</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">count</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/visualizations/transpose.malloynb"
  },
  {
    "titles": [
      "Transposed Tables",
      "Normal Table"
    ],
    "paragraphs": [
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">fac_type</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">californa_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\"> { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;CA&#39;</span><span style=\"color: #000000\"> }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">ny_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\"> { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;CA&#39;</span><span style=\"color: #000000\"> }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">major_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\"> { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">major</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;Y&#39;</span><span style=\"color: #000000\"> }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">average_elevation</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">elevation</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/visualizations/transpose.malloynb"
  },
  {
    "titles": [
      "Transposed Tables",
      "Transposed Table"
    ],
    "paragraphs": [
      {
        "type": "p",
        "text": "Great for comparison"
      },
      {
        "type": "code",
        "text": "<pre class=\"language-malloy\" style=\"background-color: #FBFBFB\"><span class=\"line\"><span style=\"color: #0451A5\"># transpose</span></span>\n<span class=\"line\"><span style=\"color: #AF00DB\">run</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">airports</span><span style=\"color: #000000\"> -&gt; {</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">group_by</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">fac_type</span></span>\n<span class=\"line\"><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">aggregate</span><span style=\"color: #000000\">: </span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">airport_count</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">californa_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\"> { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;CA&#39;</span><span style=\"color: #000000\"> }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">ny_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\"> { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">state</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;CA&#39;</span><span style=\"color: #000000\"> }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">major_count</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">airport_count</span><span style=\"color: #000000\"> { </span><span style=\"color: #AF00DB\">where</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">major</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&#39;Y&#39;</span><span style=\"color: #000000\"> }</span></span>\n<span class=\"line\"><span style=\"color: #000000\">    </span><span style=\"color: #001080\">average_elevation</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">elevation</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">avg</span><span style=\"color: #000000\">()</span></span>\n<span class=\"line\"><span style=\"color: #000000\">}</span></span></pre>"
      }
    ],
    "path": "/documentation/visualizations/transpose.malloynb"
  }
]