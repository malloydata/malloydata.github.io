source: words is bigquery.table('malloy-data.malloytest.words') {
  query: five_letter_words is {
    where: length(word) = 5 and word ~ r'^[a-z]{5}$'
    project: word is upper(word)
  }
}

source: numbers is bigquery.table('malloy-data.malloytest.numbers') {
  where: num <= 5

  // code to fake a cross join
  primary_key: a // key to fake a cross join
  dimension: a is 'a';
}

source: words_and_letters is from(words -> five_letter_words) {
  // Cross join is missing at the moment
  join_one: numbers with a
  dimension: a is 'a' // key to fake a cross join

  query: words_and_position is {
    group_by: word
    nest: letters is {
      order_by: 2
      group_by:
        letter is substr(word, numbers.num, 1)
        position is numbers.num
    }
  }
}

source: wordle is from(words_and_letters -> words_and_position) {

  where: word !~ r'(S|ED)$'

  measure: word_count is count()

  query: five_letter_count is {
    aggregate: five_letter_count is word_count
  }

  query: common_letters is {
    group_by: letters.letter
    aggregate:
      word_count
      use_count is letters.count()
  }

  query: common_letters_and_positions is {
    group_by: letters.letter
    aggregate:
      word_count
      use_count is letters.count()
    nest: positition_order_bar_chart is {
      group_by: letters.position
      aggregate: word_count
    }
  }

  query: letter_position is {
    group_by:
      letters.letter
      letters.position
    aggregate: word_count
  }


  query: letter_position_and_words is {
    group_by:
      letters.letter
      letters.position
    aggregate: word_count
    nest: words_list is {
      group_by: word
    }
  }

  query: word_score is {
    group_by:
      letters.letter
      letters.position
    aggregate: word_count
    nest: words is {
      group_by: word
    }
  } -> {
    group_by: words.word
    aggregate: score is word_count.sum()
  }
}

// Example Guess 'roast'
//  clues  (O- green, A - yellow, RST - gray)
query: wordle -> word_score {
  where:
    word ~ r'C',           // YELLOW: has these characters
    word ~ r'...[^C]E',    // GREEN/YELLOW: characters in these spots/not spots
    not word ~ r'[SLAT]'   // GRAY: doesn't have these characters
}
