--! styles flights.styles.json

import "airports.malloy"

source: carriers is duckdb.table('data/carriers.parquet') extend {
  primary_key: code
  measure: carrier_count is count()
}

source: aircraft_models is duckdb.table('data/aircraft_models.parquet') extend {
  primary_key: aircraft_model_code
  measure: aircraft_model_count is count()
}

source: aircraft is duckdb.table('data/aircraft.parquet') extend {
  primary_key: tail_num
  measure: aircraft_count is count()
  join_one: aircraft_models with aircraft_model_code
}

source: aircraft_facts is duckdb.table('data/flights.parquet') -> {
  group_by: tail_num
  aggregate:
    lifetime_flights is count()
    lifetime_distance is distance.sum()
} extend {
  primary_key: tail_num
  dimension: lifetime_flights_bucketed is floor(lifetime_flights / 1000) * 1000
}

source: flights is duckdb.table('data/flights.parquet') extend {
  primary_key: id2
  rename: origin_code is origin
  rename: destination_code is destination

  join_one: carriers with carrier
  join_one: origin is airports with origin_code
  join_one: destination is airports with destination_code
  join_one: aircraft with tail_num
  join_one: aircraft_facts with tail_num

  measure:
    flight_count is count()
    total_distance is sum(distance)
    seats_for_sale is sum(aircraft.aircraft_models.seats)
    seats_owned is aircraft.sum(aircraft.aircraft_models.seats)

  // shows carriers and number of destinations (bar chart)
  query: by_carrier is -> {
    group_by: carriers.nickname
    aggregate: flight_count
    aggregate: destination_count is destination.count()
  }

  query: carrier_overview is -> {
    where: origin.state = 'CA'
    group_by: carrier_name is carriers.nickname
    aggregate:
      flight_count
      percent_of_this_carriers_flights_to_all_flights
        is flight_count / all(flight_count) * 100
    nest: top_destinations is -> {
      where: aircraft.aircraft_models.manufacturer = 'BOEING'
      group_by: destination.code, destination.full_name
      aggregate:
        flight_count
        flights_to_dest is exclude(flight_count, carrier_name) * 100
        percentage_of_this_carriers_flights_to_this_destination
          is flight_count / all(flight_count) * 100
        percentage_of_all_flights_on_all_carriers_to_this_destination
          is flight_count / exclude(flight_count, carrier_name) * 100
      limit: 3
    }
  }

  // shows year over year growth (line chart)
  query: year_over_year is -> {
    group_by: dep_month is month(dep_time)
    aggregate: flight_count
    group_by: dep_year is dep_time.year
  }

  // shows plane manufacturers and frequency of use
  query: by_manufacturer is -> {
    limit: 5
    group_by: aircraft.aircraft_models.manufacturer
    aggregate: aircraft.aircraft_count, flight_count
  }

  query: delays_by_hour_of_day is -> {
    where: dep_delay > 30
    group_by: dep_hour is hour(dep_time)
    aggregate: flight_count
    group_by: delay is floor(dep_delay) / 30 * 30
  }

  query: carriers_by_month is -> {
    group_by: dep_month is dep_time.month
    aggregate: flight_count
    group_by: carriers.nickname
  }

  query: seats_by_distance is -> {
    group_by: seats is floor(aircraft.aircraft_models.seats / 5) * 5    -- seats rounded to 5
    aggregate: flight_count
    group_by: distance is floor(distance / 20) * 20     -- distance rounded to 20
  }

  query: routes_map is -> {
    group_by:
      origin.latitude
      origin.longitude
      latitude2 is destination.latitude
      longitude2 is destination.longitude
    aggregate: flight_count
  }

  query: destinations_by_month is -> {
    group_by: dep_month is dep_time.month
    aggregate: flight_count
    group_by: destination.name
  }

  query: measures is -> {
    aggregate:
      flight_count
      aircraft.aircraft_count
      dest_count is destination.airport_count
      origin_count is origin.airport_count
  }

  // query: flights -> { where: origin.code = 'SJC' } -> airport_dashboard
  query: airport_dashboard is -> {
    limit: 10
    group_by: code is destination_code
    group_by: destination is destination.full_name
    aggregate: flight_count
    nest:
      carriers_by_month
      routes_map
      delays_by_hour_of_day
  }

  query: plane_usage is -> {
    order_by: 1 desc
    where: aircraft.aircraft_count > 1
    group_by: aircraft_facts.lifetime_flights_bucketed
    aggregate: aircraft.aircraft_count, flight_count
    nest: by_manufacturer, by_carrier
  }


  // query: southwest_flights is carrier_dashboard { where: carriers.nickname = 'Southwest' }
  query: carrier_dashboard is -> { //# dashboard
    aggregate: destination_count is destination.airport_count
    aggregate: flight_count
    nest: by_manufacturer
    nest: by_month is -> {         //# line_chart
      group_by: dep_month is dep_time.month
      aggregate: flight_count
    }
    nest: hubs is -> {
      limit: 10
      where: destination.airport_count > 1
      group_by: hub is origin.name
      aggregate: destination_count is destination.airport_count
    }
    nest: origin_dashboard is -> {   //# dashboard
      limit: 10
      group_by:
        code is origin_code,
        origin is origin.full_name,
        origin.city
      aggregate: flight_count
      nest:
        destinations_by_month   //# line_chart
        routes_map              //# segment_map
        year_over_year          //# line_chart
    }
  }

  query: detail is -> {
    limit: 30
    order_by: dep_time
    project:
      id2, dep_time, tail_num, carrier, origin_code,
      destination_code, distance, aircraft.aircraft_model_code
  }

  // query that you might run for to build a flight search interface
  // query: flights { where: origin.code: 'SJC', destination.code ? 'LAX' | 'BUR', dep_time ? @2004-01-01 } -> kayak
  query: kayak is -> {
    nest: carriers is -> {
      group_by: carriers.nickname
      aggregate: flight_count
    }
    nest: by_hour is -> {
      order_by: 1
      group_by: dep_hour is hour(dep_time)
      aggregate: flight_count
    }
    nest: flights is -> {
      group_by:
        dep_minute is dep_time.minute
        carriers.name
        flight_num
        origin_code
        destination_code
        aircraft.aircraft_models.manufacturer
        aircraft.aircraft_models.model
    }
  }

// example query that shows how you can build a map reduce job to sessionize flights
  query: sessionize is -> {
    group_by: flight_date is dep_time.day
    group_by: carrier
    aggregate: daily_flight_count is flight_count
    nest: per_plane_data is -> {
      limit: 20
      group_by: tail_num
      aggregate: plane_flight_count is flight_count
      nest: flight_legs is -> {
        order_by: 2
        group_by:
          tail_num
          dep_minute is dep_time.minute
          origin_code
          dest_code is destination_code
          dep_delay
          arr_delay
      }
    }
  }

  query: search_index is -> { index: *; where: dep_time? @2004-01 }
}

query: sessionize_delta_southwest is
  flights -> sessionize { where: carrier ? 'WN' | 'DL', dep_time ? @2002-03-03 }

query: kayak_query_sj_to_la is
  flights -> kayak refine {
    where:
      origin.code ? 'SJC',
      destination.code ? 'LAX' | 'BUR',
      dep_time ? @2004-01-01
  }

query: southwest_dashboard is flights -> carrier_dashboard refine {
  where: carriers.nickname ? 'Southwest'
}

query: jetblue_dashbaord is flights -> carrier_dashboard refine {
  where: carriers.nickname ? 'Jetblue'
}
query: sjc_dashboard is flights -> airport_dashboard {
  where: origin.code ? 'SJC'
}

query: sfo_dashboard is flights -> airport_dashboard refine {
  where:  origin.code ? 'SFO'
}
